{
    "docs": [
        {
            "location": "/",
            "text": "Atomist Overview\n\u00b6\n\n\nAtomist enables you to ship software in less time and respond to\noperational events more quickly.  By automating tasks, integrating\ntools, and providing timely, correlated, and actionable information,\nAtomist makes software delivery faster, more standardized, and more\nfun.\n\n\nTimely, correlated, and actionable information results from capturing\nyour processes and operations in code.  Atomist knows the platforms\nand tools you already use: GitHub, Slack, Travis CI.  Atomist\nunderstands your code: Java, C#, JavaScript, Scala, Python, Clojure,\neven Dockerfiles and Maven POMs.  Most importantly, Atomist\nunderstands the relationship between your code, your tools, your\nenvironments, and your running services and brings this information to\nwhere you live: chat.\n\n\nIf you spend time upgrading dependencies across multiple repositories,\nintegrating code repositories and CI, configuring and managing\ndeployment platforms, figuring out who to ask about an error in a log,\nor switching from IDE to chat to web browser ad infinitum, let Atomist\nremove the drudgery and reduce the context switching so your team can\nfocus on what matters: shipping great software.\n\n\nAtomist is SaaS\n\u00b6\n\n\nThe Atomist service consumes events from your systems: source code\nrepositories, continuous integration servers, deployment platforms,\nand chat.  The information from these systems is correlated together:\npushes with builds, artifacts with deployments, stack traces with\ncommits.  The correlation of these events is then used to\nautomatically respond: retry a build, start an integration test,\nmessage a committer.\n\n\nThe Atomist service provides:\n\n\n\n\nthe SaaS platform to ingest and correlate events\n\n\na core set of integrations and event responses\n\n\nthe ability for teams to customize the events, correlation, and\n    actions for their existing processes\n\n\n\n\nAtomist is events\n\u00b6\n\n\nWithin Atomist, all events are captured and actionable.  As events are\nconsumed from your systems, event handlers are triggered.  These\nhandlers respond to events, by taking action themselves and/or\ncreating new events, which can in turn trigger other handlers.  Event\nhandlers can do anything from trigger a deployment of a new version of\nyour service to page the developer whose commit led to a runtime error\nin production to modify code directly to fix errors.\n\n\nAtomist events enable you to:\n\n\n\n\ncodify your workflow\n\n\ncapture best practices in code\n\n\nreduce incident time-to-resolution\n\n\n\n\nAtomist is code\n\u00b6\n\n\nWe\u2019ve all heard that \nsoftware is eating the world\n.  Atomist\neats software.  Atomist consumes your code, understanding your files,\nclasses, variables, exceptions and more.  This understanding is used\nto modify code directly and to connect code changes to runtime\nchanges.\n\n\nAtomist is code that:\n\n\n\n\nunderstands \nyour\n code\n\n\nunderstands your processes\n\n\nunderstands your operations\n\n\ncan \nmodify\n your code\n\n\n\n\nAtomist ties everything together\n\u00b6\n\n\nAtomist is the next phase in the evolution of software.\nInfrastructure-as-code captures infrastructure architecture and\nconfiguration in software.  DevOps automates IT operations with\nsoftware.  Atomist goes further, capturing how we develop and operate\nsoftware \nin software\n.  Atomist lets you say goodbye to the boring,\nrepetitive tasks surrounding software development by giving you the\ntools to automate them away, once and for all.\n\n\n\n\nIn a world where everything is code,\n\nAtomist\n ties everything together.  By bringing software\ndevelopment processes, IT operations, and infrastructure-as-code\ntogether with a deep understanding of the code itself, \nAtomist\n\nis able to surface the right information to the right person at\nthe right time in the right place to speed software delivery and\nstabilize IT operations.\n\n\n\n\nTo help you learn more about Atomist, this documentation contains\n\n\n\n\nGetting Started\n instructions\n\n\nThe Atomist \nUser Guide\n explaining each part of\n    Atomist and how it is used\n\n\nDetailed \nReference Documentation\n\n\n\n\nIf you are new to Atomist, we recommend working through\nthe \nGetting Started\n instructions to get Atomist set\nup.  Once you are set up, you can get more information on using\nAtomist in the \nUser Guide\n.  If you are developing new\nAtomist functionality and need to answer a technical question,\nthe \nReference Documentation\n is probably the best place to\nlook.\n\n\nTo stay up to date with Atomist, get announcements on new features,\nand interact with the Atomist team, please\n\n\n\n\nJoin the \nAtomist Community Slack\n\n\nFollowing our blog, \nThe Composition\n\n\nFollow \n@atomist\n on Twitter\n\n\n\n\nWe sincerely hope you enjoy using Atomist!",
            "title": "Introduction"
        },
        {
            "location": "/#atomist-overview",
            "text": "Atomist enables you to ship software in less time and respond to\noperational events more quickly.  By automating tasks, integrating\ntools, and providing timely, correlated, and actionable information,\nAtomist makes software delivery faster, more standardized, and more\nfun.  Timely, correlated, and actionable information results from capturing\nyour processes and operations in code.  Atomist knows the platforms\nand tools you already use: GitHub, Slack, Travis CI.  Atomist\nunderstands your code: Java, C#, JavaScript, Scala, Python, Clojure,\neven Dockerfiles and Maven POMs.  Most importantly, Atomist\nunderstands the relationship between your code, your tools, your\nenvironments, and your running services and brings this information to\nwhere you live: chat.  If you spend time upgrading dependencies across multiple repositories,\nintegrating code repositories and CI, configuring and managing\ndeployment platforms, figuring out who to ask about an error in a log,\nor switching from IDE to chat to web browser ad infinitum, let Atomist\nremove the drudgery and reduce the context switching so your team can\nfocus on what matters: shipping great software.",
            "title": "Atomist Overview"
        },
        {
            "location": "/#atomist-is-saas",
            "text": "The Atomist service consumes events from your systems: source code\nrepositories, continuous integration servers, deployment platforms,\nand chat.  The information from these systems is correlated together:\npushes with builds, artifacts with deployments, stack traces with\ncommits.  The correlation of these events is then used to\nautomatically respond: retry a build, start an integration test,\nmessage a committer.  The Atomist service provides:   the SaaS platform to ingest and correlate events  a core set of integrations and event responses  the ability for teams to customize the events, correlation, and\n    actions for their existing processes",
            "title": "Atomist is SaaS"
        },
        {
            "location": "/#atomist-is-events",
            "text": "Within Atomist, all events are captured and actionable.  As events are\nconsumed from your systems, event handlers are triggered.  These\nhandlers respond to events, by taking action themselves and/or\ncreating new events, which can in turn trigger other handlers.  Event\nhandlers can do anything from trigger a deployment of a new version of\nyour service to page the developer whose commit led to a runtime error\nin production to modify code directly to fix errors.  Atomist events enable you to:   codify your workflow  capture best practices in code  reduce incident time-to-resolution",
            "title": "Atomist is events"
        },
        {
            "location": "/#atomist-is-code",
            "text": "We\u2019ve all heard that  software is eating the world .  Atomist\neats software.  Atomist consumes your code, understanding your files,\nclasses, variables, exceptions and more.  This understanding is used\nto modify code directly and to connect code changes to runtime\nchanges.  Atomist is code that:   understands  your  code  understands your processes  understands your operations  can  modify  your code",
            "title": "Atomist is code"
        },
        {
            "location": "/#atomist-ties-everything-together",
            "text": "Atomist is the next phase in the evolution of software.\nInfrastructure-as-code captures infrastructure architecture and\nconfiguration in software.  DevOps automates IT operations with\nsoftware.  Atomist goes further, capturing how we develop and operate\nsoftware  in software .  Atomist lets you say goodbye to the boring,\nrepetitive tasks surrounding software development by giving you the\ntools to automate them away, once and for all.   In a world where everything is code, Atomist  ties everything together.  By bringing software\ndevelopment processes, IT operations, and infrastructure-as-code\ntogether with a deep understanding of the code itself,  Atomist \nis able to surface the right information to the right person at\nthe right time in the right place to speed software delivery and\nstabilize IT operations.   To help you learn more about Atomist, this documentation contains   Getting Started  instructions  The Atomist  User Guide  explaining each part of\n    Atomist and how it is used  Detailed  Reference Documentation   If you are new to Atomist, we recommend working through\nthe  Getting Started  instructions to get Atomist set\nup.  Once you are set up, you can get more information on using\nAtomist in the  User Guide .  If you are developing new\nAtomist functionality and need to answer a technical question,\nthe  Reference Documentation  is probably the best place to\nlook.  To stay up to date with Atomist, get announcements on new features,\nand interact with the Atomist team, please   Join the  Atomist Community Slack  Following our blog,  The Composition  Follow  @atomist  on Twitter   We sincerely hope you enjoy using Atomist!",
            "title": "Atomist ties everything together"
        },
        {
            "location": "/concepts/",
            "text": "Atomist is a new approach to software development that pushes the\nlimits of automation and blurs the boundaries between projects, code,\ntooling, and operations.  It extends some well-known concepts and\nintroduces some new ideas.  In this section, we present overarching\nconcepts integral to Atomist and how it helps you ship better software\nfaster.\n\n\n\n\n\n\n\nAt its core, Atomist is a partner that improves your development process\nthrough automation.  The automation we are talking about goes well\nbeyond what traditionally comes to mind when talking about IT\nautomation.  Atomist is not a configuration management system.\nAtomist is not a templating system.  Atomist is not\ninfrastructure-as-code.  Atomist is not a DevOps platform.  Atomist is\nnot a ChatOps platform.  Atomist brings all of those things\ntogether\u2026 and more.  Bringing the events and information from\nthe systems and tools you already use together in one place, providing\ninsight into what is happening in your day-to-day development flow, is\njust the beginning.  Once the information is collected, it can be\ncorrelated and contextualized, providing a coherent view of your\ndevelopment landscape.  Even more importantly, Atomist provides the\nability to take action on information and events, both automatically\nand by prompting the appropriate users.  In short, Atomist provides\nyou with the information, context, and tooling to help you make better\ndecision more quickly.\n\n\nSoftware as a Service\n\u00b6\n\n\nAtomist is offered as a service, ingesting events from various sources\nand correlating them for our users.  Atomist manages infrastructure to\nsupport the ingestion and storage of events from external sources.\nAtomist provides and runs the software to process these events,\nperform the appropriate operations, and respond, e.g., via the Atomist\nBot.\n\n\nEvents\n\u00b6\n\n\nAtomist takes \nevent-driven programming\n and applies it to\nprogramming itself.  Everything from commits to pushes to CI builds to\ndeployments to stack traces in production logs\u2014these are\ncaptured as events.  Atomist responds to events in two ways: it learns\nabout relationships and takes automated action.  For instance, a\ncommit event \nteaches\n Atomist who changed code on a branch; a failed\nbuild event for that branch results in the \naction\n of messaging that\ncommitter.  Recognizing each crucial event lets Atomist\n\n\n\n\nOrchestrate a delivery flow across multiple projects and systems\n\n\nImplement workflow that CI can\u2019t model\n\n\nReplace manual pieces of your development process\n\n\nSend in-context, actionable notifications to the right people\n\n\n\n\n\n\n\n\n\n\nMore than just ingesting and understanding events, Atomist remembers\nkey contextual information about the events it sees, and bases future\nresponses on it.  Atomist understands the relationships between\nevents: how a user changes a line of code, that is part of a commit,\nthat is part of a push, that triggers a CI build, that creates a\nDocker image, that gets deployed to a staging environment, that\ncreates a Kubernetes pod, that generates a error-level log message.\nThis allows you to create event responses that, for example, message\nthe author of the code change that led to an error in your staging\nenvironment but only if that commit was made within the last 24 hours\nand it is normal working hours for the author.\n\n\nRug\n\u00b6\n\n\n\n\n\nRug is a programming model and runtime.\n\n\nThe Rug programming model defines the interface, which is \u201cWhat events\ndoes this program respond to?\u201d and \u201cHow does it respond?\u201d  Programs\nthat implement this model are called Rugs, and they execute inside a\nRug runtime.\n\n\nRugs can automate and codify all manner of steps in a development or\noperations workflow.  For example, Rugs can\n\n\n\n\nAlert the author whose change caused an error at runtime\n\n\nAutomate deployment by linking your CI system, your integration\n    tests, and your runtime platform\n\n\nIdentify a commit leading to a regression in production, revert\n    the commit, and release the \u201cnew\u201d version!\n\n\n\n\nThese are just a few ways Rugs are able to tie all the events of a\nteam together into a coherent model.\n\n\nAtomist ships with a core set of Rugs.  Anyone using Atomist can\nimplement additional Rugs for their team.  These custom Rugs are\ndynamically discovered by Atomist and used when processing all\nsubsequent events.\n\n\nIntegrations\n\u00b6\n\n\nAtomist integrates with chat, with version control, with CI systems,\nand more.  Atomist integrations with a system can receive events from\nand perform operations on that system.\n\n\nAtomist uses the native integration technology for each platform or\ntool.  For example, to integrate with GitHub.com and Travis CI we use\nwebhooks; to integrate with Slack we use their native real-time\nmessaging (RTM) API.  For each platform we integrate with, we ask for\nthe minimal set of permissions required for the operations Atomist\nsupplies.\n\n\nDo you use a system or tool Atomist does not natively support?  We\nalso provide our users with the ability to implement their own\nintegrations, empowering them to unleash Atomist\u2019s integrative power\nacross all their systems and processes.  Users can use native\ncapabilities provided by Atomist to call a third-party service\u2019s REST\nAPI and have the response ingested as an event in Atomist.\n\n\nInterfaces\n\u00b6\n\n\nAtomist interfaces with people.  It brings information to you, and\nreceives orders from you, where you are.\n\n\nBot\n - Atomist strongly believes in the power of ChatOps.\nSpecifically, we believe chat \ncan\n be a driving force for shipping\nbetter software faster.  For ChatOps to achieve these goals, it must\nbe backed by an intelligent system that integrates all relevant\ninformation and delivers it to the appropriate users in actionable\nways.  The Atomist Bot provides this exact interface for everyone\nworking in and around software development and delivery.\n\n\nCLI\n - Many developers prefer working on the command line,\nprototyping and hacking together clever solutions to vexing problems.\nAtomist provides a powerful Rug CLI that not only supports running\nRugs, but also a provides immediate feedback when developing and\ntesting Rugs.\n\n\nNone\n - The real power of Atomist is achieved when no interface is\nnecessary.  Put another way, Atomist is about driving to \ncomplete\n\nautomation.  When every aspect of your workflow has been fully\nautomated, both its \u201chappy path\u201d and remediations for\nerror modes, you can focus on what matters: writing great code.",
            "title": "Concepts"
        },
        {
            "location": "/concepts/#software-as-a-service",
            "text": "Atomist is offered as a service, ingesting events from various sources\nand correlating them for our users.  Atomist manages infrastructure to\nsupport the ingestion and storage of events from external sources.\nAtomist provides and runs the software to process these events,\nperform the appropriate operations, and respond, e.g., via the Atomist\nBot.",
            "title": "Software as a Service"
        },
        {
            "location": "/concepts/#events",
            "text": "Atomist takes  event-driven programming  and applies it to\nprogramming itself.  Everything from commits to pushes to CI builds to\ndeployments to stack traces in production logs\u2014these are\ncaptured as events.  Atomist responds to events in two ways: it learns\nabout relationships and takes automated action.  For instance, a\ncommit event  teaches  Atomist who changed code on a branch; a failed\nbuild event for that branch results in the  action  of messaging that\ncommitter.  Recognizing each crucial event lets Atomist   Orchestrate a delivery flow across multiple projects and systems  Implement workflow that CI can\u2019t model  Replace manual pieces of your development process  Send in-context, actionable notifications to the right people     More than just ingesting and understanding events, Atomist remembers\nkey contextual information about the events it sees, and bases future\nresponses on it.  Atomist understands the relationships between\nevents: how a user changes a line of code, that is part of a commit,\nthat is part of a push, that triggers a CI build, that creates a\nDocker image, that gets deployed to a staging environment, that\ncreates a Kubernetes pod, that generates a error-level log message.\nThis allows you to create event responses that, for example, message\nthe author of the code change that led to an error in your staging\nenvironment but only if that commit was made within the last 24 hours\nand it is normal working hours for the author.",
            "title": "Events"
        },
        {
            "location": "/concepts/#rug",
            "text": "Rug is a programming model and runtime.  The Rug programming model defines the interface, which is \u201cWhat events\ndoes this program respond to?\u201d and \u201cHow does it respond?\u201d  Programs\nthat implement this model are called Rugs, and they execute inside a\nRug runtime.  Rugs can automate and codify all manner of steps in a development or\noperations workflow.  For example, Rugs can   Alert the author whose change caused an error at runtime  Automate deployment by linking your CI system, your integration\n    tests, and your runtime platform  Identify a commit leading to a regression in production, revert\n    the commit, and release the \u201cnew\u201d version!   These are just a few ways Rugs are able to tie all the events of a\nteam together into a coherent model.  Atomist ships with a core set of Rugs.  Anyone using Atomist can\nimplement additional Rugs for their team.  These custom Rugs are\ndynamically discovered by Atomist and used when processing all\nsubsequent events.",
            "title": "Rug"
        },
        {
            "location": "/concepts/#integrations",
            "text": "Atomist integrates with chat, with version control, with CI systems,\nand more.  Atomist integrations with a system can receive events from\nand perform operations on that system.  Atomist uses the native integration technology for each platform or\ntool.  For example, to integrate with GitHub.com and Travis CI we use\nwebhooks; to integrate with Slack we use their native real-time\nmessaging (RTM) API.  For each platform we integrate with, we ask for\nthe minimal set of permissions required for the operations Atomist\nsupplies.  Do you use a system or tool Atomist does not natively support?  We\nalso provide our users with the ability to implement their own\nintegrations, empowering them to unleash Atomist\u2019s integrative power\nacross all their systems and processes.  Users can use native\ncapabilities provided by Atomist to call a third-party service\u2019s REST\nAPI and have the response ingested as an event in Atomist.",
            "title": "Integrations"
        },
        {
            "location": "/concepts/#interfaces",
            "text": "Atomist interfaces with people.  It brings information to you, and\nreceives orders from you, where you are.  Bot  - Atomist strongly believes in the power of ChatOps.\nSpecifically, we believe chat  can  be a driving force for shipping\nbetter software faster.  For ChatOps to achieve these goals, it must\nbe backed by an intelligent system that integrates all relevant\ninformation and delivers it to the appropriate users in actionable\nways.  The Atomist Bot provides this exact interface for everyone\nworking in and around software development and delivery.  CLI  - Many developers prefer working on the command line,\nprototyping and hacking together clever solutions to vexing problems.\nAtomist provides a powerful Rug CLI that not only supports running\nRugs, but also a provides immediate feedback when developing and\ntesting Rugs.  None  - The real power of Atomist is achieved when no interface is\nnecessary.  Put another way, Atomist is about driving to  complete \nautomation.  When every aspect of your workflow has been fully\nautomated, both its \u201chappy path\u201d and remediations for\nerror modes, you can focus on what matters: writing great code.",
            "title": "Interfaces"
        },
        {
            "location": "/capabilities/",
            "text": "Atomist is all about helping you ship high-quality software in less\ntime.  Whether you are working with large legacy codebases, your own\n\u201cmajestic monoliths\u201d, or aiming for \u201czero-overhead microservices\u201d,\nAtomist provides you with the tools to speed development, smooth\noperations, and close the code/runtime feedback loop.\n\n\nBringing everything together\n\u00b6\n\n\nAtomist consumes events from the platforms and tools you use every day.\nBy linking related events from source code repositories, continuous\nintegration, testing, and runtime environments, Atomist can present\nthem in a unified manner to appropriate team members via direct or\ngroup messages.  The result is massive reductions in context-switching\ncosts and and shorter incident time-to-resolution.\n\n\n\n\n\n\n\nRug ties everything together\n\n\n\n\nRug is the programming model and runtime that ties everything\ntogether.  Rug not only understands individual events, but can learn\nrelationships between events and respond to events with appropriate,\nautomated actions.\n\n\nDevelopment lifecycle automation\n\u00b6\n\n\nAtomist helps you develop better software more quickly by greatly\nenhancing your ability to automate your software development\nlifecycle.  By intelligently linking your source code repository, your\nCI system, your deployment platform, your logs, and your alerting\nsystem, Atomist connects code changes to runtime changes and provides\nthat information back, with its full context, back to the appropriate\nteam member.  It can can even automate remediation, obviating the need\nto alert anyone.\n\n\nThe Rug programming model was created to help you streamline and\nbetter manage your software delivery lifecycle.  By writing Rugs,\ni.e., programs that implement the Rug programming model, you are able\nto automate code modifications and API calls up through complex\nworkflows and decision points.  There are several different types of\nRugs, each providing a different way to help you improve your\ndevelopment and operations lifecycle.\n\n\n\n\nEvent-driven actions: \nHandlers\n\n\nRug \nhandlers\n respond to events.\nHandlers can use the information on an event and its related\nevents to message the right team members, take direct action,\nand/or create new events, which can trigger other handlers.  Need\nto notify someone when their commit causes a stack trace in\nproduction?  Automate that with a handler.\n\n\nChatDev and ChatOps: \nCommands\n\n\nRug \ncommands\n are tasks you can\nexecute within chat, automating common tasks in software\ndevelopment and operation.  Want to release a new version of your\nservice to production?  Do it right in chat with a command.\n\n\nProject updates: \nEditors\n\n\nRug \neditors\n modify code directly and\nconsistently.  They can modify any code, in any project,\nregardless of whether the project was created by Atomist or not.\nNeed to add or update a dependency and add some boilerplate code\nfor it?  Codify it in an editor.\n\n\nProject creation: \nGenerators\n\n\nRug \ngenerators\n create new projects\nfrom a model project.  More powerful than templating approaches,\ngenerators are real projects operating under native tooling.  Need\nto stamp out a bunch of new microservice projects?  Stop the\ncopy/pasting and use a generator.\n\n\nProject compliance: \nReviewers\n\n\nRug \nreviewers\n ensure a project\nconforms with your standards.  Because Rug understands your code,\nreviewers can check for conformance to coding standards,\ndocumentation, testing, etc.  Think of a reviewer as an editor,\nwithout the editing.  Want to check if every Java try/catch block\nfalls through to a \ncatch\n \nThrowable\n?  Write a reviewer for\nthat.\n\n\n\n\nIndividual Rugs can be composed.  For example, editors can be used by\nRug handlers, commands, and generators to modify code in a consistent\nmanner across many repositories.  Handlers can execute commands.\nEvents can fire reviewers, e.g., every PR can trigger a reviewer that\nensures it complies with your coding and submission standards.\n\n\nEvents and code selection\n\u00b6\n\n\nHow does a handler know what event it should act on?  How does an\neditor know what part of what file to edit?  Atomist provides a\npowerful mechanism for pinpoint selection of events and\ncode: \npath expressions\n.  Inspired by \nXPath\n, path\nexpressions provide a concise abstraction for navigating the various\nelements in your code and development environment.  Path expressions\nselect related events satisfying specific criteria, e.g., a Slack user\nwhose GitHub user authored a commit that was in a push that triggered\na CI build that failed, and specific blocks of code in specific files,\ne.g., all Scala methods that return \nBoolean\n.\n\n\nDeveloping Rugs\n\u00b6\n\n\nAtomist is extensible.  Atomist ships with many useful capabilities,\nbut the ways in which Atomist can improve your development and\noperations do not stop there.  The primary supported development\nlanguage for writing Rugs is \nTypeScript\n, although any language\nthat compiles to JavaScript can be used.  You can modify existing Rugs\nor create your own Rugs to match your processes and workflows.\n\n\nAtomist meets you where you are.  It doesn\u2019t make you change how your\nteam develops and ships code.  It improves your code and speeds the\nshipping of great software.",
            "title": "Capabilities"
        },
        {
            "location": "/capabilities/#bringing-everything-together",
            "text": "Atomist consumes events from the platforms and tools you use every day.\nBy linking related events from source code repositories, continuous\nintegration, testing, and runtime environments, Atomist can present\nthem in a unified manner to appropriate team members via direct or\ngroup messages.  The result is massive reductions in context-switching\ncosts and and shorter incident time-to-resolution.    Rug ties everything together   Rug is the programming model and runtime that ties everything\ntogether.  Rug not only understands individual events, but can learn\nrelationships between events and respond to events with appropriate,\nautomated actions.",
            "title": "Bringing everything together"
        },
        {
            "location": "/capabilities/#development-lifecycle-automation",
            "text": "Atomist helps you develop better software more quickly by greatly\nenhancing your ability to automate your software development\nlifecycle.  By intelligently linking your source code repository, your\nCI system, your deployment platform, your logs, and your alerting\nsystem, Atomist connects code changes to runtime changes and provides\nthat information back, with its full context, back to the appropriate\nteam member.  It can can even automate remediation, obviating the need\nto alert anyone.  The Rug programming model was created to help you streamline and\nbetter manage your software delivery lifecycle.  By writing Rugs,\ni.e., programs that implement the Rug programming model, you are able\nto automate code modifications and API calls up through complex\nworkflows and decision points.  There are several different types of\nRugs, each providing a different way to help you improve your\ndevelopment and operations lifecycle.   Event-driven actions:  Handlers  Rug  handlers  respond to events.\nHandlers can use the information on an event and its related\nevents to message the right team members, take direct action,\nand/or create new events, which can trigger other handlers.  Need\nto notify someone when their commit causes a stack trace in\nproduction?  Automate that with a handler.  ChatDev and ChatOps:  Commands  Rug  commands  are tasks you can\nexecute within chat, automating common tasks in software\ndevelopment and operation.  Want to release a new version of your\nservice to production?  Do it right in chat with a command.  Project updates:  Editors  Rug  editors  modify code directly and\nconsistently.  They can modify any code, in any project,\nregardless of whether the project was created by Atomist or not.\nNeed to add or update a dependency and add some boilerplate code\nfor it?  Codify it in an editor.  Project creation:  Generators  Rug  generators  create new projects\nfrom a model project.  More powerful than templating approaches,\ngenerators are real projects operating under native tooling.  Need\nto stamp out a bunch of new microservice projects?  Stop the\ncopy/pasting and use a generator.  Project compliance:  Reviewers  Rug  reviewers  ensure a project\nconforms with your standards.  Because Rug understands your code,\nreviewers can check for conformance to coding standards,\ndocumentation, testing, etc.  Think of a reviewer as an editor,\nwithout the editing.  Want to check if every Java try/catch block\nfalls through to a  catch   Throwable ?  Write a reviewer for\nthat.   Individual Rugs can be composed.  For example, editors can be used by\nRug handlers, commands, and generators to modify code in a consistent\nmanner across many repositories.  Handlers can execute commands.\nEvents can fire reviewers, e.g., every PR can trigger a reviewer that\nensures it complies with your coding and submission standards.",
            "title": "Development lifecycle automation"
        },
        {
            "location": "/capabilities/#events-and-code-selection",
            "text": "How does a handler know what event it should act on?  How does an\neditor know what part of what file to edit?  Atomist provides a\npowerful mechanism for pinpoint selection of events and\ncode:  path expressions .  Inspired by  XPath , path\nexpressions provide a concise abstraction for navigating the various\nelements in your code and development environment.  Path expressions\nselect related events satisfying specific criteria, e.g., a Slack user\nwhose GitHub user authored a commit that was in a push that triggered\na CI build that failed, and specific blocks of code in specific files,\ne.g., all Scala methods that return  Boolean .",
            "title": "Events and code selection"
        },
        {
            "location": "/capabilities/#developing-rugs",
            "text": "Atomist is extensible.  Atomist ships with many useful capabilities,\nbut the ways in which Atomist can improve your development and\noperations do not stop there.  The primary supported development\nlanguage for writing Rugs is  TypeScript , although any language\nthat compiles to JavaScript can be used.  You can modify existing Rugs\nor create your own Rugs to match your processes and workflows.  Atomist meets you where you are.  It doesn\u2019t make you change how your\nteam develops and ships code.  It improves your code and speeds the\nshipping of great software.",
            "title": "Developing Rugs"
        },
        {
            "location": "/getting-started/",
            "text": "Welcome!  If you want to get started with Atomist you\u2019re in the right\nplace.  This guide will walk you through setup and getting started.\n\n\nWhat this guide covers\n\n\n\n\nPrerequisites\n\n\nSet up the Atomist Slack bot\n\n\nConnect Atomist to GitHub\n\n\nPutting Atomist to work on your projects\n\n\nConnect Atomist to continuous integration\n\n\nBuilding and deploying your first development automation\n\n\n\n\nClick on any of the steps above to go directly to that step, or click\nNext at the bottom right of this page to continue this guide.",
            "title": "Overview"
        },
        {
            "location": "/getting-started/prerequisites/",
            "text": "To use Atomist, you\u2019ll need three things:\n\n\n\n\nAn invitation to the \nAtomist Alpha\n\n\nA \nSlack\n team\n\n\nA \nGitHub.com\n user\n\n\n\n\n\n\nIf you already have an Atomist Alpha invitation, Slack team,\nand GitHub.com account, you can proceed to the next step by clicking\nNext at the bottom-right of this page.\n\n\n\n\nAtomist Alpha\n\u00b6\n\n\nIf you have not yet requested access to the Atomist Alpha,\nplease fill out the \nrequest form\n.  Using the information\nprovided in the form, we will reach out to you with further\ninstructions for completing your enrollment.  If you have filled out\nthe form and have yet to receive the email with further instructions,\nplease reach out to us in the \nAtomist Community Slack\n\n\n#support\n channel.\n\n\nSlack\n\u00b6\n\n\nChat is one of the main interfaces for Atomist.  Currently we support\nthe \nSlack\n chat platform.  You can use any Slack team you are\ncurrently a member of with Atomist.  If you do not currently use Slack\nor prefer to use a new Slack team with Atomist, you\ncan \ncreate a new Slack team\n for free.\n\n\nGitHub\n\u00b6\n\n\nAtomist wants to get to know your code.  Currently Atomist integrates\nwith \nGithub.com\n.  If you already have a GitHub.com account,\nyou can use Atomist with that.  If you do not have a GitHub.com\naccount, you can \ncreate an account\n for free.",
            "title": "Prerequisites"
        },
        {
            "location": "/getting-started/prerequisites/#atomist-alpha",
            "text": "If you have not yet requested access to the Atomist Alpha,\nplease fill out the  request form .  Using the information\nprovided in the form, we will reach out to you with further\ninstructions for completing your enrollment.  If you have filled out\nthe form and have yet to receive the email with further instructions,\nplease reach out to us in the  Atomist Community Slack  #support  channel.",
            "title": "Atomist Alpha"
        },
        {
            "location": "/getting-started/prerequisites/#slack",
            "text": "Chat is one of the main interfaces for Atomist.  Currently we support\nthe  Slack  chat platform.  You can use any Slack team you are\ncurrently a member of with Atomist.  If you do not currently use Slack\nor prefer to use a new Slack team with Atomist, you\ncan  create a new Slack team  for free.",
            "title": "Slack"
        },
        {
            "location": "/getting-started/prerequisites/#github",
            "text": "Atomist wants to get to know your code.  Currently Atomist integrates\nwith  Github.com .  If you already have a GitHub.com account,\nyou can use Atomist with that.  If you do not have a GitHub.com\naccount, you can  create an account  for free.",
            "title": "GitHub"
        },
        {
            "location": "/getting-started/invite-atomist-to-slack/",
            "text": "With everything in place to get started with Atomist, you can now\ninvite the Atomist Bot to your Slack team.  The Atomist Bot provides a\nchat-based interface to Atomist\u2019s capabilities.\n\n\nAfter you filled out the \nAtomist Alpha\n form, you should have\nreceived an email invitation that looks something like the following:\n\n\n\n  \n\n\n\n\n\nTo invite the Atomist Bot into your Slack team, simply click the\n\u201cInstall Atomist Bot in Slack\u201d button in the Atomist Alpha\ninvitation email.\n\n\nClicking the button will send you to a web page where you will be\nasked to sign into your Slack team if you are not already signed in.\nProvide your Slack team domain and click Continue.\n\n\n\n  \n\n\n\n\n\nOn the next page, provide your email address and password to complete\nthe Slack sign-in.  If you have trouble signing in, check\nout \nSlack help\n.\n\n\n\n  \n\n\n\n\n\nAfter successfully signing in, you will see the authorization page for\nthe Atomist app, including the Slack permissions requested.  Confirm\nthat the correct Slack team is selected and click \u201cAuthorize\u201d.\n\n\n\n  \n\n\n\n\n\nOnce you have successfully authorized the Atomist Bot in your Slack\nteam, you will be redirected to a confirmation page.  You can close\nthis page and go back to Slack to continue this guide.\n\n\n\n  \n\n\n\n\n\nBy default, the Atomist Bot will be named \n@atomist\n and will join the\n\n#general\n channel in your Slack team.  You can invite the Atomist Bot\ninto any other channel in the same way you would invite any other\nuser: an \n@\n mention and invite, the \n/invite @atomist\n command, or\nvia the channel settings > \u201cInvite team members to join \u2026\u201d.\n\n\n\n  \n\n\n\n\n\nThis video provides a brief introduction to the Atomist Bot\u2019s\ncapabilities and how to interact with it.\n\n\n\n  \n\n\n\n\n\nClick Next in the bottom-right of this page to continue the Getting\nStarted guide.",
            "title": "Invite Atomist to Slack"
        },
        {
            "location": "/getting-started/connect-atomist-to-github/",
            "text": "To help streamline your development flow, Atomist needs access to your\nsource code. Currently Atomist supports integrating\nwith \nGitHub.com\n.\n\n\n\n\nAtomist works with GitHub.com. GitHub Enterprise is not currently supported.\n\n\n\n\nThere are two kinds of authorization Atomist asks for to work with\nGitHub:\n\n\n\n\n\n\nGitHub Account Authorization:\n this authorization determines\n    the GitHub individual account or GitHub organization that Atomist\n    will connect to your Slack team.  For example, if you want to\n    receive notifications and take actions in your team\u2019s primary\n    GitHub organization, you should select that organization when\n    authorizing Atomist to GitHub.  If you want to use Atomist with\n    your individual account, then you should select your user when\n    authorizing Atomist to GitHub.\n\n\n\n\nDepending on the third-party application access policy in a GitHub organization, you may need to be an Owner of the organization or have to request access to authorize Atomist.\n\n\n\n\n\n\n\n\nGitHub User Authorization:\n this authorization is done so that\n    commands and actions you ask the Atomist Bot to perform on your\n    behalf are carried out as your GitHub user.  For example, if you\n    ask the Atomist Bot to create a GitHub issue, it needs to be\n    authorized to create the issue as you.  Every person in your Slack\n    team who wants to ask the Atomist Bot to perform actions against\n    GitHub will need to authorize their GitHub user in this way.\n\n\n\n\n\n\nGitHub Account Authorization\n\u00b6\n\n\nThis section will walk you through the GitHub account authorization\nprocess.  You can perform these steps in any Slack channel that the\nAtomist Bot has been invited to, or you can directly message the\nAtomist Bot.  By default the Atomist Bot is named \n@atomist\n and these\ninstructions assume that is its name in your Slack team.  If the\nAtomist Bot has a different user name in your Slack team, address\nmessages to that user.\n\n\nFirst, ask the Atomist Bot about your GitHub authorizations.\n\n\n@atomist github\n\n\n\n\n\nIf this Slack team does not have a GitHub Account authorized, the\nAtomist Bot will show a message requesting you to authorize.\n\n\n\n  \n\n\n\n\n\nYou will see messages for both GitHub account authorization (the first\nmessage) and GitHub user authorization (the second message). First,\nlet\u2019s do the account authorization. Click on the \u201cAuthorize GitHub\nAccount\u201d link in the message. You will be redirected to the GitHub\nauthorization page in your browser.\n\n\n\n  \n\n\n\n\n\nClick the \u201cAuthorize application\u201d button to authorize Atomist and you\nwill then be redirected back to your Slack team in the browser.\n\n\nIf you are not a member of any GitHub organizations, your individual\nGitHub account will be automatically selected, and you will not see\nany organizations listed.  If you are a member of one or more GitHub\norganizations, after authorizing Atomist, you will receive a direct\nmessage in Slack from the Atomist Bot asking whether to use your\nindividual GitHub account or one of your organizations as the GitHub\naccount to associate with Atomist.\n\n\n\n  \n\n\n\n\n\nSelect the GitHub account (your individual account or an organization)\nto associate with Atomist by clicking its button.  Once selected, the\nAtomist Bot will show a confirmation message in Slack.\n\n\n\n  \n\n\n\n\n\nCongratulations, your GitHub account is now authorized.\n\n\nGitHub User Authorization\n\u00b6\n\n\nNow, let\u2019s associate your GitHub user with your Slack user.  To do\nthis, scroll back in the history or enter \n@atomist github\n to show\nthe GitHub authorization message again.\n\n\n\n  \n\n\n\n\n\nClick on the \u201cAuthorize GitHub User\u201d link in the message.  You will be\nredirected to the GitHub authorization page in your browser.\n\n\n\n  \n\n\n\n\n\nClick the \u201cAuthorize application\u201d button to authorize Atomist and you\nwill then be redirected back to your Slack team in the browser, where\nyou will see a confirmation message.\n\n\n\n  \n\n\n\n\n\nIf you use a native client for Slack, you can close the Slack browser\nwindow and go back to your preferred Slack client.  If you use your\nweb browser to access Slack, you will likely have several Slack tabs\nor windows open at this point.  Feel free to close all but one.\n\n\nClick Next in the lower-right corner of this page to continue the\nGetting Started guide.",
            "title": "Connect Atomist to GitHub"
        },
        {
            "location": "/getting-started/connect-atomist-to-github/#github-account-authorization",
            "text": "This section will walk you through the GitHub account authorization\nprocess.  You can perform these steps in any Slack channel that the\nAtomist Bot has been invited to, or you can directly message the\nAtomist Bot.  By default the Atomist Bot is named  @atomist  and these\ninstructions assume that is its name in your Slack team.  If the\nAtomist Bot has a different user name in your Slack team, address\nmessages to that user.  First, ask the Atomist Bot about your GitHub authorizations.  @atomist github  If this Slack team does not have a GitHub Account authorized, the\nAtomist Bot will show a message requesting you to authorize.  \n     You will see messages for both GitHub account authorization (the first\nmessage) and GitHub user authorization (the second message). First,\nlet\u2019s do the account authorization. Click on the \u201cAuthorize GitHub\nAccount\u201d link in the message. You will be redirected to the GitHub\nauthorization page in your browser.  \n     Click the \u201cAuthorize application\u201d button to authorize Atomist and you\nwill then be redirected back to your Slack team in the browser.  If you are not a member of any GitHub organizations, your individual\nGitHub account will be automatically selected, and you will not see\nany organizations listed.  If you are a member of one or more GitHub\norganizations, after authorizing Atomist, you will receive a direct\nmessage in Slack from the Atomist Bot asking whether to use your\nindividual GitHub account or one of your organizations as the GitHub\naccount to associate with Atomist.  \n     Select the GitHub account (your individual account or an organization)\nto associate with Atomist by clicking its button.  Once selected, the\nAtomist Bot will show a confirmation message in Slack.  \n     Congratulations, your GitHub account is now authorized.",
            "title": "GitHub Account Authorization"
        },
        {
            "location": "/getting-started/connect-atomist-to-github/#github-user-authorization",
            "text": "Now, let\u2019s associate your GitHub user with your Slack user.  To do\nthis, scroll back in the history or enter  @atomist github  to show\nthe GitHub authorization message again.  \n     Click on the \u201cAuthorize GitHub User\u201d link in the message.  You will be\nredirected to the GitHub authorization page in your browser.  \n     Click the \u201cAuthorize application\u201d button to authorize Atomist and you\nwill then be redirected back to your Slack team in the browser, where\nyou will see a confirmation message.  \n     If you use a native client for Slack, you can close the Slack browser\nwindow and go back to your preferred Slack client.  If you use your\nweb browser to access Slack, you will likely have several Slack tabs\nor windows open at this point.  Feel free to close all but one.  Click Next in the lower-right corner of this page to continue the\nGetting Started guide.",
            "title": "GitHub User Authorization"
        },
        {
            "location": "/getting-started/putting-atomist-to-work/",
            "text": "Atomist can now be put to work, creating projects, editing code,\nmanaging issues, and generally tying your whole development process\ntogether.  Let\u2019s kick things off by having the Atomist Bot create a\nnew project for us.\n\n\nUse Atomist to create a new project\n\u00b6\n\n\nYou can ask the Atomist Bot to create a new project for you either\nthrough a direct message or by addressing the Bot in a channel it has\nbeen invited to.  For our purposes, we will assume you are starting\nthe conversation in your Slack team\u2019s \n#general\n channel.  In the\n\n#general\n channel, type the following message.\n\n\n@atomist generators\n\n\n\n\n\nThe Atomist Bot will reply with a list of project generators that it\ncan use on your behalf to create a new project in GitHub.  The Atomist\nBot will respond with a list of project generators something like the\nfollowing.\n\n\n\n  \n\n\n\n\n\n\n\nYou can create your own generators.  Creating your own generators\nwill soon be added as a \nQuick Start\n.\n\n\n\n\nWhile the full list of project generators \ncan\n be useful if you are\njust browsing, we want to create a \nSpring Boot\n REST service, so we can\nnarrow down the list by providing a search term, \nspring\n in this\ncase.\n\n\n@atomist generators spring\n\n\n\n\n\nThis time the Atomist Bot should respond with a list of project\ngenerators that includes the \nNewSpringBootRestService\n generator.\n\n\n\n  \n\n\n\n\n\nClick on the \u201cGenerate project\u201d button to begin the process of\ncreating your new project.\n\n\n\n  \n\n\n\n\n\nThe Atomist Bot will respond with a message telling you what project\ngenerator you created and then create a \nthread\n off that message to\ngather the information it needs to create the project.  Click now on\nthe \u201c1 reply\u201d link below the message to open up the thread in Slack.\nYou will see that the Atomist Bot has asked you a question in the\nthread.\n\n\n\n  \n\n\n\n\n\nType in a name for your new project and press \n.  The project\nname must be a valid GitHub repository name, containing only letters,\nnumbers, dashes (\n-\n), and underscores (\n_\n).  Since the project name\nis the only required input parameter for the\n\nNewSpringBootRestService\n generator, the Atomist Bot will respond\nwith a message showing the project name you entered and the default\nvalues for all the other input parameters.\n\n\n\n  \n\n\n\n\n\nYou can change the value for any of the parameters by typing in \nset\n<parameter> <value>\n before you click on \nGenerate project\n.\n\n\nNow click on \nGenerate project\n and you\u2019ll see several things happen:\n\n\n\n\nIn the thread, the Atomist Bot will announce \u201cOne moment while I\n    run the generator.\u201d\n\n\nAtomist will go and create the repository for you in the GitHub\n    account you previously authorized.\n\n\nThe Atomist Bot will announce that it has \u201cSuccessfully generated\n    your project\u201d back in the main channel where the project creation\n    thread was started in, in our case that would be \n#general\n.  The\n    announcement will contain a link to the newly created project.\n\n\nAtomist will create a new channel in your Slack team for the new\n    project, that will also be associated with the project\u2019s\n    repository so when you want to work on that project, you do it in\n    that channel.\n\n\n\n\n\n  \n\n\n\n\n\nClick on the project link to see your project in GitHub.\n\n\n\n  \n\n\n\n\n\nClone your new repository from GitHub and you will have a new, working\nproject courtesy of Atomist.\n\n\nConnecting Atomist to GitHub\n\u00b6\n\n\nIn addition to creating and editing projects, Atomist can react to\nevents that occur on your repositories as well.  For example, Atomist\ncan send messages when \npull requests\n are created or assign\nsomeone to an \nissue\n.\n\n\nGitHub notifies external systems like Atomist about repository and\norganization events using \nwebhooks\n.  To enable GitHub events to\npromulgate into Atomist you need to add the Atomist webhook URL in the\nsettings of\nthe \nGitHub account you previously authorized\n.  The\nnext two sections provide instructions for each of the GitHub account\nauthorization options: organization and individual.  You should only\nwork through the instructions for the account authorization option\n\n\nAdd the Atomist webhook to your GitHub organization\n\u00b6\n\n\nIf you added Atomist to a GitHub organization when you performed the\naccount authorization, navigate to that GitHub organization\u2019s page,\nclick on \u201cSettings\u201d, and select \u201cWebhooks\u201d from the left menu.\n\n\n\n  \n\n\n\n\n\nClick the \u201cAdd webhook\u201d button and fill in the details as shown below.\n\n\n\n  \n\n\n\n\n\nWhen you have filled in the webhook form, click the \u201cAdd webhook\u201d\nbutton at the bottom of the form.  You should then see that the\nwebhook has been added to the list of webhooks for your organization.\n\n\n\n  \n\n\n\n\n\nAdd the Atomist webhook to your individual repositories\n\u00b6\n\n\nIf you added Atomist to an individual account when you performed the\naccount authorization, adding webhooks is not as convenient.  GitHub\ndoes not support webhooks on an individual account.  Therefore, you\nneed to add the Atomist webhook to every repository you want Atomist\nto receive events from.  Fortunately, the process of adding the\nwebhook is the same for each repository.  For each repository, go to\nthe repository\u2019s GitHub page, click on \u201cSettings\u201d, and select\n\u201cWebhooks\u201d from the left menu.\n\n\n\n  \n\n\n\n\n\nFrom here, the process for adding each repository webhook is identical\nto adding an organization webhook.  Fill out the webhook form just as\nwe showed above and click the \u201cAdd webhook\u201d button at the bottom of\nthe form.\n\n\n\n  \n\n\n\n\n\nSeeing GitHub events in Slack\n\u00b6\n\n\nNow that you have added the Atomist webhook to your GitHub\nconfiguration and events are flowing from GitHub into Atomist, these\nevents will begin to show up in Slack.  To see your new webhook in\naction, and how those events get interpreted in \n@atomist\n, make a\nsmall edit to one of the files in your repository (the \nREADME.md\n is\nusually a good candidate to make a small, inconseqential edit) either\nthrough the GitHub user interface or through a commit/push from a\nlocal edit.\n\n\nWhen you have done the commit/push to master you should see those\nevents happily appearing in your project\u2019s channel, \n#sprockets\n in\nour example here:\n\n\n\n  \n\n\n\n\n\nUsing GitHub in Slack\n\u00b6\n\n\nGetting well-formatted message in Slack about what is happening to\nyour project on GitHub is nice, but it only scratches the surface of\nwhat Atomist can do.  In addition to passively receiving and then\ndisplaying GitHub events, Atomist can create and modify code, issues,\nand PRs on GitHub, all without you ever having to leave Slack.  Let\u2019s\nuse the Atomist Bot to create a GitHub Issues for us.\n\n\nBefore we can create GitHub issues in Slack, we have to enable the\nfunctionality in the Atomist Bot.  We do this by registering the\nappropriate command, \nCreateIssue\n in this case, with the Atomist Bot\nin your Slack.  In other words, we are going to teach \nyour\n Atomist\nBot a new trick.  Send the following message to your Atomist Bot.\n\n\n@atomist register command\n\n\n\n\n\nYour Atomist Bot will respond by creating a thread and ask you some\nquestions about the command you want to register.\n\n\n\n  \n\n\n\n\n\nAfter you answer all the questions, you will see a summary of the\ncommand registration information.\n\n\n\n  \n\n\n\n\n\nClick the \u201cSubmit\u201d button and your Atomist Bot will respond back in\nthe original channel, saying it has successfully registered a new\ncommand.\n\n\n\n  \n\n\n\n\n\nYour Atomist Bot will now be able to create new issues for you in\nGitHub.  Let\u2019s try it out.  Send the following message in the\n\n#sprocket\n channel that\u2019s associated with the \nsprocket\n project on\nGitHub.\n\n\n@atomist create issue\n\n\n\n\n\nAs usual, your Atomist Bot will start a thread to collect all the\ninformation necessary it needs to complete the request, creating a new\nissue on the \nsprocket\n project.\n\n\n\n  \n\n\n\n\n\nOnce you have entered all the needed information, your Atomist Bot\nwill respond with a summary and the option to submit or cancel.\n\n\n\n  \n\n\n\n\n\nClick the \u201cSubmit\u201d button and Atomist will create the issue and then\nrespond back in the main \n#sprocket\n channel.\n\n\n\n  \n\n\n\n\n\nBut that\u2019s not where the interaction stops. You Atomist Bot will also\npost a message in the \n#sprocket\n channel containing a summary of the\nnewly created issue \nand\n some buttons for common actions taken on\nissues: assign it someone, add a label, add a comment, etc.\n\n\n\n  \n\n\n\n\n\nGo ahead and click on the link to see the issue on GitHub.\n\n\n\n  \n\n\n\n\n\nNow head back to the \n#sprocket\n channel in Slack and click on the\n\u201cBug\u201d button to add the \u201cbug\u201d label to the issue:\n\n\n\n  \n\n\n\n\n\nWe see the Atomist Bot responding that it has successfully edited the\nissue.  Let\u2019s make sure.  Click on the link to open up the issue in\nGitHub.\n\n\n\n  \n\n\n\n\n\nWe can see that Atomist, as us, has labeled the issue a bug, just as\nwe asked.\n\n\nNow imagine that you are another team member who has noticed this new\nissue and wants to add a comment from inside GitHub.  Using the GitHub\nweb interface, add a comment and click the \u201cComment\u201d button.\n\n\n\n  \n\n\n\n\n\nYou will see a new message in the \n#sprocket\n channel from your\nAtomist Bot notifying you that the issue has been updated.\n\n\n\n  \n\n\n\n\n\nThe circle is complete!  After connecting Atomist and GitHub, we can\nsee GitHub events in Slack, take action on them, and see the result in\nGitHub and Slack.\n\n\nUsing Atomist on an existing project\n\u00b6\n\n\nYou almost certainly have many existing projects that you would like\nAtomist\u2019s help keeping track of.  To get Atomist\u2019s help with existing\nGitHub repositories, simply invite the Atomist Bot to a channel with\nthe same name as the repository.  You can invite the Atomist Bot to a\nchannel just as you would invite any other user, e.g., by using the\n\n/invite @atomist\n command.  Once the Atomist Bot is in the channel,\nit will begin reporting on activity in the associated repository and\nyou can interact with the repository, creating and assigning issues,\netc., just as you do with channels the Atomist Bot creates when it\ncreates the repositories.\n\n\nIf you prefer not to have the channel and repository have the same\nname, you can tell the Atomist Bot what repository to associate with a\nchannel by sending the message \nrepo\n to the Atomist Bot in that\nchannel.\n\n\n@atomist repo REPOSITORY_NAME\n\n\n\n\n\nReplace \nREPOSITORY_NAME\n in the above command with the name of the\nrepository you want the Atomist Bot to associate with the current\nchannel.  At any time you can ask the Atomist Bot to tell you what\nrepository is associated with the current channel by sending it the\n\nrepo\n command without an argument.\n\n\n@atomist repo\n\n\n\n\n\nClick Next at the bottom-right of this page to continue.",
            "title": "Putting Atomist to Work"
        },
        {
            "location": "/getting-started/putting-atomist-to-work/#use-atomist-to-create-a-new-project",
            "text": "You can ask the Atomist Bot to create a new project for you either\nthrough a direct message or by addressing the Bot in a channel it has\nbeen invited to.  For our purposes, we will assume you are starting\nthe conversation in your Slack team\u2019s  #general  channel.  In the #general  channel, type the following message.  @atomist generators  The Atomist Bot will reply with a list of project generators that it\ncan use on your behalf to create a new project in GitHub.  The Atomist\nBot will respond with a list of project generators something like the\nfollowing.  \n      You can create your own generators.  Creating your own generators\nwill soon be added as a  Quick Start .   While the full list of project generators  can  be useful if you are\njust browsing, we want to create a  Spring Boot  REST service, so we can\nnarrow down the list by providing a search term,  spring  in this\ncase.  @atomist generators spring  This time the Atomist Bot should respond with a list of project\ngenerators that includes the  NewSpringBootRestService  generator.  \n     Click on the \u201cGenerate project\u201d button to begin the process of\ncreating your new project.  \n     The Atomist Bot will respond with a message telling you what project\ngenerator you created and then create a  thread  off that message to\ngather the information it needs to create the project.  Click now on\nthe \u201c1 reply\u201d link below the message to open up the thread in Slack.\nYou will see that the Atomist Bot has asked you a question in the\nthread.  \n     Type in a name for your new project and press  .  The project\nname must be a valid GitHub repository name, containing only letters,\nnumbers, dashes ( - ), and underscores ( _ ).  Since the project name\nis the only required input parameter for the NewSpringBootRestService  generator, the Atomist Bot will respond\nwith a message showing the project name you entered and the default\nvalues for all the other input parameters.  \n     You can change the value for any of the parameters by typing in  set\n<parameter> <value>  before you click on  Generate project .  Now click on  Generate project  and you\u2019ll see several things happen:   In the thread, the Atomist Bot will announce \u201cOne moment while I\n    run the generator.\u201d  Atomist will go and create the repository for you in the GitHub\n    account you previously authorized.  The Atomist Bot will announce that it has \u201cSuccessfully generated\n    your project\u201d back in the main channel where the project creation\n    thread was started in, in our case that would be  #general .  The\n    announcement will contain a link to the newly created project.  Atomist will create a new channel in your Slack team for the new\n    project, that will also be associated with the project\u2019s\n    repository so when you want to work on that project, you do it in\n    that channel.   \n     Click on the project link to see your project in GitHub.  \n     Clone your new repository from GitHub and you will have a new, working\nproject courtesy of Atomist.",
            "title": "Use Atomist to create a new project"
        },
        {
            "location": "/getting-started/putting-atomist-to-work/#connecting-atomist-to-github",
            "text": "In addition to creating and editing projects, Atomist can react to\nevents that occur on your repositories as well.  For example, Atomist\ncan send messages when  pull requests  are created or assign\nsomeone to an  issue .  GitHub notifies external systems like Atomist about repository and\norganization events using  webhooks .  To enable GitHub events to\npromulgate into Atomist you need to add the Atomist webhook URL in the\nsettings of\nthe  GitHub account you previously authorized .  The\nnext two sections provide instructions for each of the GitHub account\nauthorization options: organization and individual.  You should only\nwork through the instructions for the account authorization option",
            "title": "Connecting Atomist to GitHub"
        },
        {
            "location": "/getting-started/putting-atomist-to-work/#add-the-atomist-webhook-to-your-github-organization",
            "text": "If you added Atomist to a GitHub organization when you performed the\naccount authorization, navigate to that GitHub organization\u2019s page,\nclick on \u201cSettings\u201d, and select \u201cWebhooks\u201d from the left menu.  \n     Click the \u201cAdd webhook\u201d button and fill in the details as shown below.  \n     When you have filled in the webhook form, click the \u201cAdd webhook\u201d\nbutton at the bottom of the form.  You should then see that the\nwebhook has been added to the list of webhooks for your organization.",
            "title": "Add the Atomist webhook to your GitHub organization"
        },
        {
            "location": "/getting-started/putting-atomist-to-work/#add-the-atomist-webhook-to-your-individual-repositories",
            "text": "If you added Atomist to an individual account when you performed the\naccount authorization, adding webhooks is not as convenient.  GitHub\ndoes not support webhooks on an individual account.  Therefore, you\nneed to add the Atomist webhook to every repository you want Atomist\nto receive events from.  Fortunately, the process of adding the\nwebhook is the same for each repository.  For each repository, go to\nthe repository\u2019s GitHub page, click on \u201cSettings\u201d, and select\n\u201cWebhooks\u201d from the left menu.  \n     From here, the process for adding each repository webhook is identical\nto adding an organization webhook.  Fill out the webhook form just as\nwe showed above and click the \u201cAdd webhook\u201d button at the bottom of\nthe form.",
            "title": "Add the Atomist webhook to your individual repositories"
        },
        {
            "location": "/getting-started/putting-atomist-to-work/#seeing-github-events-in-slack",
            "text": "Now that you have added the Atomist webhook to your GitHub\nconfiguration and events are flowing from GitHub into Atomist, these\nevents will begin to show up in Slack.  To see your new webhook in\naction, and how those events get interpreted in  @atomist , make a\nsmall edit to one of the files in your repository (the  README.md  is\nusually a good candidate to make a small, inconseqential edit) either\nthrough the GitHub user interface or through a commit/push from a\nlocal edit.  When you have done the commit/push to master you should see those\nevents happily appearing in your project\u2019s channel,  #sprockets  in\nour example here:",
            "title": "Seeing GitHub events in Slack"
        },
        {
            "location": "/getting-started/putting-atomist-to-work/#using-github-in-slack",
            "text": "Getting well-formatted message in Slack about what is happening to\nyour project on GitHub is nice, but it only scratches the surface of\nwhat Atomist can do.  In addition to passively receiving and then\ndisplaying GitHub events, Atomist can create and modify code, issues,\nand PRs on GitHub, all without you ever having to leave Slack.  Let\u2019s\nuse the Atomist Bot to create a GitHub Issues for us.  Before we can create GitHub issues in Slack, we have to enable the\nfunctionality in the Atomist Bot.  We do this by registering the\nappropriate command,  CreateIssue  in this case, with the Atomist Bot\nin your Slack.  In other words, we are going to teach  your  Atomist\nBot a new trick.  Send the following message to your Atomist Bot.  @atomist register command  Your Atomist Bot will respond by creating a thread and ask you some\nquestions about the command you want to register.  \n     After you answer all the questions, you will see a summary of the\ncommand registration information.  \n     Click the \u201cSubmit\u201d button and your Atomist Bot will respond back in\nthe original channel, saying it has successfully registered a new\ncommand.  \n     Your Atomist Bot will now be able to create new issues for you in\nGitHub.  Let\u2019s try it out.  Send the following message in the #sprocket  channel that\u2019s associated with the  sprocket  project on\nGitHub.  @atomist create issue  As usual, your Atomist Bot will start a thread to collect all the\ninformation necessary it needs to complete the request, creating a new\nissue on the  sprocket  project.  \n     Once you have entered all the needed information, your Atomist Bot\nwill respond with a summary and the option to submit or cancel.  \n     Click the \u201cSubmit\u201d button and Atomist will create the issue and then\nrespond back in the main  #sprocket  channel.  \n     But that\u2019s not where the interaction stops. You Atomist Bot will also\npost a message in the  #sprocket  channel containing a summary of the\nnewly created issue  and  some buttons for common actions taken on\nissues: assign it someone, add a label, add a comment, etc.  \n     Go ahead and click on the link to see the issue on GitHub.  \n     Now head back to the  #sprocket  channel in Slack and click on the\n\u201cBug\u201d button to add the \u201cbug\u201d label to the issue:  \n     We see the Atomist Bot responding that it has successfully edited the\nissue.  Let\u2019s make sure.  Click on the link to open up the issue in\nGitHub.  \n     We can see that Atomist, as us, has labeled the issue a bug, just as\nwe asked.  Now imagine that you are another team member who has noticed this new\nissue and wants to add a comment from inside GitHub.  Using the GitHub\nweb interface, add a comment and click the \u201cComment\u201d button.  \n     You will see a new message in the  #sprocket  channel from your\nAtomist Bot notifying you that the issue has been updated.  \n     The circle is complete!  After connecting Atomist and GitHub, we can\nsee GitHub events in Slack, take action on them, and see the result in\nGitHub and Slack.",
            "title": "Using GitHub in Slack"
        },
        {
            "location": "/getting-started/putting-atomist-to-work/#using-atomist-on-an-existing-project",
            "text": "You almost certainly have many existing projects that you would like\nAtomist\u2019s help keeping track of.  To get Atomist\u2019s help with existing\nGitHub repositories, simply invite the Atomist Bot to a channel with\nthe same name as the repository.  You can invite the Atomist Bot to a\nchannel just as you would invite any other user, e.g., by using the /invite @atomist  command.  Once the Atomist Bot is in the channel,\nit will begin reporting on activity in the associated repository and\nyou can interact with the repository, creating and assigning issues,\netc., just as you do with channels the Atomist Bot creates when it\ncreates the repositories.  If you prefer not to have the channel and repository have the same\nname, you can tell the Atomist Bot what repository to associate with a\nchannel by sending the message  repo  to the Atomist Bot in that\nchannel.  @atomist repo REPOSITORY_NAME  Replace  REPOSITORY_NAME  in the above command with the name of the\nrepository you want the Atomist Bot to associate with the current\nchannel.  At any time you can ask the Atomist Bot to tell you what\nrepository is associated with the current channel by sending it the repo  command without an argument.  @atomist repo  Click Next at the bottom-right of this page to continue.",
            "title": "Using Atomist on an existing project"
        },
        {
            "location": "/getting-started/connect-atomist-to-ci/",
            "text": "Atomist can listen for CI events, correlate them with the commits that triggered the build, and show contextualized notifications in the Slack channel.\n\n\nTo enable this, we need to connect Atomist to your CI system. Atomist currently works with Travis CI and Jenkins. Use either the \nTravis CI\n or \nJenkins\n section to help you configure Atomist to connect with your CI.\n\n\nTravis CI Setup\n\u00b6\n\n\nTravis uses your GitHub user access token. Once you have set up Travis for your GitHub account, you are ready to go. No additional authorization required. If you have not yet setup Travis and want to as part of getting started with Atomist, please see the \nTravis getting started\n documentation.\n\n\n\n\nAtomist works with Travis-CI.org and Travis-CI.com. Travis Enterprise is not currently supported.\n\n\n\n\nYou will need to enable your projects to be built using Travis if they aren\u2019t already set up. See the \nTravis documentation\n to set up Travis builds.\n\n\nNext, configure your Travis builds to send notifications to Atomist. In the \n.travis.yml\n configuration file in the project repo, add the following webhook configuration.\n\n\nnotifications\n:\n\n  \nwebhooks\n:\n\n    \nurls\n:\n\n    \n-\n \nhttps://webhook.atomist.com/travis\n\n    \non_success\n:\n \nalways\n\n    \non_failure\n:\n \nalways\n\n    \non_start\n:\n \nalways\n\n    \non_cancel\n:\n \nalways\n\n    \non_error\n:\n \nalways\n\n\n\n\n\n\nThat\u2019s all that you need to do. Now, Travis will send all notifications to Atomist. To test it out, see the \nCI Notifications\n section.\n\n\nJenkins Setup\n\u00b6\n\n\n\n\nAtomist requires the \nNotification plugin\n for Jenkins. The Notification plugin is what will send event notifications to Atomist, so that we can notify and take action based on build events.\n\n\n\n\nIf you don\u2019t already have the Notification plugin installed, go to the Plugin Manager in the Jenkins admin interface, select it and complete the installation.\n\n\n\n  \n\n\n\n\n\nTo enable the plugin, be sure to restart Jenkins after installation.\n\n\n\n  \n\n\n\n\n\nNow that the Notification plugin is installed and enabled, it\u2019s time to configure project Notifications settings. Select a project that you would like Atomist to get events from. Next, select \u201cConfigure\u201d.\n\n\n\n  \n\n\n\n\n\nWe\u2019re going to walk through setting up a webhook. In the Job Notifications section of the project configuration, click the \u201cAdd Endpoint\u201d button.\n\n\n\n  \n\n\n\n\n\nIn the Notification configuration section, configure the endpoint URL as \nhttps://webhook.atomist.com/jenkins\n and check that the other parameters match the information shown below.\n\n\n\n  \n\n\n\n\n\nNow, Jenkins is set up to send all notifications to Atomist. To test it out, see the next section, \nIn Action: CI Notifications\n.\n\n\nCI Notifications\n\u00b6\n\n\nNow that CI is also configured, let\u2019s take a look at how Atomist handles CI events.\n\n\nLet\u2019s make a little change the \nREADME.md\n of our \nsprockets\n repo, then commit it.\n\n\n\n  \n\n\n\n\n\n\n  \n\n\n\n\n\nThis project is configured so that the commit triggers a Travis build. Atomist is now receiving CI notifications, and is notified of the build started.",
            "title": "Connect Atomist to CI"
        },
        {
            "location": "/getting-started/connect-atomist-to-ci/#travis-ci-setup",
            "text": "Travis uses your GitHub user access token. Once you have set up Travis for your GitHub account, you are ready to go. No additional authorization required. If you have not yet setup Travis and want to as part of getting started with Atomist, please see the  Travis getting started  documentation.   Atomist works with Travis-CI.org and Travis-CI.com. Travis Enterprise is not currently supported.   You will need to enable your projects to be built using Travis if they aren\u2019t already set up. See the  Travis documentation  to set up Travis builds.  Next, configure your Travis builds to send notifications to Atomist. In the  .travis.yml  configuration file in the project repo, add the following webhook configuration.  notifications : \n   webhooks : \n     urls : \n     -   https://webhook.atomist.com/travis \n     on_success :   always \n     on_failure :   always \n     on_start :   always \n     on_cancel :   always \n     on_error :   always   That\u2019s all that you need to do. Now, Travis will send all notifications to Atomist. To test it out, see the  CI Notifications  section.",
            "title": "Travis CI Setup"
        },
        {
            "location": "/getting-started/connect-atomist-to-ci/#jenkins-setup",
            "text": "Atomist requires the  Notification plugin  for Jenkins. The Notification plugin is what will send event notifications to Atomist, so that we can notify and take action based on build events.   If you don\u2019t already have the Notification plugin installed, go to the Plugin Manager in the Jenkins admin interface, select it and complete the installation.  \n     To enable the plugin, be sure to restart Jenkins after installation.  \n     Now that the Notification plugin is installed and enabled, it\u2019s time to configure project Notifications settings. Select a project that you would like Atomist to get events from. Next, select \u201cConfigure\u201d.  \n     We\u2019re going to walk through setting up a webhook. In the Job Notifications section of the project configuration, click the \u201cAdd Endpoint\u201d button.  \n     In the Notification configuration section, configure the endpoint URL as  https://webhook.atomist.com/jenkins  and check that the other parameters match the information shown below.  \n     Now, Jenkins is set up to send all notifications to Atomist. To test it out, see the next section,  In Action: CI Notifications .",
            "title": "Jenkins Setup"
        },
        {
            "location": "/getting-started/connect-atomist-to-ci/#ci-notifications",
            "text": "Now that CI is also configured, let\u2019s take a look at how Atomist handles CI events.  Let\u2019s make a little change the  README.md  of our  sprockets  repo, then commit it.  \n     \n     This project is configured so that the commit triggers a Travis build. Atomist is now receiving CI notifications, and is notified of the build started.",
            "title": "CI Notifications"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/",
            "text": "Right! You\u2019ve seen some of the automation between issues, commits, builds that we provide out-of-the-box and now let\u2019s automate an action.\n\n\nIn Atomist that means writing a handler in TypeScript using the Atomist\u2019s \nRug\n support. The handler will be triggered by a certain type of activity that Atomist can detect, in this example case you want to notify the team when an issue labeled \u2018bug\u2019 gets fixed.\n\n\nCreate a Rug Handlers Project\n\u00b6\n\n\nThe first thing you need is a project for your code. Although you can add Atomist Rug code to any existing project by simply adding a \n.atomist\n directory along with a few support files in this case we\u2019ll create and publish a new project for your first Atomist Rug development automation.\n\n\nAsk the Bot to list out the project generator that you need by typing \n@atomist generator rug\n and select the \nNewHandlersProject\n generator:\n\n\n\n  \n\n\n\n\n\nClick on the \nCreate project\n button and enter the following information to create your new project:\n\n\n\n  \n\n\n\n\n\nOnce done you can click on \nGenerate project\n in the project generation summary:\n\n\n\n  \n\n\n\n\n\nThen \n@atomist\n will create the new project in your GitHub organization:\n\n\n\n  \n\n\n\n\n\nAlso \n@atomist\n will have created a new \n#handlers\n channel in Slack that\u2019s tied to that project that shows some initial setup commits made by the project generator:\n\n\n\n  \n\n\n\n\n\nClone the new handlers project locally and, because we\u2019re using TypeScript, change directory into the \n.atomist\n directory of the local handlers project and enter \nnpm install\n to get the TypeScript library dependencies installed:\n\n\n\n\nTo develop your rugs in TypeScript you will need \nnode.js\n and \nnpm\n installed locally.\n\n\n\n\n$\n npm install\n\n/.../handlers/.atomist\n\n\n\u251c\u2500\u252c @atomist/github@0.2.0\n\n\n\u2502 \u2514\u2500\u2500 @atomist/rug@0.10.0\n\n\n\u251c\u2500\u2500 @atomist/rug@0.12.0\n\n\n\u2514\u2500\u252c @atomist/travis@0.6.1\n\n\n  \u2514\u2500\u2500 @atomist/rug@0.10.0\n\n\n\n\n\n\nNow it\u2019s time to write your new handler.\n\n\nWriting Your Handler\n\u00b6\n\n\nThe handlers project you just generated contains a number of pre-existing handlers that you can take inspiration from. For our purposes we only want one new handler and the closest example in the handlers project is \n.atomist/handlers/IssueHandler.ts\n.\n\n\nThe generated handlers project contains a whole host of sample handlers and executors, including all the default handlers that you\u2019ve seen in action already. You need to keep those handlers in this project as when you publish this Rug archive you will effectively override the default handlers, and we don\u2019t want to lose that functionality we\u2019ve already seen.\n\n\nIn a new \n.atomist/handlers/CloseIssueThanks.ts\n file enter the following handler code:\n\n\nimport\n \n{\nAtomist\n}\n \nfrom\n \n'@atomist/rug/operations/Handler'\n\n\nimport\n \n{\nTreeNode\n}\n \nfrom\n \n'@atomist/rug/tree/PathExpression'\n\n\ndeclare\n \nvar\n \natomist\n: \nAtomist\n\n\n\natomist\n.\non\n<\nTreeNode\n,\n \nTreeNode\n>\n(\n\"/Issue()/belongsTo::Repo()/channel::ChatChannel()\"\n,\n \nm\n \n=>\n \n{\n\n   \nlet\n \nissue\n \n=\n \nm\n.\nroot\n()\n \nas\n \nany\n\n\n   \nif\n \n(\nissue\n.\nstate\n()\n \n!=\n \n\"closed\"\n)\n \n{\n\n     \nreturn\n\n   \n}\n\n\n   \natomist\n.\nmessageBuilder\n()\n\n    \n.\nsay\n(\n\"Thanks for closing this issue on \"\n \n+\n\n         \nissue\n.\nbelongsTo\n().\nname\n())\n\n    \n.\non\n(\nissue\n.\nbelongsTo\n().\nchannel\n().\nid\n()).\nsend\n()\n\n\n})\n\n\n\n\n\n\nNow it\u2019s time to publish and test your new handler.\n\n\n\n\nAt the moment you can\u2019t test handlers locally and instead you need to publish and test your handler is invoked from it\u2019s results in Atomist.\n\n\n\n\nPublish Your Handler\n\u00b6\n\n\nTo make Atomist aware of your new handler you need to publish the handler project. This is often done via continuous integration but for our purposes here you\u2019re going to see how it\u2019s done manually using the \nRug CLI\n.\n\n\nInstall and Configure the Rug CLI\n\u00b6\n\n\nFirstly make sure you\u2019ve [installed the latest Rug CLI][cli-install]\nfor your platform.  To publish new Rugs you need to\nconfigure the Rug CLI with the credentials it needs to push\nyour rugs to Atomists.  To see this problem you can try to run the\ncommand \nrug repositories configure\n and you should see:\n\n\n$\n rug repositories configure\n\n\nNo token configured. Please run repositories login before running this command.\n\n\n\nRun the following command for usage help:\n\n\n  rug repositories configure --help\n\n\n\n\n\n\nTo configure the Rug CLI you need to execute the \nrug repositories login\n command providing your GitHub credentials:\n\n\n$\n rug repositories login\n\n\n\nThe Rug CLI needs your GitHub login to identify you.\n\n\n\nThe command will create a GitHub Personal Access Token with scope 'read:org'\n\n\nwhich you can revoke any time on https://github.com/settings/tokens.  Your\n\n\npassword will not be displayed or stored. Your sensitive information will not\n\n\nbe sent to Atomist; only to api.github.com.\n\n\n\n  \u2192 Username : .....\n\n\n  \u2192 Password : .....\n\n\n\n  Please provide a MFA code\n\n\n  \u2192 MFA code : .....\n\n\n\nSuccessfully logged in to GitHub and stored token in ~/.atomist/cli.yml\n\n\n\n\n\n\n\n\nNOTE\n: No passwords are stored, only a unique personal access token with org/read scope. Also if you are using 2 Factor Authentication with GitHub you will be prompted for the \nMFA code\n as shown above.\n\n\n\n\nNow when you execute \nrug repositories configure\n you should see the Rug CLI configured with your team\u2019s unique repository:\n\n\n$\n rug repositories configure\n\n\n\u2192 Repositories\n\n\n  <unique identifier of your team's repository>\n\n\n    <your unique team's repository url here>\n\n\n\n\n\n\nYou\u2019re now all set to publish your handlers project.\n\n\nPublishing\n\u00b6\n\n\nThe Rug CLI has the \npublish\n command to publish a Rug archive from your local copy. Execute the \nrug publish\n command from inside your handlers project directory:\n\n\n$\n rug publish\n\nResolving dependencies for antifragilesoftware:handlers:0.1.0 \u2190 local completed\n\n\nInvoking TypeScript Compiler on ts script sources\n\n\n  Created .atomist/handlers/CloseIssueThanksHandler.js.map\n\n\n  Created .atomist/handlers/CloseIssueThanksHandler.js\n\n\nProcessing script sources completed\n\n\nLoading antifragilesoftware:handlers:0.1.0 \u2190 local into runtime completed\n\n\n  Created META-INF/maven/antifragilesoftware/handlers/pom.xml\n\n\n  Created .atomist/manifest.yml\n\n\n  Created .atomist/metadata.json\n\n\nGenerating archive metadata completed\n\n\n  Uploading antifragilesoftware/handlers/0.1.0/handlers-0.1.0.zip \u2192 t3v0s7ss2 (186 kb) succeeded\n\n\n  Uploading antifragilesoftware/handlers/0.1.0/handlers-0.1.0.pom \u2192 t3v0s7ss2 (927 bytes) succeeded\n\n\n  Uploading antifragilesoftware/handlers/0.1.0/handlers-0.1.0-metadata.json \u2192 t3v0s7ss2 (762 bytes) succeeded\n\n\n  Downloading antifragilesoftware/handlers/maven-metadata.xml \u2190 t3v0s7ss2 (382 bytes) succeeded\n\n\n  Uploading antifragilesoftware/handlers/maven-metadata.xml \u2192 t3v0s7ss2 (334 bytes) succeeded\n\n\nPublishing archive into remote repository completed\n\n\n\n\u2192 Archive\n\n\n  ~/code/src/github.com/antifragilesoftware/handlers/.atomist/target/handlers-0.1.0.zip (186 kb in 165 files)\n\n\n\n\u2192 URL\n\n\n  https://atomist.jfrog.io/atomist/T3V0S7SS2/antifragilesoftware/handlers/0.1.0/handlers-0.1.0.zip\n\n\n\nSuccessfully published archive for antifragilesoftware:handlers:0.1.0\n\n\n\n\n\n\nYour new handlers rugs are now ready for action in your Atomist environment. To test that everything has published correctly you can execute \nrug search\n and you should see your Rug archive listed just for you:\n\n\n$\n rug search\n\nSearching https://api.atomist.com/catalog\n\n\nSearching catalogs completed\n\n\n\n\u2192 Remote Archives (38 archives found)\n\n\nyourorg:handlers [private] (0.1.0)\n\n\n...\n\n\n\n\n\n\nYour Handler in Action\n\u00b6\n\n\nNow you can give your new \nCloseIssueThanksHandler\n handler a spin! Head back to the \n#sprocket\n channel and you should see a button to \nClose\n the issue we created earlier:\n\n\n\n  \n\n\n\n\n\nClick on \nClose\n (you could also close the issue in GitHub if you prefer) and several things will happen. Firstly \n@atomist\n will indicate with a message that the issue has been edited\u2026\n\n\n\n  \n\n\n\n\n\n\u2026 then the panel for the issue in Slack will be updated with a \nReopen\n button \u2026\n\n\n\n  \n\n\n\n\n\n\u2026 and finally your new handler will be invoked and the \u201cthanks\u201d message will be displayed!\n\n\n\n  \n\n\n\n\n\nThere, you did it! You just created a new automation, and taught the Bot to listen for events and run that automation!\n\n\nWhat Next\n\u00b6\n\n\nCongratulations, you\u2019ve made it through the Atomist Getting Started\nguide.  Now that you\u2019re up and running with Atomist, please be sure\nto\n\n\n\n\nJoin the \nAtomist Community Slack\n\n\nFollowing our blog, \nThe Composition\n\n\nFollow \n@atomist\n on Twitter\n\n\n\n\nIf you want more detailed documentation on all aspects of Atomist,\njust click Next at the bottom-right of this page to move into the\nAtomist User Guide.",
            "title": "Build Your Own Development Automation"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/#create-a-rug-handlers-project",
            "text": "The first thing you need is a project for your code. Although you can add Atomist Rug code to any existing project by simply adding a  .atomist  directory along with a few support files in this case we\u2019ll create and publish a new project for your first Atomist Rug development automation.  Ask the Bot to list out the project generator that you need by typing  @atomist generator rug  and select the  NewHandlersProject  generator:  \n     Click on the  Create project  button and enter the following information to create your new project:  \n     Once done you can click on  Generate project  in the project generation summary:  \n     Then  @atomist  will create the new project in your GitHub organization:  \n     Also  @atomist  will have created a new  #handlers  channel in Slack that\u2019s tied to that project that shows some initial setup commits made by the project generator:  \n     Clone the new handlers project locally and, because we\u2019re using TypeScript, change directory into the  .atomist  directory of the local handlers project and enter  npm install  to get the TypeScript library dependencies installed:   To develop your rugs in TypeScript you will need  node.js  and  npm  installed locally.   $  npm install /.../handlers/.atomist  \u251c\u2500\u252c @atomist/github@0.2.0  \u2502 \u2514\u2500\u2500 @atomist/rug@0.10.0  \u251c\u2500\u2500 @atomist/rug@0.12.0  \u2514\u2500\u252c @atomist/travis@0.6.1    \u2514\u2500\u2500 @atomist/rug@0.10.0   Now it\u2019s time to write your new handler.",
            "title": "Create a Rug Handlers Project"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/#writing-your-handler",
            "text": "The handlers project you just generated contains a number of pre-existing handlers that you can take inspiration from. For our purposes we only want one new handler and the closest example in the handlers project is  .atomist/handlers/IssueHandler.ts .  The generated handlers project contains a whole host of sample handlers and executors, including all the default handlers that you\u2019ve seen in action already. You need to keep those handlers in this project as when you publish this Rug archive you will effectively override the default handlers, and we don\u2019t want to lose that functionality we\u2019ve already seen.  In a new  .atomist/handlers/CloseIssueThanks.ts  file enter the following handler code:  import   { Atomist }   from   '@atomist/rug/operations/Handler'  import   { TreeNode }   from   '@atomist/rug/tree/PathExpression'  declare   var   atomist :  Atomist  atomist . on < TreeNode ,   TreeNode > ( \"/Issue()/belongsTo::Repo()/channel::ChatChannel()\" ,   m   =>   { \n    let   issue   =   m . root ()   as   any \n\n    if   ( issue . state ()   !=   \"closed\" )   { \n      return \n    } \n\n    atomist . messageBuilder () \n     . say ( \"Thanks for closing this issue on \"   + \n          issue . belongsTo (). name ()) \n     . on ( issue . belongsTo (). channel (). id ()). send ()  })   Now it\u2019s time to publish and test your new handler.   At the moment you can\u2019t test handlers locally and instead you need to publish and test your handler is invoked from it\u2019s results in Atomist.",
            "title": "Writing Your Handler"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/#publish-your-handler",
            "text": "To make Atomist aware of your new handler you need to publish the handler project. This is often done via continuous integration but for our purposes here you\u2019re going to see how it\u2019s done manually using the  Rug CLI .",
            "title": "Publish Your Handler"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/#install-and-configure-the-rug-cli",
            "text": "Firstly make sure you\u2019ve [installed the latest Rug CLI][cli-install]\nfor your platform.  To publish new Rugs you need to\nconfigure the Rug CLI with the credentials it needs to push\nyour rugs to Atomists.  To see this problem you can try to run the\ncommand  rug repositories configure  and you should see:  $  rug repositories configure No token configured. Please run repositories login before running this command.  Run the following command for usage help:    rug repositories configure --help   To configure the Rug CLI you need to execute the  rug repositories login  command providing your GitHub credentials:  $  rug repositories login The Rug CLI needs your GitHub login to identify you.  The command will create a GitHub Personal Access Token with scope 'read:org'  which you can revoke any time on https://github.com/settings/tokens.  Your  password will not be displayed or stored. Your sensitive information will not  be sent to Atomist; only to api.github.com.    \u2192 Username : .....    \u2192 Password : .....    Please provide a MFA code    \u2192 MFA code : .....  Successfully logged in to GitHub and stored token in ~/.atomist/cli.yml    NOTE : No passwords are stored, only a unique personal access token with org/read scope. Also if you are using 2 Factor Authentication with GitHub you will be prompted for the  MFA code  as shown above.   Now when you execute  rug repositories configure  you should see the Rug CLI configured with your team\u2019s unique repository:  $  rug repositories configure \u2192 Repositories    <unique identifier of your team's repository>      <your unique team's repository url here>   You\u2019re now all set to publish your handlers project.",
            "title": "Install and Configure the Rug CLI"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/#publishing",
            "text": "The Rug CLI has the  publish  command to publish a Rug archive from your local copy. Execute the  rug publish  command from inside your handlers project directory:  $  rug publish Resolving dependencies for antifragilesoftware:handlers:0.1.0 \u2190 local completed  Invoking TypeScript Compiler on ts script sources    Created .atomist/handlers/CloseIssueThanksHandler.js.map    Created .atomist/handlers/CloseIssueThanksHandler.js  Processing script sources completed  Loading antifragilesoftware:handlers:0.1.0 \u2190 local into runtime completed    Created META-INF/maven/antifragilesoftware/handlers/pom.xml    Created .atomist/manifest.yml    Created .atomist/metadata.json  Generating archive metadata completed    Uploading antifragilesoftware/handlers/0.1.0/handlers-0.1.0.zip \u2192 t3v0s7ss2 (186 kb) succeeded    Uploading antifragilesoftware/handlers/0.1.0/handlers-0.1.0.pom \u2192 t3v0s7ss2 (927 bytes) succeeded    Uploading antifragilesoftware/handlers/0.1.0/handlers-0.1.0-metadata.json \u2192 t3v0s7ss2 (762 bytes) succeeded    Downloading antifragilesoftware/handlers/maven-metadata.xml \u2190 t3v0s7ss2 (382 bytes) succeeded    Uploading antifragilesoftware/handlers/maven-metadata.xml \u2192 t3v0s7ss2 (334 bytes) succeeded  Publishing archive into remote repository completed  \u2192 Archive    ~/code/src/github.com/antifragilesoftware/handlers/.atomist/target/handlers-0.1.0.zip (186 kb in 165 files)  \u2192 URL    https://atomist.jfrog.io/atomist/T3V0S7SS2/antifragilesoftware/handlers/0.1.0/handlers-0.1.0.zip  Successfully published archive for antifragilesoftware:handlers:0.1.0   Your new handlers rugs are now ready for action in your Atomist environment. To test that everything has published correctly you can execute  rug search  and you should see your Rug archive listed just for you:  $  rug search Searching https://api.atomist.com/catalog  Searching catalogs completed  \u2192 Remote Archives (38 archives found)  yourorg:handlers [private] (0.1.0)  ...",
            "title": "Publishing"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/#your-handler-in-action",
            "text": "Now you can give your new  CloseIssueThanksHandler  handler a spin! Head back to the  #sprocket  channel and you should see a button to  Close  the issue we created earlier:  \n     Click on  Close  (you could also close the issue in GitHub if you prefer) and several things will happen. Firstly  @atomist  will indicate with a message that the issue has been edited\u2026  \n     \u2026 then the panel for the issue in Slack will be updated with a  Reopen  button \u2026  \n     \u2026 and finally your new handler will be invoked and the \u201cthanks\u201d message will be displayed!  \n     There, you did it! You just created a new automation, and taught the Bot to listen for events and run that automation!",
            "title": "Your Handler in Action"
        },
        {
            "location": "/getting-started/build-your-own-development-automation/#what-next",
            "text": "Congratulations, you\u2019ve made it through the Atomist Getting Started\nguide.  Now that you\u2019re up and running with Atomist, please be sure\nto   Join the  Atomist Community Slack  Following our blog,  The Composition  Follow  @atomist  on Twitter   If you want more detailed documentation on all aspects of Atomist,\njust click Next at the bottom-right of this page to move into the\nAtomist User Guide.",
            "title": "What Next"
        },
        {
            "location": "/user-guide/",
            "text": "Welcome to the Atomist User Guide.  The Atomist User Guide contains\ndocumentation on all aspects of Atomist that its users, beginners\nthrough experts, can use to more effectively use Atomist to improve\ntheir processes and deliver value more quickly.\n\n\nIf you are not familiar with Atomist, you may want to start with\nthe \nAtomist Overview\n.  If you do not have Atomist set up\nin Slack, you may want to go through\nthe \nGetting Started\n guide.\n\n\nThe Atomist User Guide is split into three sections:\n\n\n\n\nRug\n: Atomist\u2019s enabling technology\n\n\nIntegrations\n: External platforms and tools that Atomist works with\n\n\nInterfaces\n: How users interact with Atomist\n\n\n\n\nClick on any of the links above to go directly to that section, or\nclick Next at the bottom right of this page to go to the next page in\nthe guide.",
            "title": "Introduction"
        },
        {
            "location": "/user-guide/rug/",
            "text": "Rug is the backbone of Atomist\u2019s features.  Atomist is about\nautomating away all the distractions from writing and operating great\nsoftware.  Rug provides the infrastructure to make complete automation\na reality.  The model that underpins Rug helps you automate common\ntasks and react to changes in your development ecosystem.\n\n\nThis section documents the \nruntime\n elements of Rug and Rug code,\ncalled \u201cRugs\u201d.  Specifically, its development, its life cycle, and its\nconventions.",
            "title": "Introduction"
        },
        {
            "location": "/user-guide/rug/runtime/",
            "text": "Event-driven automation\n\u00b6\n\n\nIn recent years, the DevOps trend has shown us that concerns about\nsoftware does not stop once it has been delivered.  Software exists\nthanks to those who designed and developed it but thrives thanks to\nthose who operate it.  At Atomist, we believe those two sides live in\nthe same world and more must be done to unite them.\n\n\nA common setup today is as follows:\n\n\n\n\nA project\u2019s source code lives in GitHub\n\n\nA project is automatically built and tested in a CI service\n\n\na project is usually automatically delivered in a forge somewhere\n\n\na project may even be deployed automatically in an environment\n\n\na project is then operated, monitored and cared for in that environment for\n    users to enjoy\n\n\nmaybe issues are created for developers to look at\n\n\n\n\nDuring all those phases, a massive amount of events were triggered: a commit\nwas pushed, a build succeeded or failed, the project was deployed, the service\nfailed in production\u2026\n\n\nAtomist believes that all these events bring all the team members as one.\nHowever, not all events may not be able relevant to a team at a given time,\nmoreover, it seems appropriate to think that we should also automate the\nresponse to some of those events.\n\n\nThis is why Atomist extends the Rug programming model with:\n\n\n\n\nTriggering a human decision\n\n\nTriggering an automated response\n\n\n\n\n\n\nRug is a medium for code that modifies code. Rug helps developers\nautomate development.  When a coding task is common, tedious,\nnitpicky, or hard to remember how to do correctly, there\u2019s value in\nencoding how it\u2019s done, instead of performing the typing every time.\n\n\nThe Rug ecosystem includes a language, runtime, test runner, and\npackage manager.  The Rug language is optional; there\u2019s also\na \nTypeScript module\n, so you can combine a general-purpose\nlanguage with the tooling of Rug.  The Rug runtime runs as a service,\naccessible from any Slack that has invited the Atomist Bot (try it\nin \nAtomist Community slack\n).  There\u2019s also the \nRug CLI\n\nfor local use, essential for Rug development.\n\n\nSome Use Cases for Rug\n\u00b6\n\n\nWe are constantly finding new uses for Rug and here are a sample of\nthe cases that we, and others, have used Rug for so far:\n\n\n\n\nHelping technical leads to guide development teams in best\n    practices on various technologies from initial project creation\n    through to the full lifecycle of a project\n\n\nSafely applying and evaluating new technologies to existing\n    projects\n\n\nHelping open source project owners to guide their users on how to\n    start out with, and continuously update and evolve, the software\n    based on their work.\n\n\nHelping to apply best-practice tools and techniques from the\n    microservices toolbox\n\n\n\n\nLearn more\n\u00b6\n\n\n\n\nWhat goes in a Rug project?\n\n\nA day in the life of a Rug project\n\n\nRug CLI\n\n\n\n\n\n\nAutomating your development tasks\n\u00b6\n\n\nIt is said that good developers are lazy and like to automate their work.\nHowever, the tools to drive that automation have been somewhat sparse and crude\nwhen we consider the sheer complexity of projects nowadays.\n\n\nAtomist acknwoledges the following typical use cases common to all teams:\n\n\n\n\nKeeping track of and responding to what is going\n\n\nCreating new projects\n\n\nEditing existing projects\n\n\nReviewing changes\n\n\n\n\nTriggering a human decision\n\u00b6\n\n\nAutomation is fantastic but humans are the sole judges. Atomist gives you the\npower to implement new skills that can be triggered by a team member at when\nneeded.\n\n\nIn Rug, this is achieved through Command Handlers (soon available).\n\n\nTriggering an automated response\n\u00b6\n\n\nIn some cases, a response to a system event should be automated so the team\ncan focus on the things that require human attention.\n\n\nIn Rug, this is achieved through Event Handlers (soon available).\n\n\nCreating new projects\n\u00b6\n\n\nIn a world of rapidly evolving software, creating new projects has become a\ntask performed much more often than in the past. Meanwhile, the complexity of\nprojects has grown dramatically with configuration required for logging, CI,\ndependency management\u2026\n\n\nIt appears clear that automating the generation of projects is a prime for any\nteam willing to move fast but with repeatable quality.\n\n\nIn Rug, this is achieved through \nGenerators\n.\n\n\nEditing projects\n\u00b6\n\n\nAutomating the creation of projects is a great step forward but it cannot stop\nthere. There are tasks that are repeated on a daily basis and doing them\nmanually can be error prone, not to mention rather boring. Let\u2019s not forget that\ncode quickly becomes legacy that nobody knows really about any longer.\n\n\nAutomating those changes is an asset for any developer who wishes to focus on\ndelivering great software without wasting time in mundane tasks.\n\n\nIn Rug, this is achieved through \nEditors\n.\n\n\nReviewing changes\n\u00b6\n\n\nIn the last few years, code review has become a strong asset for any team\nlooking at producing high quality software and reducing bugs. However, with the\nsheer size of projects, it can become highly tedious to track all changes\nproperly. Atomist believes some changes can be reviewed automatically. The\ndeveloper is still the one judging of the relevancy of what Atomist could\nsuggest of course but, at least, the initial tedious task of gathering\nimpacts of a change should be automated.\n\n\nIn Rug, this is achieved through Reviewers (soon available).",
            "title": "Runtime"
        },
        {
            "location": "/user-guide/rug/runtime/#event-driven-automation",
            "text": "In recent years, the DevOps trend has shown us that concerns about\nsoftware does not stop once it has been delivered.  Software exists\nthanks to those who designed and developed it but thrives thanks to\nthose who operate it.  At Atomist, we believe those two sides live in\nthe same world and more must be done to unite them.  A common setup today is as follows:   A project\u2019s source code lives in GitHub  A project is automatically built and tested in a CI service  a project is usually automatically delivered in a forge somewhere  a project may even be deployed automatically in an environment  a project is then operated, monitored and cared for in that environment for\n    users to enjoy  maybe issues are created for developers to look at   During all those phases, a massive amount of events were triggered: a commit\nwas pushed, a build succeeded or failed, the project was deployed, the service\nfailed in production\u2026  Atomist believes that all these events bring all the team members as one.\nHowever, not all events may not be able relevant to a team at a given time,\nmoreover, it seems appropriate to think that we should also automate the\nresponse to some of those events.  This is why Atomist extends the Rug programming model with:   Triggering a human decision  Triggering an automated response    Rug is a medium for code that modifies code. Rug helps developers\nautomate development.  When a coding task is common, tedious,\nnitpicky, or hard to remember how to do correctly, there\u2019s value in\nencoding how it\u2019s done, instead of performing the typing every time.  The Rug ecosystem includes a language, runtime, test runner, and\npackage manager.  The Rug language is optional; there\u2019s also\na  TypeScript module , so you can combine a general-purpose\nlanguage with the tooling of Rug.  The Rug runtime runs as a service,\naccessible from any Slack that has invited the Atomist Bot (try it\nin  Atomist Community slack ).  There\u2019s also the  Rug CLI \nfor local use, essential for Rug development.",
            "title": "Event-driven automation"
        },
        {
            "location": "/user-guide/rug/runtime/#some-use-cases-for-rug",
            "text": "We are constantly finding new uses for Rug and here are a sample of\nthe cases that we, and others, have used Rug for so far:   Helping technical leads to guide development teams in best\n    practices on various technologies from initial project creation\n    through to the full lifecycle of a project  Safely applying and evaluating new technologies to existing\n    projects  Helping open source project owners to guide their users on how to\n    start out with, and continuously update and evolve, the software\n    based on their work.  Helping to apply best-practice tools and techniques from the\n    microservices toolbox",
            "title": "Some Use Cases for Rug"
        },
        {
            "location": "/user-guide/rug/runtime/#learn-more",
            "text": "What goes in a Rug project?  A day in the life of a Rug project  Rug CLI",
            "title": "Learn more"
        },
        {
            "location": "/user-guide/rug/runtime/#automating-your-development-tasks",
            "text": "It is said that good developers are lazy and like to automate their work.\nHowever, the tools to drive that automation have been somewhat sparse and crude\nwhen we consider the sheer complexity of projects nowadays.  Atomist acknwoledges the following typical use cases common to all teams:   Keeping track of and responding to what is going  Creating new projects  Editing existing projects  Reviewing changes",
            "title": "Automating your development tasks"
        },
        {
            "location": "/user-guide/rug/runtime/#triggering-a-human-decision",
            "text": "Automation is fantastic but humans are the sole judges. Atomist gives you the\npower to implement new skills that can be triggered by a team member at when\nneeded.  In Rug, this is achieved through Command Handlers (soon available).",
            "title": "Triggering a human decision"
        },
        {
            "location": "/user-guide/rug/runtime/#triggering-an-automated-response",
            "text": "In some cases, a response to a system event should be automated so the team\ncan focus on the things that require human attention.  In Rug, this is achieved through Event Handlers (soon available).",
            "title": "Triggering an automated response"
        },
        {
            "location": "/user-guide/rug/runtime/#creating-new-projects",
            "text": "In a world of rapidly evolving software, creating new projects has become a\ntask performed much more often than in the past. Meanwhile, the complexity of\nprojects has grown dramatically with configuration required for logging, CI,\ndependency management\u2026  It appears clear that automating the generation of projects is a prime for any\nteam willing to move fast but with repeatable quality.  In Rug, this is achieved through  Generators .",
            "title": "Creating new projects"
        },
        {
            "location": "/user-guide/rug/runtime/#editing-projects",
            "text": "Automating the creation of projects is a great step forward but it cannot stop\nthere. There are tasks that are repeated on a daily basis and doing them\nmanually can be error prone, not to mention rather boring. Let\u2019s not forget that\ncode quickly becomes legacy that nobody knows really about any longer.  Automating those changes is an asset for any developer who wishes to focus on\ndelivering great software without wasting time in mundane tasks.  In Rug, this is achieved through  Editors .",
            "title": "Editing projects"
        },
        {
            "location": "/user-guide/rug/runtime/#reviewing-changes",
            "text": "In the last few years, code review has become a strong asset for any team\nlooking at producing high quality software and reducing bugs. However, with the\nsheer size of projects, it can become highly tedious to track all changes\nproperly. Atomist believes some changes can be reviewed automatically. The\ndeveloper is still the one judging of the relevancy of what Atomist could\nsuggest of course but, at least, the initial tedious task of gathering\nimpacts of a change should be automated.  In Rug, this is achieved through Reviewers (soon available).",
            "title": "Reviewing changes"
        },
        {
            "location": "/user-guide/rug/typescript/",
            "text": "TypeScript\n is the primary language Atomist supports for writing\nRugs. TypeScript provides a complete programming language, type\nsafety, and great tooling support for features like code completion\nand syntax checking.\n\n\nPrerequisites\n\u00b6\n\n\nBefore you begin writing Rugs in TypeScript,\nplease \ninstall the Rug CLI\n.\n\n\nGetting set up for TypeScript Rugs\n\u00b6\n\n\nTo get your Rug project ready for TypeScript Rugs, you will run the\nRug editor \nAddTypeScript\n.\n\n\n$ cd rug/project/directory\n$ rug edit atomist-rugs:rug-editors:AddTypeScript\n\n\n\n\n\nDetailed instructions for running the \nAddTypeScript\n editor can be\nfound in the \nrug-editors README\n.\n\n\nThe \nAddTypeScript\n editor will add the following files and directory\nto the \n.atomist\n directory in the project.\n\n\n\n\npackage.json\n: a simple \nNode.js\n\n   NPM \npackage.json\n configuring the dependency on the\n   Rug TypeScript typings\n\n\ntsconfig.json\n:\n   a \nTypeScript compiler configuration file\n used by\n   development tools\n\n\n.gitignore\n: a standard \ngitignore\n file instructing Git to\n   ignore files created by the TypeScript compiler and NPM\n\n\nnode_modules\n: this directory contains the Rug TypeScript typings\n\n\n\n\nCreating a TypeScript Rug editor\n\u00b6\n\n\nTo create your first TypeScript Rug editor and its associated test, we\nwill run the Rug editor \nAddTypeScriptEditor\n.  Run the following\ncommand to create the editor and its test.\n\n\n$ rug edit atomist-rugs:rug-editors:AddTypeScriptEditor \\\n    editor_name=MyNewEditor \\\n    description=\"This is my newest editor... in TypeScript!\"\n\n\n\n\n\nDetailed instructions for running the \nAddTypeScriptEditor\n can be\nfound in the \nrug-editors README\n.\n\n\nRunning the \nAddTypeScriptEditor\n editor as above will result your new\nTypeScript Rug editor being created in\n\n.atomist/editors/MyNewEditor.ts\n and its corresponding tests being\ncreated in \n.atomist/tests/MyNewEditor.rt\n.  You can make sure\neverything is working by running the tests using the CLI.\n\n\n$ rug test\nResolving dependencies for mygroup:ts-qs:0.1.0 \u2190 local completed\nInvoking TypeScript Compiler on ts script sources\n  Created .atomist/editors/MyNewEditor.js\n  Created .atomist/editors/MyNewEditor.js.map\nProcessing script sources completed\nLoading mygroup:ts-qs:0.1.0 \u2190 local into runtime completed\nExecuting scenario MyNewEditor is added to your project by AddTypeScriptEditor...\n  Testing assertion fileContains(SimpleLiteral(hello.txt),SimpleLiteral(Hello, World!))\nRunning test scenarios in mygroup:ts-qs:0.1.0 \u2190 local completed\n\nSuccessfully executed 1 of 1 scenarios: Test SUCCESS\n\n\n\n\n\n\n\nAny changes made by Rugs in a test are performed completely in\nmemory.  Tests do not alter actual project files on the file\nsystem.\n\n\n\n\nWriting your first TypeScript Rug editor\n\u00b6\n\n\nNow that we have a sample TypeScript Rug editor in our project, we can\nchange it to do something useful.  Before we go changing the editor,\nwe should change the test to check for our desired behavior and\nestablish it is failing prior to implementing the feature.\n\n\nHere are the default contents for the test.\n\n\nscenario\n \nMyNewEditor is added to your project by AddTypeScriptEditor\n\n\n\ngiven\n\n\n  \nArchiveRoot\n\n\n\nwhen\n\n\n  \nMyNewEditor\n \ninput_parameter\n=\n\"the input_parameter value\"\n\n\n\nthen\n\n\n  \nfileContains\n \n\"hello.txt\"\n \n\"Hello, World!\"\n\n\n\n\n\n\nLet\u2019s personalize the editor a bit and have the message in the\n\nhello.txt\n file address someone by name.  We will change the test to\ncheck for this, and also update the test scenario description.  When\nwe are done, the test should look like this.\n\n\nscenario\n \nMyNewEditor adds a personalized greeting file to a project\n\n\n\ngiven\n\n\n  \nArchiveRoot\n\n\n\nwhen\n\n\n  \nMyNewEditor\n \naddressee\n=\n\"Mary\"\n\n\n\nthen\n\n\n  \nfileContains\n \n\"hello.txt\"\n \n\"Hello, Mary!\"\n\n\n\n\n\n\nWe run the test and make sure it is failing.\n\n\n$ rug test\nResolving dependencies for mygroup:ts-qs:0.1.0 \u2190 local completed\nInvoking TypeScript Compiler on ts script sources\n  Created .atomist/editors/MyNewEditor.js\n  Created .atomist/editors/MyNewEditor.js.map\nProcessing script sources completed\nLoading mygroup:ts-qs:0.1.0 \u2190 local into runtime completed\nExecuting scenario MyNewEditor adds a personalized greeting file to a project...\nRunning test scenarios in mygroup:ts-qs:0.1.0 \u2190 local completed\n\n\u2192 Failed Scenarios\n  MyNewEditor adds a personalized greeting file to a project (1 of 1 assertions failed)\n    Failed Assertions\n       Editor failed due to missing parameters: Missing parameters: [input_parameter]: Parameters: name=, values=[Buffer(SimpleParameterValue(addressee,Mary))]\n\nUnsuccessfully executed 1 of 1 scenarios: Test FAILED\n\n\n\n\n\nWith our test \nhappily\n failing, we can now update our editor to meet\nthe assertions of the test.  The original contents of the\n\nMyNewEditor.ts\n file should look like this.\n\n\nimport\n \n{\n \nEditProject\n \n}\n \nfrom\n \n'@atomist/rug/operations/ProjectEditor'\n\n\nimport\n \n{\n \nProject\n \n}\n \nfrom\n \n'@atomist/rug/model/Core'\n\n\nimport\n \n{\n \nPattern\n \n}\n \nfrom\n \n'@atomist/rug/operations/RugOperation'\n\n\nimport\n \n{\n \nEditor\n,\n \nParameter\n,\n \nTags\n \n}\n \nfrom\n \n'@atomist/rug/operations/Decorators'\n\n\n\n@Editor\n(\n\"MyNewEditor\"\n,\n \n\"This is my newest editor... in TypeScript!\"\n)\n\n\n@Tags\n(\n\"documentation\"\n)\n\n\nclass\n \nMyNewEditor\n \nimplements\n \nEditProject\n \n{\n\n\n    \n@Parameter\n({\n\n        \ndisplayName\n:\n \n\"Some Input\"\n,\n\n        \ndescription\n:\n \n\"example of how to specify a parameter using decorators\"\n,\n\n        \npattern\n: \nPattern.any\n,\n\n        \nvalidInput\n:\n \n\"a description of the valid input\"\n,\n\n        \nminLength\n: \n1\n,\n\n        \nmaxLength\n: \n100\n\n    \n})\n\n    \ninput_parameter\n: \nstring\n;\n\n\n    \nedit\n(\nproject\n: \nProject\n)\n \n{\n\n        \nproject\n.\naddFile\n(\n\"hello.txt\"\n,\n \n\"Hello, World!\\n\"\n \n+\n \nthis\n.\ninput_parameter\n \n+\n \n\"\\n\"\n);\n\n    \n}\n\n\n}\n\n\n\nexport\n \nconst\n \nmyNewEditor\n \n=\n \nnew\n \nMyNewEditor\n()\n\n\n\n\n\n\nWalking through this editor the contents are:\n\n\n\n\nImporting the Rug TypeScript typings\n\n\nDeclaring the editor using the \n@Editor\n decorator, passing in its name and description\n\n\nTagging the editor using the \n@Tag\n decorator to aid discoverability\n\n\nImplementing the \nEditProject\n interface to enforce the \nedit\n function signature\n\n\nInside the class\n\n\nDeclaring parameters using the \n@Parameter\n decorator\n\n\nImplementing the \nedit\n method\n\n\n\n\n\n\nFinally, exporting an instance of your editor class\n\n\n\n\nAfter making the edits to implement our desired functionality, our\neditor should look something like this.\n\n\nimport\n \n{\n \nEditProject\n \n}\n \nfrom\n \n'@atomist/rug/operations/ProjectEditor'\n\n\nimport\n \n{\n \nProject\n \n}\n \nfrom\n \n'@atomist/rug/model/Core'\n\n\nimport\n \n{\n \nPattern\n \n}\n \nfrom\n \n'@atomist/rug/operations/RugOperation'\n\n\nimport\n \n{\n \nEditor\n,\n \nParameter\n,\n \nTags\n \n}\n \nfrom\n \n'@atomist/rug/operations/Decorators'\n\n\n\n@Editor\n(\n\"MyNewEditor\"\n,\n \n\"Adds a customized welcome file to a project\"\n)\n\n\n@Tags\n(\n\"documentation\"\n)\n\n\nclass\n \nMyNewEditor\n \nimplements\n \nEditProject\n \n{\n\n\n    \n@Parameter\n({\n\n        \ndisplayName\n:\n \n\"Greeting Addressee\"\n,\n\n        \ndescription\n:\n \n\"name of person to whom the greeting should be addressed\"\n,\n\n        \npattern\n: \nPattern.any\n,\n\n        \nvalidInput\n:\n \n\"any valid string\"\n,\n\n        \nminLength\n: \n1\n,\n\n        \nmaxLength\n: \n100\n\n    \n})\n\n    \naddressee\n: \nstring\n;\n\n\n    \nedit\n(\nproject\n: \nProject\n)\n \n{\n\n        \nproject\n.\naddFile\n(\n\"hello.txt\"\n,\n \n\"Hello, \"\n \n+\n \nthis\n.\naddressee\n \n+\n \n\"!\\n\"\n);\n\n    \n}\n\n\n}\n\n\n\nexport\n \nconst\n \nmyNewEditor\n \n=\n \nnew\n \nMyNewEditor\n()\n\n\n\n\n\n\nWe have updated the editor description, the parameter information, and\nthe content of the created \nhello.txt\n file.\n\n\nWe can now run our test to see if our changes produce the desired\nresult.\n\n\n$ rug test\nResolving dependencies for mygroup:ts-qs:0.1.0 \u2190 local completed\nInvoking TypeScript Compiler on ts script sources\n  Created .atomist/editors/MyNewEditor.js.map\n  Created .atomist/editors/MyNewEditor.js\nProcessing script sources completed\nLoading mygroup:ts-qs:0.1.0 \u2190 local into runtime completed\nExecuting scenario MyNewEditor adds a personalized greeting file to a project...\n  Testing assertion fileContains(SimpleLiteral(hello.txt),SimpleLiteral(Hello, Mary!))\nRunning test scenarios in mygroup:ts-qs:0.1.0 \u2190 local completed\n\nSuccessfully executed 1 of 1 scenarios: Test SUCCESS\n\n\n\n\n\nSuccess!  Congratulations, you have created your first TypeScript Rug!",
            "title": "TypeScript"
        },
        {
            "location": "/user-guide/rug/typescript/#prerequisites",
            "text": "Before you begin writing Rugs in TypeScript,\nplease  install the Rug CLI .",
            "title": "Prerequisites"
        },
        {
            "location": "/user-guide/rug/typescript/#getting-set-up-for-typescript-rugs",
            "text": "To get your Rug project ready for TypeScript Rugs, you will run the\nRug editor  AddTypeScript .  $ cd rug/project/directory\n$ rug edit atomist-rugs:rug-editors:AddTypeScript  Detailed instructions for running the  AddTypeScript  editor can be\nfound in the  rug-editors README .  The  AddTypeScript  editor will add the following files and directory\nto the  .atomist  directory in the project.   package.json : a simple  Node.js \n   NPM  package.json  configuring the dependency on the\n   Rug TypeScript typings  tsconfig.json :\n   a  TypeScript compiler configuration file  used by\n   development tools  .gitignore : a standard  gitignore  file instructing Git to\n   ignore files created by the TypeScript compiler and NPM  node_modules : this directory contains the Rug TypeScript typings",
            "title": "Getting set up for TypeScript Rugs"
        },
        {
            "location": "/user-guide/rug/typescript/#creating-a-typescript-rug-editor",
            "text": "To create your first TypeScript Rug editor and its associated test, we\nwill run the Rug editor  AddTypeScriptEditor .  Run the following\ncommand to create the editor and its test.  $ rug edit atomist-rugs:rug-editors:AddTypeScriptEditor \\\n    editor_name=MyNewEditor \\\n    description=\"This is my newest editor... in TypeScript!\"  Detailed instructions for running the  AddTypeScriptEditor  can be\nfound in the  rug-editors README .  Running the  AddTypeScriptEditor  editor as above will result your new\nTypeScript Rug editor being created in .atomist/editors/MyNewEditor.ts  and its corresponding tests being\ncreated in  .atomist/tests/MyNewEditor.rt .  You can make sure\neverything is working by running the tests using the CLI.  $ rug test\nResolving dependencies for mygroup:ts-qs:0.1.0 \u2190 local completed\nInvoking TypeScript Compiler on ts script sources\n  Created .atomist/editors/MyNewEditor.js\n  Created .atomist/editors/MyNewEditor.js.map\nProcessing script sources completed\nLoading mygroup:ts-qs:0.1.0 \u2190 local into runtime completed\nExecuting scenario MyNewEditor is added to your project by AddTypeScriptEditor...\n  Testing assertion fileContains(SimpleLiteral(hello.txt),SimpleLiteral(Hello, World!))\nRunning test scenarios in mygroup:ts-qs:0.1.0 \u2190 local completed\n\nSuccessfully executed 1 of 1 scenarios: Test SUCCESS   Any changes made by Rugs in a test are performed completely in\nmemory.  Tests do not alter actual project files on the file\nsystem.",
            "title": "Creating a TypeScript Rug editor"
        },
        {
            "location": "/user-guide/rug/typescript/#writing-your-first-typescript-rug-editor",
            "text": "Now that we have a sample TypeScript Rug editor in our project, we can\nchange it to do something useful.  Before we go changing the editor,\nwe should change the test to check for our desired behavior and\nestablish it is failing prior to implementing the feature.  Here are the default contents for the test.  scenario   MyNewEditor is added to your project by AddTypeScriptEditor  given     ArchiveRoot  when     MyNewEditor   input_parameter = \"the input_parameter value\"  then     fileContains   \"hello.txt\"   \"Hello, World!\"   Let\u2019s personalize the editor a bit and have the message in the hello.txt  file address someone by name.  We will change the test to\ncheck for this, and also update the test scenario description.  When\nwe are done, the test should look like this.  scenario   MyNewEditor adds a personalized greeting file to a project  given     ArchiveRoot  when     MyNewEditor   addressee = \"Mary\"  then     fileContains   \"hello.txt\"   \"Hello, Mary!\"   We run the test and make sure it is failing.  $ rug test\nResolving dependencies for mygroup:ts-qs:0.1.0 \u2190 local completed\nInvoking TypeScript Compiler on ts script sources\n  Created .atomist/editors/MyNewEditor.js\n  Created .atomist/editors/MyNewEditor.js.map\nProcessing script sources completed\nLoading mygroup:ts-qs:0.1.0 \u2190 local into runtime completed\nExecuting scenario MyNewEditor adds a personalized greeting file to a project...\nRunning test scenarios in mygroup:ts-qs:0.1.0 \u2190 local completed\n\n\u2192 Failed Scenarios\n  MyNewEditor adds a personalized greeting file to a project (1 of 1 assertions failed)\n    Failed Assertions\n       Editor failed due to missing parameters: Missing parameters: [input_parameter]: Parameters: name=, values=[Buffer(SimpleParameterValue(addressee,Mary))]\n\nUnsuccessfully executed 1 of 1 scenarios: Test FAILED  With our test  happily  failing, we can now update our editor to meet\nthe assertions of the test.  The original contents of the MyNewEditor.ts  file should look like this.  import   {   EditProject   }   from   '@atomist/rug/operations/ProjectEditor'  import   {   Project   }   from   '@atomist/rug/model/Core'  import   {   Pattern   }   from   '@atomist/rug/operations/RugOperation'  import   {   Editor ,   Parameter ,   Tags   }   from   '@atomist/rug/operations/Decorators'  @Editor ( \"MyNewEditor\" ,   \"This is my newest editor... in TypeScript!\" )  @Tags ( \"documentation\" )  class   MyNewEditor   implements   EditProject   { \n\n     @Parameter ({ \n         displayName :   \"Some Input\" , \n         description :   \"example of how to specify a parameter using decorators\" , \n         pattern :  Pattern.any , \n         validInput :   \"a description of the valid input\" , \n         minLength :  1 , \n         maxLength :  100 \n     }) \n     input_parameter :  string ; \n\n     edit ( project :  Project )   { \n         project . addFile ( \"hello.txt\" ,   \"Hello, World!\\n\"   +   this . input_parameter   +   \"\\n\" ); \n     }  }  export   const   myNewEditor   =   new   MyNewEditor ()   Walking through this editor the contents are:   Importing the Rug TypeScript typings  Declaring the editor using the  @Editor  decorator, passing in its name and description  Tagging the editor using the  @Tag  decorator to aid discoverability  Implementing the  EditProject  interface to enforce the  edit  function signature  Inside the class  Declaring parameters using the  @Parameter  decorator  Implementing the  edit  method    Finally, exporting an instance of your editor class   After making the edits to implement our desired functionality, our\neditor should look something like this.  import   {   EditProject   }   from   '@atomist/rug/operations/ProjectEditor'  import   {   Project   }   from   '@atomist/rug/model/Core'  import   {   Pattern   }   from   '@atomist/rug/operations/RugOperation'  import   {   Editor ,   Parameter ,   Tags   }   from   '@atomist/rug/operations/Decorators'  @Editor ( \"MyNewEditor\" ,   \"Adds a customized welcome file to a project\" )  @Tags ( \"documentation\" )  class   MyNewEditor   implements   EditProject   { \n\n     @Parameter ({ \n         displayName :   \"Greeting Addressee\" , \n         description :   \"name of person to whom the greeting should be addressed\" , \n         pattern :  Pattern.any , \n         validInput :   \"any valid string\" , \n         minLength :  1 , \n         maxLength :  100 \n     }) \n     addressee :  string ; \n\n     edit ( project :  Project )   { \n         project . addFile ( \"hello.txt\" ,   \"Hello, \"   +   this . addressee   +   \"!\\n\" ); \n     }  }  export   const   myNewEditor   =   new   MyNewEditor ()   We have updated the editor description, the parameter information, and\nthe content of the created  hello.txt  file.  We can now run our test to see if our changes produce the desired\nresult.  $ rug test\nResolving dependencies for mygroup:ts-qs:0.1.0 \u2190 local completed\nInvoking TypeScript Compiler on ts script sources\n  Created .atomist/editors/MyNewEditor.js.map\n  Created .atomist/editors/MyNewEditor.js\nProcessing script sources completed\nLoading mygroup:ts-qs:0.1.0 \u2190 local into runtime completed\nExecuting scenario MyNewEditor adds a personalized greeting file to a project...\n  Testing assertion fileContains(SimpleLiteral(hello.txt),SimpleLiteral(Hello, Mary!))\nRunning test scenarios in mygroup:ts-qs:0.1.0 \u2190 local completed\n\nSuccessfully executed 1 of 1 scenarios: Test SUCCESS  Success!  Congratulations, you have created your first TypeScript Rug!",
            "title": "Writing your first TypeScript Rug editor"
        },
        {
            "location": "/user-guide/rug/handlers/",
            "text": "Events are everywhere in the software development and operation\nprocess.  Our source code repositories generate events.  Our CI\nsystems generate events.  Our runtime platforms generate events.  Our\nservices generate events.  Our issue tracking systems generate events.\n\n\nAtomist believes that bringing all these events together so they can\nbe connected and acted upon provides tremendous promise for shipping\nbetter code faster.  The mechanism for realizing this promise is to\nautomate event responses using Rug event handlers.\n\n\nHandlers define automated responses to events. Each handler is a\nprogram in a familiar \n Turing-complete language.  Based on the\ncharacteristics of the event that occurred, the handler decides\nwhether and what action to take.\n\n\nA new issue was created?  Post that in the repository\u2019s chat channel\nand add buttons to the message that let people apply labels or claim\nthe issue without leaving chat.\n\n\nA developer submits a pull request in a library?  Find out whether it\nwill to impact a service that uses the library: create a branch in the\nservice, modify the code to update the dependency. The service build\ncompletes successfully?  Update the library\u2019s pull request, and tell\nthe developer all the news.\n\n\nA person in chat asks Atomist \u201cwhat did I do today?\u201d  Respond by\nlisting the issues they updated, the PRs they reviewed, and the\ncommits they pushed.\n\n\nA Basic Event Handler\n\u00b6\n\n\nThe following event handler responds when a tag is added to or deleted\nfrom an issue.  When this event occurs, the Atomist Bot sends a\nmessage to the repository\u2019s Slack channel informing people in the\nchannel about the tag.\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nimport\n \n{\nAtomist\n}\n \nfrom\n \n'@atomist/rug/operations/Handler'\n\n\nimport\n \n{\nTreeNode\n}\n \nfrom\n \n'@atomist/rug/tree/PathExpression'\n\n\ndeclare\n \nvar\n \natomist\n: \nAtomist\n\n\n\natomist\n.\non\n<\nTreeNode\n,\n \nTreeNode\n>\n(\n\"/Tag()\"\n,\n \nm\n \n=>\n \n{\n\n   \nlet\n \ntag\n \n=\n \nm\n.\nroot\n()\n\n   \natomist\n.\nmessageBuilder\n().\nregarding\n(\ntag\n).\nsend\n()\n\n\n})",
            "title": "Handlers"
        },
        {
            "location": "/user-guide/rug/handlers/#a-basic-event-handler",
            "text": "The following event handler responds when a tag is added to or deleted\nfrom an issue.  When this event occurs, the Atomist Bot sends a\nmessage to the repository\u2019s Slack channel informing people in the\nchannel about the tag.  1\n2\n3\n4\n5\n6\n7\n8 import   { Atomist }   from   '@atomist/rug/operations/Handler'  import   { TreeNode }   from   '@atomist/rug/tree/PathExpression'  declare   var   atomist :  Atomist  atomist . on < TreeNode ,   TreeNode > ( \"/Tag()\" ,   m   =>   { \n    let   tag   =   m . root () \n    atomist . messageBuilder (). regarding ( tag ). send ()  })",
            "title": "A Basic Event Handler"
        },
        {
            "location": "/user-guide/rug/commands/",
            "text": "Controlling communication and information flows is paramount to\neffective teams. Open Source projects have long been relying on chat\nto help them operate and coordinate contributors and project lifecycle.\n\nRecent modern chat solutions, which can integrate deeply in your ecosystem, have\nimproved on those foundations and proven to be fantastic hubs for teams to \ndrive automation with simple chat commands.\n\n\nWell-known scenarios drive a project\u2019s lifecycle, for instance cutting a new\nrelease, or rolling back a broken deployment. However, like other Rugs, commands\ncan also drive into the code of the project at the tip of a bot\u2019s interaction.\nIn other words, not only can you use Rug commands to list open issues on a\nproject but the team can also query the project\u2019s code or even run other Rugs\nagainst the project, all of this from the project\u2019s chat channel.\n\n\nAnatomy of a Command\n\u00b6\n\n\nRug commands are the interface to add new skills to the \nAtomist bot\n.\nThese commands are suitable for when you want to either query your project\nor perform an action from where your team gathers to pilot the project.\n\n\nDepending on their goal, Rug commands are stored either along side the project\nthey target or in a different project altogether when they are generic. In both\ncases however, Rug commands share the same approach as other Rugs. For the\npurpose of this documentation, we will assume our commands live in their own\nproject rather than in an existing project like thie documentation describes for\nRug generators or editors.\n\n\nBelow is the basic structure of a generic Rug project. Rather than the usual\n\n.atomist/editors\n directory, we have rather the \n.atomist/handlers\n directory\nwhere our Rug command script will live.\n\n\n~/workspace/team-handlers\n\n\n    \u251c\u2500\u2500 .atomist\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 .gitignore\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 handlers\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 GetLatestSpringProjectTag.ts\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 manifest.yml\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 package.json\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 tests\n\n\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 tsconfig.json\n\n\n    \u251c\u2500\u2500 CHANGELOG.md\n\n\n    \u251c\u2500\u2500 .gitignore\n\n\n    \u251c\u2500\u2500 LICENSE\n\n\n    \u2514\u2500\u2500 README.md\n\n\n\n\n\n\nThe remaining of this Rug follows the usual \nRug project\n structure.\n\n\nRug commands are one kind of Rug handlers. They handle commands coming from the \nAtomist bot. Let\u2019s see in the section a basic Rug command.\n\n\nA Basic Command\n\u00b6\n\n\nSuppose we are interested in querying the \nSpring\n project for the \nlatest tag of any of \nits published projects\n. This would be a \ntypical example of simple Rug command that we could run from the Atomist bot.\n\n\nHere is such a possible Rug command.\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\nimport\n \n{\n \nHandleResponse\n,\n \nHandleCommand\n,\n \nResponse\n,\n \nHandlerContext\n,\n\n         \nPlan\n,\n \nMessage\n \n}\n \nfrom\n \n'@atomist/rug/operations/Handlers'\n;\n\n\nimport\n \n{\n \nResponseHandler\n,\n \nParseJson\n,\n \nCommandHandler\n,\n \nParameter\n,\n \nTags\n,\n \n         \nIntent\n \n}\n \nfrom\n \n'@atomist/rug/operations/Decorators'\n;\n\n\nimport\n \n{\n \nPattern\n \n}\n \nfrom\n \n'@atomist/rug/operations/RugOperation'\n;\n\n\nimport\n \n{\n \nProject\n \n}\n \nfrom\n \n'@atomist/rug/model/Project'\n;\n\n\n\n@CommandHandler\n(\n\"GetLatestSpringProjectTag\"\n,\n\"Search for kitty snippets\"\n)\n\n\n@Tags\n(\n\"spring\"\n)\n\n\n@Intent\n(\n\"latest tag\"\n)\n\n\nexport\n \nclass\n \nGetLatestSpringProjectTag\n \nimplements\n \nHandleCommand\n \n{\n\n\n    \n@Parameter\n({\n\n        \ndescription\n:\n \n\"The name of a Spring repository in GitHub\"\n,\n\n        \npattern\n: \nPattern.any\n\n    \n})\n\n    \nrepo\n: \nstring\n;\n\n\n    \nhandle\n(\ncommand\n: \nHandlerContext\n)\n:\n \nPlan\n \n{\n\n        \nlet\n \nplan\n \n=\n \nnew\n \nPlan\n();\n\n\n        \nconst\n \nghUrl\n \n=\n \n`https://api.github.com/repos/spring-projects/\n${\nthis\n.\nrepo\n}\n/tags`\n;\n\n\n        \nplan\n.\nadd\n({\n\n            \ninstruction\n:\n \n{\n\n                \nname\n:\n \n\"http\"\n,\n\n                \nkind\n:\n \n\"execute\"\n,\n\n                \nparameters\n:\n \n{\n\n                    \nmethod\n:\n \n\"get\"\n,\n\n                    \nurl\n: \nghUrl\n\n                \n}\n\n            \n},\n\n            \nonSuccess\n:\n \n{\n \nkind\n:\n \n\"respond\"\n,\n \nname\n:\n \n\"FetchLatestTagInfo\"\n \n},\n\n            \nonError\n:\n \n{\n \nkind\n:\n \n\"respond\"\n,\n \nname\n:\n \n\"FetchedFailed\"\n \n}\n\n        \n});\n\n        \nreturn\n \nplan\n;\n\n    \n}\n\n\n}\n\n\nexport\n \nlet\n \ngetLatestSpringProjectTag\n \n=\n \nnew\n \nGetLatestSpringProjectTag\n();\n\n\n\n\n@ResponseHandler\n(\n\"FetchLatestTagInfo\"\n,\n \n\"Retrieves the latest tag information\"\n)\n\n\nexport\n \nclass\n \nFetchLatestTagInfo\n \nimplements\n \nHandleResponse\n<\nany\n>\n{\n\n\n    \nhandle\n(\n@ParseJson\n \nresponse\n: \nResponse\n<\nany\n>\n)\n:\n \nPlan\n \n{\n\n        \nlet\n \ntagUrl\n \n=\n \nresponse\n.\nbody\n()[\n0\n].\ncommit\n.\nurl\n;\n\n        \nlet\n \nplan\n \n=\n \nnew\n \nPlan\n();\n\n        \nplan\n.\nadd\n({\n\n            \ninstruction\n:\n \n{\n\n                \nname\n:\n \n\"http\"\n,\n\n                \nkind\n:\n \n\"execute\"\n,\n\n                \nparameters\n:\n \n{\n\n                    \nmethod\n:\n \n\"get\"\n,\n\n                    \nurl\n: \ntagUrl\n\n                \n}\n\n            \n},\n\n            \nonSuccess\n:\n \n{\n \nkind\n:\n \n\"respond\"\n,\n \nname\n:\n \n\"ShowTag\"\n \n},\n\n            \nonError\n:\n \n{\n \nkind\n:\n \n\"respond\"\n,\n \nname\n:\n \n\"FetchedFailed\"\n \n}\n\n        \n});\n\n        \nreturn\n \nplan\n;\n\n    \n}\n\n\n}\n\n\nexport\n \nlet\n \nfetchLatestTagInfo\n \n=\n \nnew\n \nFetchLatestTagInfo\n();\n\n\n\n\n@ResponseHandler\n(\n\"ShowTag\"\n,\n \n\"Prints our the latest tag information\"\n)\n\n\nexport\n \nclass\n \nShowTag\n \nimplements\n \nHandleResponse\n<\nany\n>\n{\n\n\n    \nhandle\n(\n@ParseJson\n \nresponse\n: \nResponse\n<\nany\n>\n)\n:\n \nMessage\n \n{\n\n        \nlet\n \nbody\n \n=\n \nresponse\n.\nbody\n();\n \n        \nreturn\n \nnew\n \nMessage\n(\n`{\n\n\n    \"attachments\": [\n\n\n        {\n\n\n            \"fallback\": \"\",\n\n\n            \"title\": \"Latest tag\",\n\n\n            \"title_link\": \"\n${\nbody\n.\nhtml_url\n}\n\",\n\n\n            \"fields\": [\n\n\n                {\n\n\n                    \"title\": \"Date\",\n\n\n                    \"value\": \"\n${\nbody\n.\ncommit\n.\ncommitter\n.\ndate\n}\n\",\n\n\n                    \"short\": true\n\n\n                },\n\n\n                {\n\n\n                    \"title\": \"Additions\",\n\n\n                    \"value\": \"\n${\nbody\n.\nstats\n.\nadditions\n}\n\",\n\n\n                    \"short\": true\n\n\n                },\n\n\n                {\n\n\n                    \"title\": \"Deletions\",\n\n\n                    \"value\": \"\n${\nbody\n.\nstats\n.\ndeletions\n}\n\",\n\n\n                    \"short\": true\n\n\n                },\n\n\n                {\n\n\n                    \"title\": \"Commit sha\",\n\n\n                    \"value\": \"\n${\nbody\n.\nsha\n}\n\",\n\n\n                    \"short\": false\n\n\n                },\n\n\n                {\n\n\n                    \"title\": \"Commit Message\",\n\n\n                    \"value\": \"\n${\nbody\n.\ncommit\n.\nmessage\n}\n\",\n\n\n                    \"short\": false\n\n\n                }\n\n\n            ]\n\n\n        }\n\n\n    ]\n\n\n}`\n);\n\n    \n}\n\n\n}\n\n\nexport\n \nlet\n \nshowTag\n \n=\n \nnew\n \nShowTag\n();\n\n\n\n\n@ResponseHandler\n(\n\"FetchedFailed\"\n,\n \n\"Prints our a nice message in case of error\"\n)\n\n\nexport\n \nclass\n \nFetchedFailed\n \nimplements\n \nHandleResponse\n<\nany\n>\n{\n\n\n    \nhandle\n(\nresponse\n: \nResponse\n<\nany\n>\n)\n \n:\n \nMessage\n \n{\n\n        \nlet\n \nmessage\n \n=\n \nresponse\n.\nbody\n();\n\n        \nreturn\n \nnew\n \nMessage\n(\n`Failed fetching tag information: \n${\nmessage\n}\n`\n);\n\n    \n}\n\n\n}\n\n\nexport\n \nlet\n \nfetchedFailed\n \n=\n \nnew\n \nFetchedFailed\n();\n\n\n\n\n\n\n\nThis is certainly longer than other Rugs seen so far but as it follows the \nsame programming model principles, it look familiar.\n\n\nThe first lines group the Rug typing imports which, as usual, provide interfaces\nand decorators to implement your Rug operations (lines 1\u20136). Here, the\nmain Rug operation is \nGetLatestSpringProjectTag\n. The following\nRug operations, \nFetchLatestTagInfo\n, \nShowTag\n and \nFetchedFailed\n support the main one as we will see below. They are\nnot expected to be called directly.\n\n\nWe therefore declare our command through a TypeScript \ndecorators\n \n(line 8). The first argument of the \n@CommandHandler\n decorator is the name of the command. This the public visible and discoverable name of the Rug. This name, along with the commands group and repository, form the fully-qualified name of the command. The second argument of the \n@CommandHandler\n decorator is a short description of the editor. The following line uses the \n@Tags\n decorator to apply some tags to our command so people can search for it more easily. Using the \n@Tags\n decorator is optional but highly recommended.\n\n\nA Rug command is associated to an intent an user sends when talking with the Atomist bot. This intent is described using the \n@Intent\n decorator (line 10). Whenever an user sends the \n@atomist latest tag\n message to the Atomist bot, the Rug runtime applies the \nGetLatestSpringProjectTag\n Rug command.\n\n\nWe then define the class which implements our command (line 11). A command \nimplements the \nHandleCommand\n interface. That interface requires the \nhandle\n(\ncommand\n: \nHandlerContext\n)\n:\n \nPlan\n method to be defined (line 19). It is convention for the command and the class that implements it to have the same name.\n\n\nRug commands can take parameters like other Rug operations to tune their output. This customization is achieved through parameters that your command must declare in the class via the \n@Parameter\n decorator (line 13). The decorated variable names your parameter. If you assign a value to that variable, it becomes the parameter\u2019s default value. The \n@Parameter\n decorator adds additional metadata via a single argument, a JavaScript object which properties are documented in the \nconventions\n. Though the only mandatory property is \npattern\n, in the case of Rug commands, it is highly recommended to also set \ndescription\n, \ndisplayName\n and \nvalidInput\n in order to help the user when invoking the command via the Atomist bot.\n\n\nThe \nhandle\n method takes a single argument, a\n\nHandlerContext\n object. That object gives you access to a \npath expression engine\n to query your project from the command. The method\nmust return either a \nPlan\n or \nMessage\n.\n\n\nLet\u2019s start by explaining \nMessage\n as it is the simpler. A message represents a set of presentable content and/or actions displayed to the user in responsing to invoking the command. To the bare minimum, a message is text content. By default, the message will be routed to the caller, from the place where the user issued the command. However, it is also possible to route to a different location. For instance:\n\n\nhandle\n(\nresponse\n: \nResponse\n<\nany\n>\n)\n:\n \nMessage\n \n{\n\n    \nreturn\n \nnew\n \nMessage\n(\n\"Hello there!\"\n);\n\n\n}\n\n\n\n\n\n\nNext, the message is sent to a different place by setting a Slack channel identifier (we assume a Slack integration here):\n\n\nhandle\n(\nresponse\n: \nResponse\n<\nany\n>\n)\n:\n \nMessage\n \n{\n\n    \nlet\n \nmessage\n: \nMessage\n \n=\n \nnew\n \nMessage\n(\n\"Hello from a different channel!\"\n);\n\n    \nmessage\n.\nchannelId\n \n=\n \n\"C024BY98L\"\n;\n\n    \nreturn\n \nmessage\n;\n\n\n}\n\n\n\n\n\n\nRug command can also return a \nPlan\n. A plan describes the actions to be taken by the Rug runtime on behalf of the command. Plans are composed of messages and/or instructions. The former are exactly as we describe above where instructions have the following properties:\n\n\n\n\nkind\n: the kind of instruction, one of \n\"generate\"\n \n|\n \n\"edit\"\n \n|\n \n\"review\"\n \n|\n \n\"execute\"\n \n|\n \n\"respond\"\n \n|\n \n\"command\"\n\n\nname\n: the name of the operation to apply\n\n\nparameters\n: an object mapping properties to values and passed, by the Rug runtime, to the operation being called\n\n\n\n\nTo make this a little more concrete, our only instruction is defined as:\n\n\n{\n\n    \nname\n:\n \n\"http\"\n,\n\n    \nkind\n:\n \n\"execute\"\n,\n\n    \nparameters\n:\n \n{\n\n        \nmethod\n:\n \n\"get\"\n,\n\n        \nurl\n: \ntagUrl\n\n    \n}\n\n\n}\n\n\n\n\n\n\nThis instruction describes a HTTP call where the Rug function to call, by the Rug runtime, to perform that call is named \n\"http\"\n. At runtime, Rug will look for a Rug function named that way and will call it, passing the given \nparameters\n to it. Here, we indicate the HTTP method is a \nGET\n as well as the URL to be addressed.\n\n\nFor other kinds, the definition looks similar but, in effect, a plan allows you to call any other Rug operations. This means, for example, that a command could perform a project\u2019s update or review at the tip of a conversation with the Atomist\u2019s bot.\n\n\n\n\nIt\u2019s all asynchronous\n\n\nIt is important to appreciate that because Rug commands describe a plan, the actions declared in that plan are executed asynchronously from the call to your command handler method. In other words, plans are just data the Rug runtime knows how to interpret but your handler cannot invoke those actions directly. Do not make assumption regarding when instructions in a plan will be executed, although it is fair to say that the Atomist platform will do its best to apply them as soon as possible.\n\n\n\n\nPlans can have as many interleaved instructions and messages as they need to.\n\n\nFinally, we can attach completion (line 33) and error (line 34) handlers to each instruction to process the instruction\u2019s execution result. Here, we indicate we want to process the response\u2019s content of our HTTP call when it succeeds but also deal with errors when they occur, (for instance when the HTTP call returned a 40x-class status code).\n\n\nThe \nonSuccess\n and \nonError\n properties expect themselves an instruction definition. Here, we tell the Rug runtime to execute the response handlers defined below the Rug command.\n\n\nRug response handlers, are defined with the \nResponseHandler\n decorator and the class must implement the \nhandle\n(\nresponse\n: \nResponse\n<\nT\n>\n)\n:\n \nPlan\n method of the \nHandleResponse\n<\nT\n>\n interface. When the handler receives a JSON payload, you can benefit form an automatic parsing, in that case, your method declaration must look like this: \nhandle\n(\n@ParseJson\n \nresponse\n: \nResponse\n<\nT\n>\n)\n:\n \nPlan\n. \n\n\nA response handler returns a \nMessage\n or \nPlan\n much like a Rug command. Here we can see for instance that the \nFetchLatestTagInfo\n response handler (line 43) instructs the Rug runtime to perform another HTTP call, calling the \nShowTag\n response handler (line 57) to process its response. In other words, here we demonstrate how you can chain plans. The \nShowTag\n response handler (line 67) simply formats a final \nMessage\n returned to the user.",
            "title": "Commands"
        },
        {
            "location": "/user-guide/rug/commands/#anatomy-of-a-command",
            "text": "Rug commands are the interface to add new skills to the  Atomist bot .\nThese commands are suitable for when you want to either query your project\nor perform an action from where your team gathers to pilot the project.  Depending on their goal, Rug commands are stored either along side the project\nthey target or in a different project altogether when they are generic. In both\ncases however, Rug commands share the same approach as other Rugs. For the\npurpose of this documentation, we will assume our commands live in their own\nproject rather than in an existing project like thie documentation describes for\nRug generators or editors.  Below is the basic structure of a generic Rug project. Rather than the usual .atomist/editors  directory, we have rather the  .atomist/handlers  directory\nwhere our Rug command script will live.  ~/workspace/team-handlers      \u251c\u2500\u2500 .atomist      \u2502\u00a0\u00a0 \u251c\u2500\u2500 .gitignore      \u2502\u00a0\u00a0 \u251c\u2500\u2500 handlers      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 GetLatestSpringProjectTag.ts      \u2502\u00a0\u00a0 \u251c\u2500\u2500 manifest.yml      \u2502\u00a0\u00a0 \u251c\u2500\u2500 package.json      \u2502\u00a0\u00a0 \u251c\u2500\u2500 tests      \u2502\u00a0\u00a0 \u2514\u2500\u2500 tsconfig.json      \u251c\u2500\u2500 CHANGELOG.md      \u251c\u2500\u2500 .gitignore      \u251c\u2500\u2500 LICENSE      \u2514\u2500\u2500 README.md   The remaining of this Rug follows the usual  Rug project  structure.  Rug commands are one kind of Rug handlers. They handle commands coming from the \nAtomist bot. Let\u2019s see in the section a basic Rug command.",
            "title": "Anatomy of a Command"
        },
        {
            "location": "/user-guide/rug/commands/#a-basic-command",
            "text": "Suppose we are interested in querying the  Spring  project for the \nlatest tag of any of  its published projects . This would be a \ntypical example of simple Rug command that we could run from the Atomist bot.  Here is such a possible Rug command.    1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120 import   {   HandleResponse ,   HandleCommand ,   Response ,   HandlerContext , \n          Plan ,   Message   }   from   '@atomist/rug/operations/Handlers' ;  import   {   ResponseHandler ,   ParseJson ,   CommandHandler ,   Parameter ,   Tags ,  \n          Intent   }   from   '@atomist/rug/operations/Decorators' ;  import   {   Pattern   }   from   '@atomist/rug/operations/RugOperation' ;  import   {   Project   }   from   '@atomist/rug/model/Project' ;  @CommandHandler ( \"GetLatestSpringProjectTag\" , \"Search for kitty snippets\" )  @Tags ( \"spring\" )  @Intent ( \"latest tag\" )  export   class   GetLatestSpringProjectTag   implements   HandleCommand   { \n\n     @Parameter ({ \n         description :   \"The name of a Spring repository in GitHub\" , \n         pattern :  Pattern.any \n     }) \n     repo :  string ; \n\n     handle ( command :  HandlerContext ) :   Plan   { \n         let   plan   =   new   Plan (); \n\n         const   ghUrl   =   `https://api.github.com/repos/spring-projects/ ${ this . repo } /tags` ; \n\n         plan . add ({ \n             instruction :   { \n                 name :   \"http\" , \n                 kind :   \"execute\" , \n                 parameters :   { \n                     method :   \"get\" , \n                     url :  ghUrl \n                 } \n             }, \n             onSuccess :   {   kind :   \"respond\" ,   name :   \"FetchLatestTagInfo\"   }, \n             onError :   {   kind :   \"respond\" ,   name :   \"FetchedFailed\"   } \n         }); \n         return   plan ; \n     }  }  export   let   getLatestSpringProjectTag   =   new   GetLatestSpringProjectTag ();  @ResponseHandler ( \"FetchLatestTagInfo\" ,   \"Retrieves the latest tag information\" )  export   class   FetchLatestTagInfo   implements   HandleResponse < any > { \n\n     handle ( @ParseJson   response :  Response < any > ) :   Plan   { \n         let   tagUrl   =   response . body ()[ 0 ]. commit . url ; \n         let   plan   =   new   Plan (); \n         plan . add ({ \n             instruction :   { \n                 name :   \"http\" , \n                 kind :   \"execute\" , \n                 parameters :   { \n                     method :   \"get\" , \n                     url :  tagUrl \n                 } \n             }, \n             onSuccess :   {   kind :   \"respond\" ,   name :   \"ShowTag\"   }, \n             onError :   {   kind :   \"respond\" ,   name :   \"FetchedFailed\"   } \n         }); \n         return   plan ; \n     }  }  export   let   fetchLatestTagInfo   =   new   FetchLatestTagInfo ();  @ResponseHandler ( \"ShowTag\" ,   \"Prints our the latest tag information\" )  export   class   ShowTag   implements   HandleResponse < any > { \n\n     handle ( @ParseJson   response :  Response < any > ) :   Message   { \n         let   body   =   response . body ();  \n         return   new   Message ( `{      \"attachments\": [          {              \"fallback\": \"\",              \"title\": \"Latest tag\",              \"title_link\": \" ${ body . html_url } \",              \"fields\": [                  {                      \"title\": \"Date\",                      \"value\": \" ${ body . commit . committer . date } \",                      \"short\": true                  },                  {                      \"title\": \"Additions\",                      \"value\": \" ${ body . stats . additions } \",                      \"short\": true                  },                  {                      \"title\": \"Deletions\",                      \"value\": \" ${ body . stats . deletions } \",                      \"short\": true                  },                  {                      \"title\": \"Commit sha\",                      \"value\": \" ${ body . sha } \",                      \"short\": false                  },                  {                      \"title\": \"Commit Message\",                      \"value\": \" ${ body . commit . message } \",                      \"short\": false                  }              ]          }      ]  }` ); \n     }  }  export   let   showTag   =   new   ShowTag ();  @ResponseHandler ( \"FetchedFailed\" ,   \"Prints our a nice message in case of error\" )  export   class   FetchedFailed   implements   HandleResponse < any > { \n\n     handle ( response :  Response < any > )   :   Message   { \n         let   message   =   response . body (); \n         return   new   Message ( `Failed fetching tag information:  ${ message } ` ); \n     }  }  export   let   fetchedFailed   =   new   FetchedFailed ();    This is certainly longer than other Rugs seen so far but as it follows the \nsame programming model principles, it look familiar.  The first lines group the Rug typing imports which, as usual, provide interfaces\nand decorators to implement your Rug operations (lines 1\u20136). Here, the\nmain Rug operation is  GetLatestSpringProjectTag . The following\nRug operations,  FetchLatestTagInfo ,  ShowTag  and  FetchedFailed  support the main one as we will see below. They are\nnot expected to be called directly.  We therefore declare our command through a TypeScript  decorators  \n(line 8). The first argument of the  @CommandHandler  decorator is the name of the command. This the public visible and discoverable name of the Rug. This name, along with the commands group and repository, form the fully-qualified name of the command. The second argument of the  @CommandHandler  decorator is a short description of the editor. The following line uses the  @Tags  decorator to apply some tags to our command so people can search for it more easily. Using the  @Tags  decorator is optional but highly recommended.  A Rug command is associated to an intent an user sends when talking with the Atomist bot. This intent is described using the  @Intent  decorator (line 10). Whenever an user sends the  @atomist latest tag  message to the Atomist bot, the Rug runtime applies the  GetLatestSpringProjectTag  Rug command.  We then define the class which implements our command (line 11). A command \nimplements the  HandleCommand  interface. That interface requires the  handle ( command :  HandlerContext ) :   Plan  method to be defined (line 19). It is convention for the command and the class that implements it to have the same name.  Rug commands can take parameters like other Rug operations to tune their output. This customization is achieved through parameters that your command must declare in the class via the  @Parameter  decorator (line 13). The decorated variable names your parameter. If you assign a value to that variable, it becomes the parameter\u2019s default value. The  @Parameter  decorator adds additional metadata via a single argument, a JavaScript object which properties are documented in the  conventions . Though the only mandatory property is  pattern , in the case of Rug commands, it is highly recommended to also set  description ,  displayName  and  validInput  in order to help the user when invoking the command via the Atomist bot.  The  handle  method takes a single argument, a HandlerContext  object. That object gives you access to a  path expression engine  to query your project from the command. The method\nmust return either a  Plan  or  Message .  Let\u2019s start by explaining  Message  as it is the simpler. A message represents a set of presentable content and/or actions displayed to the user in responsing to invoking the command. To the bare minimum, a message is text content. By default, the message will be routed to the caller, from the place where the user issued the command. However, it is also possible to route to a different location. For instance:  handle ( response :  Response < any > ) :   Message   { \n     return   new   Message ( \"Hello there!\" );  }   Next, the message is sent to a different place by setting a Slack channel identifier (we assume a Slack integration here):  handle ( response :  Response < any > ) :   Message   { \n     let   message :  Message   =   new   Message ( \"Hello from a different channel!\" ); \n     message . channelId   =   \"C024BY98L\" ; \n     return   message ;  }   Rug command can also return a  Plan . A plan describes the actions to be taken by the Rug runtime on behalf of the command. Plans are composed of messages and/or instructions. The former are exactly as we describe above where instructions have the following properties:   kind : the kind of instruction, one of  \"generate\"   |   \"edit\"   |   \"review\"   |   \"execute\"   |   \"respond\"   |   \"command\"  name : the name of the operation to apply  parameters : an object mapping properties to values and passed, by the Rug runtime, to the operation being called   To make this a little more concrete, our only instruction is defined as:  { \n     name :   \"http\" , \n     kind :   \"execute\" , \n     parameters :   { \n         method :   \"get\" , \n         url :  tagUrl \n     }  }   This instruction describes a HTTP call where the Rug function to call, by the Rug runtime, to perform that call is named  \"http\" . At runtime, Rug will look for a Rug function named that way and will call it, passing the given  parameters  to it. Here, we indicate the HTTP method is a  GET  as well as the URL to be addressed.  For other kinds, the definition looks similar but, in effect, a plan allows you to call any other Rug operations. This means, for example, that a command could perform a project\u2019s update or review at the tip of a conversation with the Atomist\u2019s bot.   It\u2019s all asynchronous  It is important to appreciate that because Rug commands describe a plan, the actions declared in that plan are executed asynchronously from the call to your command handler method. In other words, plans are just data the Rug runtime knows how to interpret but your handler cannot invoke those actions directly. Do not make assumption regarding when instructions in a plan will be executed, although it is fair to say that the Atomist platform will do its best to apply them as soon as possible.   Plans can have as many interleaved instructions and messages as they need to.  Finally, we can attach completion (line 33) and error (line 34) handlers to each instruction to process the instruction\u2019s execution result. Here, we indicate we want to process the response\u2019s content of our HTTP call when it succeeds but also deal with errors when they occur, (for instance when the HTTP call returned a 40x-class status code).  The  onSuccess  and  onError  properties expect themselves an instruction definition. Here, we tell the Rug runtime to execute the response handlers defined below the Rug command.  Rug response handlers, are defined with the  ResponseHandler  decorator and the class must implement the  handle ( response :  Response < T > ) :   Plan  method of the  HandleResponse < T >  interface. When the handler receives a JSON payload, you can benefit form an automatic parsing, in that case, your method declaration must look like this:  handle ( @ParseJson   response :  Response < T > ) :   Plan .   A response handler returns a  Message  or  Plan  much like a Rug command. Here we can see for instance that the  FetchLatestTagInfo  response handler (line 43) instructs the Rug runtime to perform another HTTP call, calling the  ShowTag  response handler (line 57) to process its response. In other words, here we demonstrate how you can chain plans. The  ShowTag  response handler (line 67) simply formats a final  Message  returned to the user.",
            "title": "A Basic Command"
        },
        {
            "location": "/user-guide/rug/editors/",
            "text": "The most common task performed on a daily basis is to change the code of a\nproject. Those updates can target a single file but can also refer to many\nresources.\n\n\nRug editors automate updates, from the simplest to most complex.\n\n\nAnatomy of an Editor\n\u00b6\n\n\nAssume our team has an existing Spring Boot Rest project cloned or copied/pasted\nfrom in other projects. These manual actions are brittle at best and usually\nends up with team members wondering what they did wrong. \n\n\nLet\u2019s suppose however that project is already a Rug project, it would still\nbe a running Spring Boot project in its own right. Here is such a project:\n\n\n~/workspace/spring-boot-rest-basic\n\n\n    \u251c\u2500\u2500 .atomist\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 editors\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 NewSpringBootService.ts\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 .gitignore\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 manifest.yml\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 package.json\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 tests\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 project\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 NewSpringBootService.feature\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 \u2514\u2500\u2500 Steps.ts\n\n\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 tsconfig.json\n\n\n    \u251c\u2500\u2500 .atomist.yml\n\n\n    \u251c\u2500\u2500 .gitignore\n\n\n    \u251c\u2500\u2500 pom.xml\n\n\n    \u251c\u2500\u2500 .project\n\n\n    \u251c\u2500\u2500 README.md\n\n\n    \u251c\u2500\u2500 src\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 main\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 company\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 HomeController.java\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 MyRestServiceApplication.java\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 MyRestServiceConfiguration.java\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 application.properties\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 logback.xml\n\n\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 test\n\n\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 java\n\n\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 com\n\n\n    \u2502\u00a0\u00a0             \u2514\u2500\u2500 company\n\n\n    \u2502\u00a0\u00a0                 \u251c\u2500\u2500 MyRestServiceApplicationTests.java\n\n\n    \u2502\u00a0\u00a0                 \u251c\u2500\u2500 MyRestServiceOutOfContainerIntegrationTests.java\n\n\n    \u2502\u00a0\u00a0                 \u2514\u2500\u2500 MyRestServiceWebIntegrationTests.java\n\n\n    \u2514\u2500\u2500 .travis.yml\n\n\n\n\n\n\nHowever, rather than copying bits and pieces, the team could codify the \ndevelopment automation tasks into Rug editors that could be tested and \nevolved as the team would need it.\n\n\nEditors live in the \n.atomist/editors\n directory and their tests in the \n\n.atomist/tests\n directory. The \nNewSpringBootService.ts\n is the generator from\nthe \nRug generator section\n, editors live alongside it deminstrating we can \ncodify not only the inception of a project but its evolution as well.\n\n\nLet\u2019s go through one of those Rug editors in the next section.\n\n\nA Basic Editor\n\u00b6\n\n\nLet\u2019s suppose we need to automate the task of adding a controller to a Spring\nBoot service. That controller will respond to requests for the \n/calendar\n\nendpoint.\n\n\nBefore we can dive into the editor itself, let\u2019s review what\u2019s needed here:\n\n\n\n\nAdd a new class under \nsrc/main/java/com/company\n\n\nDecorate that class with the \n@RestController\n and \n  \n@RequestMapping\n decorators\n\n\nIndicate the endpoint at which this controller takes place: \n/calendar\n\n\n\n\nThese tasks are what we are going to encode in a Rug editor.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\nimport\n \n{\n \nEditProject\n \n}\n \nfrom\n \n'@atomist/rug/operations/ProjectEditor'\n;\n\n\nimport\n \n{\n \nEditor\n,\n \nParameter\n,\n \nTags\n \n}\n \nfrom\n \n'@atomist/rug/operations/Decorators'\n;\n\n\nimport\n \n{\n \nPattern\n \n}\n \nfrom\n \n'@atomist/rug/operations/RugOperation'\n;\n\n\nimport\n \n{\n \nProject\n \n}\n \nfrom\n \n'@atomist/rug/model/Project'\n;\n\n\n\n@Editor\n(\n\"AddSpringBootRestController\"\n,\n \n\"adds a new REST controller to a Spring Boot project\"\n)\n\n\n@Tags\n(\n\"spring\"\n,\n \n\"spring boot\"\n,\n \n\"rest\"\n)\n\n\nexport\n \nclass\n \nAddSpringBootRestController\n \nimplements\n \nEditProject\n \n{\n\n\n    \n@Parameter\n({\n\n        \ndisplayName\n:\n \n\"Class Name\"\n,\n\n        \ndescription\n:\n \n\"name for the controller class\"\n,\n\n        \npattern\n: \nPattern.java_class\n,\n\n        \nvalidInput\n:\n \n\"a valid Java class name\"\n,\n\n        \nminLength\n: \n1\n,\n\n        \nmaxLength\n: \n50\n\n    \n})\n\n    \ncontroller_class_name\n: \nstring\n;\n\n\n    \n@Parameter\n({\n\n        \ndisplayName\n:\n \n\"Path at which the request will be served\"\n,\n\n        \ndescription\n:\n \n\"REST endpoint\"\n,\n\n        \npattern\n: \nPattern.any\n,\n\n        \nvalidInput\n:\n \n\"a valid HTTP path\"\n,\n\n        \nminLength\n: \n1\n,\n\n    \n})\n\n    \nendpoint\n: \nstring\n;\n\n\n    \nedit\n(\nproject\n: \nProject\n)\n \n{\n\n\n        \nconst\n \nrawJavaFileContent\n \n=\n \n`package com.company;\n\n\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n\nimport org.springframework.web.bind.annotation.RestController;\n\n\n\n@RestController\n\n\n@RequestMapping(value=\"\n${\nthis\n.\nendpoint\n}\n\")\n\n\npublic class \n${\nthis\n.\ncontroller_class_name\n}\nController {\n\n\n}`\n;\n\n\n        \nproject\n.\naddFile\n(\n`src/main/java/com/company/\n${\nthis\n.\ncontroller_class_name\n}\nController.java`\n,\n \nrawJavaFileContent\n);\n\n    \n}\n\n\n}\n\n\nexport\n \nconst\n \naddSpringBootRestController\n \n=\n \nnew\n \nAddSpringBootRestController\n();\n\n\n\n\n\n\n\nThe first few lines group the Rug typings our script will be using throughout \n(lines 1\u20134). Next, we declare our editor through TypeScript \ndecorators\n \n(line 6). The first argument of the \n@Editor\n decorator is the name \nof the editor. This the public visible and discoverable name of the Rug. This \nname, along with the editors group and repository, form the fully-qualified name \nof the editor. The second argument of the \n@Editor\n decorator is a \nshort description of the editor. The following line uses the \n\n@Tags\n decorator to apply some tags to our editor so people can \nsearch for it more easily. Using the \n@Tags\n decorator is optional \nbut highly recommended.\n\n\nWe then define the class which implements our editor (line 8). An editor \nimplements the \nEditProject\n interface. That interface requires the \n\nedit\n(\nProject\n)\n method to be defined (line 28). It is convention \nfor the editor and the class that implements it to have the same name.\n\n\nYou will likely want to customize your Rugs\u2019 input to tune their output \naccording to user-supplied values. Such customization is achieved through \nparameters that your editor must declare in the class via the \n\n@Parameter\n decorator (lines 10, 16 and 22). This decorator \nprovides all the metadata of the parameter whereas the decorated variable \ndeclaration provides its name and default value, if any. The \n\n@Parameter\n decorator accepts a single argument, a JavaScript \nobject. That object accepts \nproperties\n documented in the \n[conventions][rugconv] but, only the \npattern\n property is required. A pattern \nis an \nanchored\n regular expression that validates the input. Here we rely on \nthe \nPattern\n.\nany\n and \nPattern\n.\njava_class\n patterns\nbundled by Atomist in the TypeScript dependencies.\n\n\nThe \nedit\n method takes a single argument, a\n\nProject\n object. That object gives you access to the entire \nstructure and content of the project your editor is applied to. Use it to access\nand update the content of any resource in that project according to the goal of\nyour editor. You have the full power of TypeScript and the Rug programming model \nand [language extensions][langext] to achieve this.\n\n\nAs we can see, in this example, we simply create the content of the controller\nclass customizing it from the parameters before saving that content in the\nappropriate file in the project.\n\n\n\n\nTip\n\n\nIn a real Rug editor, you would want to also parameterize the package\npath as your users may have changed it in their own project.\n\n\n\n\nA Rug should always be accompanied by one or more \ntests\n. Here, this is what\na basic test could look like. First the feature descriving the test scenario\nfor that editor:\n\n\nFeature:\n Add a new REST Controller to a Spring Boot project\n\n\n\nScenario:\n A new controller class should be added\n\n\n Given \nan empty project\n\n\n \nWhen \nadding a new controller\n\n\n \nThen \nthe controller class should be created \n\n\n \nThen \nthe controller class has the supplied name\n\n\n \nThen \nthe controller class has the supplied endpoint\n\n\n\n\n\n\nThe implementation of such test goes into \n.atomist/tests/Steps.ts\n:\n\n\nimport\n \n{\n \nGiven\n,\n \nWhen\n,\n \nThen\n,\n \nProjectScenarioWorld\n \n}\n \nfrom\n \n\"@atomist/rug/test/project/Core\"\n;\n\n\nimport\n \n{\n \nResult\n \n}\n \nfrom\n \n\"@atomist/rug/test/Result\"\n;\n\n\nimport\n \n{\n \nProject\n \n}\n \nfrom\n \n\"@atomist/rug/model/Project\"\n;\n\n\n\nWhen\n(\n\"adding a new controller\"\n,\n \n(\np\n: \nProject\n,\n \nworld\n: \nProjectScenarioWorld\n)\n \n=>\n \n{\n\n  \nlet\n \ngenerator\n \n=\n \nworld\n.\ngenerator\n(\n\"NewSpringBootService\"\n);\n\n  \nworld\n.\ngenerateWith\n(\ngenerator\n,\n \n{\n\"service_class_name\"\n:\n \n\"CalendarService\"\n});\n\n\n  \nlet\n \neditor\n \n=\n \nworld\n.\neditor\n(\n\"AddSpringBootRestController\"\n);\n\n  \nworld\n.\neditWith\n(\neditor\n,\n \n{\n'endpoint'\n:\n \n'/calendar'\n,\n \n'controller_class_name'\n:\n \n'Calendar'\n})\n\n\n});\n\n\n\nThen\n(\n\"the controller class should be created\"\n,\n \n(\np\n: \nProject\n)\n \n=>\n \n    \np\n.\nfileExists\n(\n\"src/main/java/com/company/CalendarController.java\"\n)\n\n\n);\n\n\nThen\n(\n\"the controller class has the supplied name\"\n,\n \n(\np\n: \nProject\n)\n \n=>\n \n    \np\n.\nfindFile\n(\n\"src/main/java/com/company/CalendarController.java\"\n).\ncontains\n(\n\"CalendarController\"\n)\n\n\n);\n\n\nThen\n(\n\"the controller class has the supplied endpoint\"\n,\n \n(\np\n: \nProject\n)\n \n=>\n \n    \np\n.\nfindFile\n(\n\"src/main/java/com/company/CalendarController.java\"\n).\ncontains\n(\n\"/calendar\"\n)\n\n\n);\n\n\n\n\n\n\nSuch a test should pass when executed:\n\n\n$\n rug \ntest\n\n\nResolving dependencies for com.company.rugs:spring-boot-service:0.13.0:local completed\n\n\nInvoking TypeScript Compiler on ts script sources                                                                                                                                                                \n\n\n  Created .atomist/tests/Steps.js.map                                                                                                                                                                            \n\n\n  Created .atomist/tests/Steps.js                                                                                                                                                                                \n\n\n  Created .atomist/editors/AddSpringBootRestController.js                                                                                                                                                        \n\n\n  Created .atomist/editors/AddSpringBootRestController.js.map                                                                                                                                                    \n\n\n  Created .atomist/editors/NewSpringBootService.js                                                                                                                                                               \n\n\n  Created .atomist/editors/NewSpringBootService.js.map                                                                                                                                                           \n\n\nProcessing script sources completed\n\n\nLoading com.company.rugs:spring-boot-service:0.13.0:local completed\n\n\n  Executing feature Add a new REST Controller to a Spring Boot project                                                                                                                                          \n\n\n    Executing test scenario A new controller class should be added                                                                                                                                              \n\n\n  Creating project_name                                                                                                                                                                                         \n\n\n  Executing feature Creating new Spring Rest Service projects                                                                                                                                                   \n\n\n    Executing test scenario A default Spring Rest project structure should be generated                                                                                                                         \n\n\n  Creating project_name                                                                                                                                                                                         \n\n\nRunning tests in com.company.rugs:spring-boot-service:0.13.0:local completed\n\n\n\nSuccessfully executed 2 of 2 tests: Test SUCCESS\n\n\n\n\n\n\nAlthough this editor is useful, if we stopped there, its users would still\nhave to implement the REST endpoints in that controller by hand. As Atomist\ncan navigate code as we much as filesystem, we certainly can add a new editor\nthat does just that. Here such an editor:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\nimport\n \n{\n \nEditProject\n \n}\n \nfrom\n \n'@atomist/rug/operations/ProjectEditor'\n;\n\n\nimport\n \n{\n \nEditor\n,\n \nParameter\n,\n \nTags\n \n}\n \nfrom\n \n'@atomist/rug/operations/Decorators'\n;\n\n\nimport\n \n{\n \nPattern\n \n}\n \nfrom\n \n'@atomist/rug/operations/RugOperation'\n;\n\n\nimport\n \n{\n \nProject\n \n}\n \nfrom\n \n'@atomist/rug/model/Project'\n;\n\n\nimport\n \n{\n \nPathExpressionEngine\n,\n \nTextTreeNode\n \n}\n \nfrom\n \n'@atomist/rug/tree/PathExpression'\n;\n\n\n\n@Editor\n(\n\"AddSpringBootRestControllerRequestMapping\"\n,\n \n\"adds a new endpoint mapping to a REST controller\"\n)\n\n\n@Tags\n(\n\"spring\"\n,\n \n\"spring boot\"\n,\n \n\"rest\"\n)\n\n\nexport\n \nclass\n \nAddSpringBootRestControllerRequestMapping\n \nimplements\n \nEditProject\n \n{\n\n\n    \n@Parameter\n({\n\n        \ndisplayName\n:\n \n\"Controller Name\"\n,\n\n        \ndescription\n:\n \n\"name for the controller class\"\n,\n\n        \npattern\n: \nPattern.java_class\n,\n\n        \nvalidInput\n:\n \n\"a valid Java class name\"\n,\n\n        \nminLength\n: \n1\n,\n\n        \nmaxLength\n: \n50\n\n    \n})\n\n    \ncontroller_name\n: \nstring\n;\n\n\n    \n@Parameter\n({\n\n        \ndisplayName\n:\n \n\"Method Name\"\n,\n\n        \ndescription\n:\n \n\"name for the method to add\"\n,\n\n        \npattern\n: \nPattern.java_identifier\n,\n\n        \nvalidInput\n:\n \n\"a valid Java method name\"\n,\n\n        \nminLength\n: \n1\n,\n\n        \nmaxLength\n: \n50\n\n    \n})\n\n    \nmethod_name\n: \nstring\n;\n\n\n    \n@Parameter\n({\n\n        \ndisplayName\n:\n \n\"Path at which the request will be served under the controller's endpoint\"\n,\n\n        \ndescription\n:\n \n\"REST endpoint\"\n,\n\n        \npattern\n: \nPattern.any\n,\n\n        \nvalidInput\n:\n \n\"a valid HTTP path\"\n,\n\n        \nminLength\n: \n1\n,\n\n    \n})\n\n    \nendpoint\n: \nstring\n;\n\n\n    \nedit\n(\nproject\n: \nProject\n)\n \n{\n\n        \nlet\n \neng\n: \nPathExpressionEngine\n \n=\n \nproject\n.\ncontext\n().\npathExpressionEngine\n();\n\n\n        \neng\n.\nwith\n<\nTextTreeNode\n>\n(\nproject\n,\n \n`/src//File()[@name=\"\n${\nthis\n.\ncontroller_name\n}\n.java\"]/JavaFile()//classDeclaration`\n,\n \nf\n \n=>\n \n{\n\n            \nf\n.\nupdate\n(\n`@RequestMapping(value=\"/\n${\nthis\n.\nendpoint\n}\n\", method=RequestMethod.GET)\n\n\n    public String \n${\nthis\n.\nmethod_name\n}\n() {\n\n\n        throw new UnsupportedOperationException(\"No implemented\");\n\n\n    }`\n);\n\n        \n});\n\n    \n}\n\n\n}\n\n\nexport\n \nconst\n \naddSpringBootRestControllerRequestMapping\n \n=\n \nnew\n \nAddSpringBootRestControllerRequestMapping\n();\n\n\n\n\n\n\n\nThis editor follows the same structure as explained earlier, it\u2019s interesting\npart is its body which demonstrates the power of \npath expressions\n to\nquery note the filesystem but code structures as well. Let\u2019s deconstruct the\npath expression declared here:\n\n\n`/src//File()[@name=\"\n${\nthis\n.\ncontroller_name\n}\n.java\"]/JavaFile()//classDeclaration`\n\n\n\n\n\n\nStarting from the \nsrc\n top-level directory of the project, we search for the\nJava file the user targets via the editor\u2019s parameter \n\ncontroller_name\n. Once that file is found, we inform the Rug \nruntime to switch to parsing that file, using the \nJavaFile()\n language \nextension, so we can navigate its content through an AST-based tree model. The \n\n//classDeclaration\n segment tells the expression engine to look for all classes \nin that tree. Since we are in a Java file, we retrieve the only top-level class \nit contains. \n\n\n\n\nANTLR to the rescue\n\n\nThe Rug runtime relies on well-known \nANTLR grammars\n to parse \nlanguages like Java, C# or Python. The \n//classDeclaration\n segment is a \ndirect rule of the \nJava8 grammar\n. You do not need to install \nANTLR as it is provided by the Rug runtime.\n\n\n\n\nOnce we have found the class we are interested in updating, we can indeed add\nthe method\u2019s definition as per the user-supplied parameters. This changes is\nautomatically saved to disk and our class is now updated with the appropriate\nmethod.\n\n\nWe obviously tested that editor as explained above through a BDD feature and\nscenario which steps are implemented in \n.atomist/tests/Steps.ts\n.\n\n\nFeature:\n Add a new endpoint to a REST Controller in a Spring Boot project\n\n\n\nScenario:\n A new endpoint meyhod should be added\n\n\n Given \nan empty project\n\n\n \nWhen \nadding a new endpoint to a controller\n\n\n \nThen \nthe endpoint method should be created in the controller class\n\n\n\n\n\n\nimport\n \n{\n \nGiven\n,\n \nWhen\n,\n \nThen\n,\n \nProjectScenarioWorld\n \n}\n \nfrom\n \n\"@atomist/rug/test/project/Core\"\n;\n\n\nimport\n \n{\n \nResult\n \n}\n \nfrom\n \n\"@atomist/rug/test/Result\"\n;\n\n\nimport\n \n{\n \nProject\n \n}\n \nfrom\n \n\"@atomist/rug/model/Project\"\n;\n\n\nimport\n \n{\n \nFile\n \n}\n \nfrom\n \n\"@atomist/rug/model/File\"\n;\n\n\n \nWhen\n(\n\"adding a new endpoint to a controller\"\n,\n \n(\np\n: \nProject\n,\n \nworld\n: \nProjectScenarioWorld\n)\n \n=>\n \n{\n\n  \nlet\n \ngenerator\n \n=\n \nworld\n.\ngenerator\n(\n\"NewSpringBootService\"\n);\n\n  \nworld\n.\ngenerateWith\n(\ngenerator\n,\n \n{\n\"service_class_name\"\n:\n \n\"CalendarService\"\n});\n\n\n  \nlet\n \ncontroller\n \n=\n \nworld\n.\neditor\n(\n\"AddSpringBootRestController\"\n);\n\n  \nworld\n.\neditWith\n(\ncontroller\n,\n \n{\n'endpoint'\n:\n \n'/calendar'\n,\n \n'controller_class_name'\n:\n \n'Calendar'\n})\n\n\n  \nlet\n \neditor\n \n=\n \nworld\n.\neditor\n(\n\"AddSpringBootRestControllerRequestMapping\"\n);\n\n  \nworld\n.\neditWith\n(\neditor\n,\n \n{\n\n      \n'endpoint'\n:\n \n'/today'\n,\n\n      \n'method_name'\n:\n \n'getToday'\n,\n\n      \n'controller_name'\n:\n \n'CalendarController'\n\n    \n})\n\n\n});\n\n\n\nThen\n(\n\"the endpoint method should be created in the controller class\"\n,\n \n(\np\n: \nProject\n)\n \n=>\n \n{\n\n    \nlet\n \nf\n: \nFile\n \n=\n \np\n.\nfindFile\n(\n\"src/main/java/com/company/CalendarController.java\"\n);\n\n    \nreturn\n \nf\n.\ncontains\n(\n\"/today\"\n)\n \n&&\n \nf\n.\ncontains\n(\n\"getToday\"\n);\n\n\n});\n\n\n\n\n\n\n\n\nCompose your Rugs!\n\n\nNotice how we compose by using the generator we declared in the \n\ngenerators\n section a well as our first editor described above. This is a\nwell-known convention when writing Rugs that we encourage you to follow.",
            "title": "Editors"
        },
        {
            "location": "/user-guide/rug/editors/#anatomy-of-an-editor",
            "text": "Assume our team has an existing Spring Boot Rest project cloned or copied/pasted\nfrom in other projects. These manual actions are brittle at best and usually\nends up with team members wondering what they did wrong.   Let\u2019s suppose however that project is already a Rug project, it would still\nbe a running Spring Boot project in its own right. Here is such a project:  ~/workspace/spring-boot-rest-basic      \u251c\u2500\u2500 .atomist      \u2502\u00a0\u00a0 \u251c\u2500\u2500 editors      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 NewSpringBootService.ts      \u2502\u00a0\u00a0 \u251c\u2500\u2500 .gitignore      \u2502\u00a0\u00a0 \u251c\u2500\u2500 manifest.yml      \u2502\u00a0\u00a0 \u251c\u2500\u2500 package.json      \u2502\u00a0\u00a0 \u251c\u2500\u2500 tests      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 project      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 NewSpringBootService.feature      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 \u2514\u2500\u2500 Steps.ts      \u2502\u00a0\u00a0 \u2514\u2500\u2500 tsconfig.json      \u251c\u2500\u2500 .atomist.yml      \u251c\u2500\u2500 .gitignore      \u251c\u2500\u2500 pom.xml      \u251c\u2500\u2500 .project      \u251c\u2500\u2500 README.md      \u251c\u2500\u2500 src      \u2502\u00a0\u00a0 \u251c\u2500\u2500 main      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 java      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 company      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 HomeController.java      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 MyRestServiceApplication.java      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 MyRestServiceConfiguration.java      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 application.properties      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 logback.xml      \u2502\u00a0\u00a0 \u2514\u2500\u2500 test      \u2502\u00a0\u00a0     \u2514\u2500\u2500 java      \u2502\u00a0\u00a0         \u2514\u2500\u2500 com      \u2502\u00a0\u00a0             \u2514\u2500\u2500 company      \u2502\u00a0\u00a0                 \u251c\u2500\u2500 MyRestServiceApplicationTests.java      \u2502\u00a0\u00a0                 \u251c\u2500\u2500 MyRestServiceOutOfContainerIntegrationTests.java      \u2502\u00a0\u00a0                 \u2514\u2500\u2500 MyRestServiceWebIntegrationTests.java      \u2514\u2500\u2500 .travis.yml   However, rather than copying bits and pieces, the team could codify the \ndevelopment automation tasks into Rug editors that could be tested and \nevolved as the team would need it.  Editors live in the  .atomist/editors  directory and their tests in the  .atomist/tests  directory. The  NewSpringBootService.ts  is the generator from\nthe  Rug generator section , editors live alongside it deminstrating we can \ncodify not only the inception of a project but its evolution as well.  Let\u2019s go through one of those Rug editors in the next section.",
            "title": "Anatomy of an Editor"
        },
        {
            "location": "/user-guide/rug/editors/#a-basic-editor",
            "text": "Let\u2019s suppose we need to automate the task of adding a controller to a Spring\nBoot service. That controller will respond to requests for the  /calendar \nendpoint.  Before we can dive into the editor itself, let\u2019s review what\u2019s needed here:   Add a new class under  src/main/java/com/company  Decorate that class with the  @RestController  and \n   @RequestMapping  decorators  Indicate the endpoint at which this controller takes place:  /calendar   These tasks are what we are going to encode in a Rug editor.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43 import   {   EditProject   }   from   '@atomist/rug/operations/ProjectEditor' ;  import   {   Editor ,   Parameter ,   Tags   }   from   '@atomist/rug/operations/Decorators' ;  import   {   Pattern   }   from   '@atomist/rug/operations/RugOperation' ;  import   {   Project   }   from   '@atomist/rug/model/Project' ;  @Editor ( \"AddSpringBootRestController\" ,   \"adds a new REST controller to a Spring Boot project\" )  @Tags ( \"spring\" ,   \"spring boot\" ,   \"rest\" )  export   class   AddSpringBootRestController   implements   EditProject   { \n\n     @Parameter ({ \n         displayName :   \"Class Name\" , \n         description :   \"name for the controller class\" , \n         pattern :  Pattern.java_class , \n         validInput :   \"a valid Java class name\" , \n         minLength :  1 , \n         maxLength :  50 \n     }) \n     controller_class_name :  string ; \n\n     @Parameter ({ \n         displayName :   \"Path at which the request will be served\" , \n         description :   \"REST endpoint\" , \n         pattern :  Pattern.any , \n         validInput :   \"a valid HTTP path\" , \n         minLength :  1 , \n     }) \n     endpoint :  string ; \n\n     edit ( project :  Project )   { \n\n         const   rawJavaFileContent   =   `package com.company;  import org.springframework.web.bind.annotation.RequestMapping;  import org.springframework.web.bind.annotation.RestController;  @RestController  @RequestMapping(value=\" ${ this . endpoint } \")  public class  ${ this . controller_class_name } Controller {  }` ; \n\n         project . addFile ( `src/main/java/com/company/ ${ this . controller_class_name } Controller.java` ,   rawJavaFileContent ); \n     }  }  export   const   addSpringBootRestController   =   new   AddSpringBootRestController ();    The first few lines group the Rug typings our script will be using throughout \n(lines 1\u20134). Next, we declare our editor through TypeScript  decorators  \n(line 6). The first argument of the  @Editor  decorator is the name \nof the editor. This the public visible and discoverable name of the Rug. This \nname, along with the editors group and repository, form the fully-qualified name \nof the editor. The second argument of the  @Editor  decorator is a \nshort description of the editor. The following line uses the  @Tags  decorator to apply some tags to our editor so people can \nsearch for it more easily. Using the  @Tags  decorator is optional \nbut highly recommended.  We then define the class which implements our editor (line 8). An editor \nimplements the  EditProject  interface. That interface requires the  edit ( Project )  method to be defined (line 28). It is convention \nfor the editor and the class that implements it to have the same name.  You will likely want to customize your Rugs\u2019 input to tune their output \naccording to user-supplied values. Such customization is achieved through \nparameters that your editor must declare in the class via the  @Parameter  decorator (lines 10, 16 and 22). This decorator \nprovides all the metadata of the parameter whereas the decorated variable \ndeclaration provides its name and default value, if any. The  @Parameter  decorator accepts a single argument, a JavaScript \nobject. That object accepts  properties  documented in the \n[conventions][rugconv] but, only the  pattern  property is required. A pattern \nis an  anchored  regular expression that validates the input. Here we rely on \nthe  Pattern . any  and  Pattern . java_class  patterns\nbundled by Atomist in the TypeScript dependencies.  The  edit  method takes a single argument, a Project  object. That object gives you access to the entire \nstructure and content of the project your editor is applied to. Use it to access\nand update the content of any resource in that project according to the goal of\nyour editor. You have the full power of TypeScript and the Rug programming model \nand [language extensions][langext] to achieve this.  As we can see, in this example, we simply create the content of the controller\nclass customizing it from the parameters before saving that content in the\nappropriate file in the project.   Tip  In a real Rug editor, you would want to also parameterize the package\npath as your users may have changed it in their own project.   A Rug should always be accompanied by one or more  tests . Here, this is what\na basic test could look like. First the feature descriving the test scenario\nfor that editor:  Feature:  Add a new REST Controller to a Spring Boot project  Scenario:  A new controller class should be added   Given  an empty project    When  adding a new controller    Then  the controller class should be created     Then  the controller class has the supplied name    Then  the controller class has the supplied endpoint   The implementation of such test goes into  .atomist/tests/Steps.ts :  import   {   Given ,   When ,   Then ,   ProjectScenarioWorld   }   from   \"@atomist/rug/test/project/Core\" ;  import   {   Result   }   from   \"@atomist/rug/test/Result\" ;  import   {   Project   }   from   \"@atomist/rug/model/Project\" ;  When ( \"adding a new controller\" ,   ( p :  Project ,   world :  ProjectScenarioWorld )   =>   { \n   let   generator   =   world . generator ( \"NewSpringBootService\" ); \n   world . generateWith ( generator ,   { \"service_class_name\" :   \"CalendarService\" }); \n\n   let   editor   =   world . editor ( \"AddSpringBootRestController\" ); \n   world . editWith ( editor ,   { 'endpoint' :   '/calendar' ,   'controller_class_name' :   'Calendar' })  });  Then ( \"the controller class should be created\" ,   ( p :  Project )   =>  \n     p . fileExists ( \"src/main/java/com/company/CalendarController.java\" )  );  Then ( \"the controller class has the supplied name\" ,   ( p :  Project )   =>  \n     p . findFile ( \"src/main/java/com/company/CalendarController.java\" ). contains ( \"CalendarController\" )  );  Then ( \"the controller class has the supplied endpoint\" ,   ( p :  Project )   =>  \n     p . findFile ( \"src/main/java/com/company/CalendarController.java\" ). contains ( \"/calendar\" )  );   Such a test should pass when executed:  $  rug  test  Resolving dependencies for com.company.rugs:spring-boot-service:0.13.0:local completed  Invoking TypeScript Compiler on ts script sources                                                                                                                                                                    Created .atomist/tests/Steps.js.map                                                                                                                                                                                Created .atomist/tests/Steps.js                                                                                                                                                                                    Created .atomist/editors/AddSpringBootRestController.js                                                                                                                                                            Created .atomist/editors/AddSpringBootRestController.js.map                                                                                                                                                        Created .atomist/editors/NewSpringBootService.js                                                                                                                                                                   Created .atomist/editors/NewSpringBootService.js.map                                                                                                                                                             Processing script sources completed  Loading com.company.rugs:spring-boot-service:0.13.0:local completed    Executing feature Add a new REST Controller to a Spring Boot project                                                                                                                                                Executing test scenario A new controller class should be added                                                                                                                                                  Creating project_name                                                                                                                                                                                             Executing feature Creating new Spring Rest Service projects                                                                                                                                                         Executing test scenario A default Spring Rest project structure should be generated                                                                                                                             Creating project_name                                                                                                                                                                                           Running tests in com.company.rugs:spring-boot-service:0.13.0:local completed  Successfully executed 2 of 2 tests: Test SUCCESS   Although this editor is useful, if we stopped there, its users would still\nhave to implement the REST endpoints in that controller by hand. As Atomist\ncan navigate code as we much as filesystem, we certainly can add a new editor\nthat does just that. Here such an editor:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51 import   {   EditProject   }   from   '@atomist/rug/operations/ProjectEditor' ;  import   {   Editor ,   Parameter ,   Tags   }   from   '@atomist/rug/operations/Decorators' ;  import   {   Pattern   }   from   '@atomist/rug/operations/RugOperation' ;  import   {   Project   }   from   '@atomist/rug/model/Project' ;  import   {   PathExpressionEngine ,   TextTreeNode   }   from   '@atomist/rug/tree/PathExpression' ;  @Editor ( \"AddSpringBootRestControllerRequestMapping\" ,   \"adds a new endpoint mapping to a REST controller\" )  @Tags ( \"spring\" ,   \"spring boot\" ,   \"rest\" )  export   class   AddSpringBootRestControllerRequestMapping   implements   EditProject   { \n\n     @Parameter ({ \n         displayName :   \"Controller Name\" , \n         description :   \"name for the controller class\" , \n         pattern :  Pattern.java_class , \n         validInput :   \"a valid Java class name\" , \n         minLength :  1 , \n         maxLength :  50 \n     }) \n     controller_name :  string ; \n\n     @Parameter ({ \n         displayName :   \"Method Name\" , \n         description :   \"name for the method to add\" , \n         pattern :  Pattern.java_identifier , \n         validInput :   \"a valid Java method name\" , \n         minLength :  1 , \n         maxLength :  50 \n     }) \n     method_name :  string ; \n\n     @Parameter ({ \n         displayName :   \"Path at which the request will be served under the controller's endpoint\" , \n         description :   \"REST endpoint\" , \n         pattern :  Pattern.any , \n         validInput :   \"a valid HTTP path\" , \n         minLength :  1 , \n     }) \n     endpoint :  string ; \n\n     edit ( project :  Project )   { \n         let   eng :  PathExpressionEngine   =   project . context (). pathExpressionEngine (); \n\n         eng . with < TextTreeNode > ( project ,   `/src//File()[@name=\" ${ this . controller_name } .java\"]/JavaFile()//classDeclaration` ,   f   =>   { \n             f . update ( `@RequestMapping(value=\"/ ${ this . endpoint } \", method=RequestMethod.GET)      public String  ${ this . method_name } () {          throw new UnsupportedOperationException(\"No implemented\");      }` ); \n         }); \n     }  }  export   const   addSpringBootRestControllerRequestMapping   =   new   AddSpringBootRestControllerRequestMapping ();    This editor follows the same structure as explained earlier, it\u2019s interesting\npart is its body which demonstrates the power of  path expressions  to\nquery note the filesystem but code structures as well. Let\u2019s deconstruct the\npath expression declared here:  `/src//File()[@name=\" ${ this . controller_name } .java\"]/JavaFile()//classDeclaration`   Starting from the  src  top-level directory of the project, we search for the\nJava file the user targets via the editor\u2019s parameter  controller_name . Once that file is found, we inform the Rug \nruntime to switch to parsing that file, using the  JavaFile()  language \nextension, so we can navigate its content through an AST-based tree model. The  //classDeclaration  segment tells the expression engine to look for all classes \nin that tree. Since we are in a Java file, we retrieve the only top-level class \nit contains.    ANTLR to the rescue  The Rug runtime relies on well-known  ANTLR grammars  to parse \nlanguages like Java, C# or Python. The  //classDeclaration  segment is a \ndirect rule of the  Java8 grammar . You do not need to install \nANTLR as it is provided by the Rug runtime.   Once we have found the class we are interested in updating, we can indeed add\nthe method\u2019s definition as per the user-supplied parameters. This changes is\nautomatically saved to disk and our class is now updated with the appropriate\nmethod.  We obviously tested that editor as explained above through a BDD feature and\nscenario which steps are implemented in  .atomist/tests/Steps.ts .  Feature:  Add a new endpoint to a REST Controller in a Spring Boot project  Scenario:  A new endpoint meyhod should be added   Given  an empty project    When  adding a new endpoint to a controller    Then  the endpoint method should be created in the controller class   import   {   Given ,   When ,   Then ,   ProjectScenarioWorld   }   from   \"@atomist/rug/test/project/Core\" ;  import   {   Result   }   from   \"@atomist/rug/test/Result\" ;  import   {   Project   }   from   \"@atomist/rug/model/Project\" ;  import   {   File   }   from   \"@atomist/rug/model/File\" ; \n\n  When ( \"adding a new endpoint to a controller\" ,   ( p :  Project ,   world :  ProjectScenarioWorld )   =>   { \n   let   generator   =   world . generator ( \"NewSpringBootService\" ); \n   world . generateWith ( generator ,   { \"service_class_name\" :   \"CalendarService\" }); \n\n   let   controller   =   world . editor ( \"AddSpringBootRestController\" ); \n   world . editWith ( controller ,   { 'endpoint' :   '/calendar' ,   'controller_class_name' :   'Calendar' }) \n\n   let   editor   =   world . editor ( \"AddSpringBootRestControllerRequestMapping\" ); \n   world . editWith ( editor ,   { \n       'endpoint' :   '/today' , \n       'method_name' :   'getToday' , \n       'controller_name' :   'CalendarController' \n     })  });  Then ( \"the endpoint method should be created in the controller class\" ,   ( p :  Project )   =>   { \n     let   f :  File   =   p . findFile ( \"src/main/java/com/company/CalendarController.java\" ); \n     return   f . contains ( \"/today\" )   &&   f . contains ( \"getToday\" );  });    Compose your Rugs!  Notice how we compose by using the generator we declared in the  generators  section a well as our first editor described above. This is a\nwell-known convention when writing Rugs that we encourage you to follow.",
            "title": "A Basic Editor"
        },
        {
            "location": "/user-guide/rug/generators/",
            "text": "Rug generators create new projects from an existing source project,\nwhere the source project itself is a working project in its own right.\nA Rug generator has two major components: the \u201cmodel\u201d project and the\nmodifications needed to transform the model project into a new\nproject.  The model project can be any working project you want to use\nto create new projects.  The transformations are encoded in the Rug\ngenerator script located under the project\u2019s \n.atomist\n directory.\nUsing these components, a generator does the followings:\n\n\n\n\nCopy the content of its host project, \n.atomist\n directory\n    excluded, into the new target directory\n\n\nRuns the generator\u2019s \npopulate\n function against the contents of\n    target directory\n\n\n\n\nLet\u2019s look more closely at what makes a project a Rug generator.\n\n\nAnatomy of a Generator\n\u00b6\n\n\nSuppose we have a model project our team clones to quickly get the skeleton of a \n\nSpring Bot Rest Service\n.  The contents of the model project are \nthe following.\n\n\n~/workspace/spring-boot-rest-basic\n\n\n    \u251c\u2500\u2500 .gitignore\n\n\n    \u251c\u2500\u2500 pom.xml\n\n\n    \u251c\u2500\u2500 README.md\n\n\n    \u251c\u2500\u2500 src\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 main\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 company\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 HomeController.java\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 MyRestServiceApplication.java\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 MyRestServiceConfiguration.java\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 application.properties\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 logback.xml\n\n\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 test\n\n\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 java\n\n\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 com\n\n\n    \u2502\u00a0\u00a0             \u2514\u2500\u2500 company\n\n\n    \u2502\u00a0\u00a0                 \u251c\u2500\u2500 MyRestServiceApplicationTests.java\n\n\n    \u2502\u00a0\u00a0                 \u251c\u2500\u2500 MyRestServiceOutOfContainerIntegrationTests.java\n\n\n    \u2502\u00a0\u00a0                 \u2514\u2500\u2500 MyRestServiceWebIntegrationTests.java\n\n\n\n\n\n\nTo convert out model project into a \nRug generator\n, we can use the \n\nConvertExistingProjectToGenerator\n Rug editor in \nrug-editors\n to \nadd all the necessary directories and files:\n\n\n$\n rug edit atomist-rugs:rug-editors:ConvertExistingProjectToGenerator \n\\\n\n    \narchive_name\n=\nspring-boot-service \n\\\n\n    \ngroup_id\n=\ncompany-rugs \n\\\n\n    \nversion\n=\n0\n.13.0 \n\\\n\n    \ngenerator_name\n=\nNewSpringBootService \n\\\n\n    \ndescription\n=\n\"Rug generator for a Spring Boot REST service\"\n\n\nProcessing dependencies                                                                                                                                                                                          \n\n\n  Downloading atomist-rugs/rug-editors/maven-metadata.xml \u2190 rugs (740 bytes) succeeded                                                                                                                 \n\n\n  Downloading atomist-rugs/rug-editors/maven-metadata.xml \u2190 global (740 bytes) succeeded                                                                                                               \n\n\n  Downloading atomist-rugs/rug-editors/0.14.0/rug-editors-0.14.0.pom \u2190 rugs (635 bytes) succeeded                                                                                                      \n\n\n  Downloading atomist-rugs/rug-editors/0.14.0/rug-editors-0.14.0-metadata.json \u2190 rugs (14 kb) succeeded                                                                                                \n\n\n  Downloading atomist-rugs/rug-editors/0.14.0/rug-editors-0.14.0.zip \u2190 rugs (194 kb) succeeded                                                                                                         \n\n\nResolving dependencies for atomist-rugs:rug-editors:latest completed\n\n\nLoading atomist-rugs:rug-editors:0.14.0 into runtime completed\n\n\n  TypeScript files added, run `cd .atomist && npm install`                                                                                                                                                      \n\n\n\nRunning editor ConvertExistingProjectToGenerator of atomist-rugs:rug-editors:0.14.0 completed\n\n\n\n\u2192 Project\n\n\n  ~/workspace/spring-boot-rest-basic (14 kb in 20 files)\n\n\n\n\u2192 Changes\n\n\n  \u251c\u2500\u2500 .atomist/manifest.yml created (223 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/manifest.yml updated (227 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/manifest.yml updated (235 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/manifest.yml updated (235 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/manifest.yml updated (179 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/manifest.yml updated (128 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/manifest.yml updated (113 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/manifest.yml updated (105 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/manifest.yml updated (103 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/package.json created (57 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/tsconfig.json created (627 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/.gitignore created (27 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/editors/NewSpringBootService.ts created (602 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/tests/NewSpringBootService.rt created (153 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/editors/NewSpringBootService.ts updated (580 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/editors/NewSpringBootService.ts updated (583 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/editors/NewSpringBootService.ts updated (584 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/tests/NewSpringBootService.rt updated (155 bytes)\n\n\n  \u251c\u2500\u2500 .atomist/tests/NewSpringBootService.rt updated (880 bytes)\n\n\n  \u2514\u2500\u2500 .atomist.yml created (2 kb)\n\n\n\n\n\n\nThe \ngroup_id\n and \narchive_name\n parameters, coupled with the name of the Rug \ngenerator, define the fully-qualified name of the \nRug archive\n (the \npublished package of a Rug).\n\n\nOnce this is completed, the project should look like this:\n\n\n~/workspace/spring-boot-rest-basic\n\n\n    \u251c\u2500\u2500 .atomist\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 editors\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 NewSpringBootService.ts\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 .gitignore\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 manifest.yml\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 package.json\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 tests\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 project\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 NewSpringBootService.feature\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 \u2514\u2500\u2500 Steps.ts\n\n\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 tsconfig.json\n\n\n    \u251c\u2500\u2500 .atomist.yml\n\n\n    \u251c\u2500\u2500 .gitignore\n\n\n    \u251c\u2500\u2500 pom.xml\n\n\n    \u251c\u2500\u2500 .project\n\n\n    \u251c\u2500\u2500 README.md\n\n\n    \u251c\u2500\u2500 src\n\n\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 main\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 company\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 HomeController.java\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 MyRestServiceApplication.java\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 MyRestServiceConfiguration.java\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 application.properties\n\n\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 logback.xml\n\n\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 test\n\n\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 java\n\n\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 com\n\n\n    \u2502\u00a0\u00a0             \u2514\u2500\u2500 company\n\n\n    \u2502\u00a0\u00a0                 \u251c\u2500\u2500 MyRestServiceApplicationTests.java\n\n\n    \u2502\u00a0\u00a0                 \u251c\u2500\u2500 MyRestServiceOutOfContainerIntegrationTests.java\n\n\n    \u2502\u00a0\u00a0                 \u2514\u2500\u2500 MyRestServiceWebIntegrationTests.java\n\n\n\n\n\n\nThe \n.atomist\n directory contains a manifest file,\ndeclares \nTypeScript\n dependencies in the \npackage.json\n file, and\nhas the Rug generator script and its associated test in appropriate\nsubdirectories.\n\n\n\n\nBecause all of the Atomist files are hidden under the \n.atomist\n\ndirectory, our generator project is still a fully functioning,\nperfectly valid Spring Boot project.\n\n\n\n\nLet\u2019s take a close look at the Rug generator script.\n\n\nA Basic Generator Script\n\u00b6\n\n\nThe generator script\u2019s \npopulate\n method is invoked after\nthe model project\u2019s files have been copied to the target project.  The default \ncontents of the generator script we added above look like the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nimport\n \n{\n \nPopulateProject\n \n}\n \nfrom\n \n'@atomist/rug/operations/ProjectGenerator'\n;\n\n\nimport\n \n{\n \nProject\n \n}\n \nfrom\n \n'@atomist/rug/model/Project'\n;\n\n\nimport\n \n{\n \nPattern\n \n}\n \nfrom\n \n'@atomist/rug/operations/RugOperation'\n;\n\n\nimport\n \n{\n \nGenerator\n,\n \nParameter\n,\n \nTags\n \n}\n \nfrom\n \n'@atomist/rug/operations/Decorators'\n;\n\n\n\n@Generator\n(\n\"NewSpringBootService\"\n,\n \n\"Rug project for Spring Rest Services\"\n)\n\n\n@Tags\n(\n\"documentation\"\n)\n\n\nexport\n \nclass\n \nNewSpringBootService\n \nimplements\n \nPopulateProject\n \n{\n\n\n    \npopulate\n(\nproject\n: \nProject\n)\n \n{\n\n        \nconsole\n.\nlog\n(\n`Creating \n${\nproject\n.\nname\n()\n}\n`\n);\n\n    \n}\n\n\n}\n\n\n\nexport\n \nconst\n \nnewSpringBootService\n \n=\n \nnew\n \nNewSpringBootService\n();\n\n\n\n\n\n\n\nAfter importing the TypeScript Rug typings for the elements we will be\nusing (lines 1\u20134), we use a \ndecorator\n to declare the\nfollowing class a generator (line 6).  The first argument to the\n\n@Generator\n decorator is the name of the generator.\nThis is the externally visible and discoverable name of the Rug.  This\nname, along with the generators group and repository, form the\nfully-qualified name of the generator.  The second argument to the\n\n@Generator\n decorator is a brief description of the\ngenerator.  On line 5 we use the \n@Tags\n decorator to\napply some tags to our generator so people can search for it more\neasily.  Using the \n@Tags\n decorator is optional but\nhighly recommended.\n\n\nWe define the class that will implement our generator on line 8.  A\ngenerator implements the \nPopulateProject\n interface.\nThis interface requires the \npopulate\n(\nProject\n)\n method to\nbe defined, which we do on line 10 (more on that below).  It is\nconvention for the generator and the class that implements it to have\nthe same name.\n\n\nIn the last line of the generator script we export an instance of that\ngenerator to make it visible to the Rug runtime when it executed (line 15).\nLike the generator class name, the name of the \nconst\n\ndoes not matter, but it is convention to use the generator/class name,\nlower-casing the first letter.\n\n\nAs explained earlier, a generator copies the content of the project where it \nlives into a target directory before applying changes. The definition of our \ngenerator currently performs only the copy (this is done automatically for us).\nLet\u2019s now amend the generator to modify the copied contents, for example to \nchange the name of the copied class. An action users would likely do manually.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\nimport\n \n{\n \nPopulateProject\n \n}\n \nfrom\n \n'@atomist/rug/operations/ProjectGenerator'\n;\n\n\nimport\n \n{\n \nProject\n \n}\n \nfrom\n \n'@atomist/rug/model/Project'\n;\n\n\nimport\n \n{\n \nFile\n \n}\n \nfrom\n \n'@atomist/rug/model/File'\n;\n\n\nimport\n \n{\n \nPattern\n \n}\n \nfrom\n \n'@atomist/rug/operations/RugOperation'\n;\n\n\nimport\n \n{\n \nGenerator\n,\n \nParameter\n,\n \nTags\n \n}\n \nfrom\n \n'@atomist/rug/operations/Decorators'\n;\n\n\nimport\n \n{\n \nPathExpressionEngine\n \n}\n \nfrom\n \n'@atomist/rug/tree/PathExpression'\n;\n\n\n\n\n@Generator\n(\n\"NewSpringBootService\"\n,\n \n\"Rug project for Spring Rest Services\"\n)\n\n\n@Tags\n(\n\"documentation\"\n)\n\n\nexport\n \nclass\n \nNewSpringBootService\n \nimplements\n \nPopulateProject\n \n{\n\n\n    \n@Parameter\n({\n\n        \ndisplayName\n:\n \n\"Class Name\"\n,\n\n        \ndescription\n:\n \n\"name for the service class\"\n,\n\n        \npattern\n: \nPattern.java_class\n,\n\n        \nvalidInput\n:\n \n\"a valid Java class name, which contains only alphanumeric characters, $ and _ and does not start with a number\"\n,\n\n        \nminLength\n: \n1\n,\n\n        \nmaxLength\n: \n50\n,\n\n        \nrequired\n: \nfalse\n\n    \n})\n\n    \nservice_class_name\n: \nstring\n;\n\n\n    \npopulate\n(\nproject\n: \nProject\n)\n \n{\n\n        \nconsole\n.\nlog\n(\n`Creating \n${\nproject\n.\nname\n()\n}\n`\n);\n\n\n\n        \nlet\n \neng\n: \nPathExpressionEngine\n \n=\n \nproject\n.\ncontext\n().\npathExpressionEngine\n()\n\n\n        \neng\n.\nwith\n<\nFile\n>\n(\nproject\n,\n \n'/src//File()[contains(@name, \"MyRestService\")]'\n,\n \nf\n \n=>\n \n{\n\n\n            \nf\n.\nreplace\n(\n\"MyRestService\"\n,\n \nthis\n.\nservice_class_name\n);\n\n\n            \nf\n.\nsetPath\n(\nf\n.\npath\n().\nreplace\n(\n\"MyRestService\"\n,\n \nthis\n.\nservice_class_name\n));\n\n\n        \n});\n\n\n    \n}\n\n\n}\n\n\n\nexport\n \nconst\n \nnewSpringBootService\n \n=\n \nnew\n \nNewSpringBootService\n();\n\n\n\n\n\n\n\nRugs, like typical methods, often take parameters to customize their\nbehavior.  Generators have a required parameter: the name of the\nproject that will be generated.  The project name parameter is\nautomatically defined for a generate.  All other parameters used by\nthe generator must be declared.  Parameters are declared using the\n\n@Parameter\n decorator (line 10).  The \n@Parameter\n decorator provides the metadata for the parameter while\nthe subsequent instance variable declaration provides the name and\ndefault value, if any.  The \n@Parameter\n decorator\naccepts a single argument, a JavaScript object.  The JavaScript object\npassed to \n@Parameter\n accepts all of the property names\nshown above, but only \npattern\n is mandatory.  The \npattern\n property\nprovides an anchored regular expression used to validate user input.\nHere we use one the Atomist pre-defined \nPattern\ns (line\n13).  Despite the fact that the other \n@Parameter\n\nproperties are option, it is highly recommended to provide them to\nhelp consumers of your generator.\n\n\nThe \npopulate\n method takes a single argument, a\n\nProject\n object.  The \nProject\n provided to\nthis method contains the contents of the generated project, i.e., all\nthe files copied from the generator project.  Using this object, you\ncan alter the exact copy of the original project as appropriate so the\nresult is the new project with the desired contents.  To effect your\ndesired changes, you have the power of TypeScript and the Rug\nprogramming model.  \n\n\nIn that regards, as Atomist comprehends filesystem and code structure, the Rug\nprogramming model offers a powerful mechanism to make the above example a lot\nless brittle through \npath expressions\n. In this generator script, we query \nthe filesystem for all files containing a specific token in their names \n(line 27). Then for each one of these files, we replace its content (line 28) \nand move it to different path (line 29). \n\n\nRugs should be tested as any other pieces of software, Rug and its runtime \nnatively supports a \nBDD-centric testing approach\n, based on the \nGherkin DSL.\n\n\nThe test for our generator could be described as follows in \n\n.atomist/tests/NewSpringBootService.feature\n:\n\n\nFeature:\n Creating new Spring Rest Service projects\n\n\n\nScenario:\n A default Spring Rest project structure should be generated\n\n\n Given \nan empty project\n\n\n\n \nWhen \nrunning the Spring Boot Service generator\n\n\n\n \nThen \nthe name of the application file is changed\n\n\n \nThen \nthe name of the configuration file is changed\n\n\n \nThen \nthe name of the application tests file is changed\n\n\n \nThen \nthe name of the integration tests file is changed\n\n\n \nThen \nthe name of the web integration tests file is changed\n\n\n\n \nThen \nthe name of the class in the application file is changed\n\n\n \nThen \nthe name of the class in the configuration file is changed\n\n\n \nThen \nthe name of the class in the application tests file is changed\n\n\n \nThen \nthe name of the class in the integration tests file is changed\n\n\n \nThen \nthe name of the class in the web integration tests is changed\n\n\n\n\n\n\nImplemented by the steps in \n.atomist/tests/Steps.ts\n file:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\nimport\n \n{\n \nGiven\n,\n \nWhen\n,\n \nThen\n,\n \nProjectScenarioWorld\n \n}\n \nfrom\n \n\"@atomist/rug/test/project/Core\"\n;\n\n\nimport\n \n{\n \nResult\n \n}\n \nfrom\n \n\"@atomist/rug/test/Result\"\n;\n\n\nimport\n \n{\n \nProject\n \n}\n \nfrom\n \n\"@atomist/rug/model/Project\"\n;\n\n\n\nGiven\n(\n\"an empty project\"\n,\n \np\n \n=>\n \n{})\n\n\n\nWhen\n(\n\"running the Spring Boot Service generator\"\n,\n \n(\np\n: \nProject\n,\n \nworld\n: \nProjectScenarioWorld\n)\n \n=>\n \n{\n\n  \nlet\n \ngenerator\n \n=\n \nworld\n.\ngenerator\n(\n\"NewSpringBootService\"\n);\n\n  \nworld\n.\ngenerateWith\n(\ngenerator\n,\n \n{\n\"service_class_name\"\n:\n \n\"CalendarService\"\n});\n\n\n})\n\n\n\nThen\n(\n\"the name of the application file is changed\"\n,\n \n(\np\n: \nProject\n)\n \n=>\n \n    \np\n.\nfileExists\n(\n\"src/main/java/com/company/CalendarServiceApplication.java\"\n)\n\n\n)\n\n\nThen\n(\n\"the name of the configuration file is changed\"\n,\n \n(\np\n: \nProject\n)\n \n=>\n \n    \np\n.\nfileExists\n(\n\"src/main/java/com/company/CalendarServiceConfiguration.java\"\n)\n\n\n)\n\n\nThen\n(\n\"the name of the application tests file is changed\"\n,\n \n(\np\n: \nProject\n)\n \n=>\n \n    \np\n.\nfileExists\n(\n\"src/test/java/com/company/CalendarServiceApplicationTests.java\"\n)\n\n\n)\n\n\nThen\n(\n\"the name of the integration tests file is changed\"\n,\n \n(\np\n: \nProject\n)\n \n=>\n \n    \np\n.\nfileExists\n(\n\"src/test/java/com/company/CalendarServiceOutOfContainerIntegrationTests.java\"\n)\n\n\n)\n\n\nThen\n(\n\"the name of the web integration tests file is changed\"\n,\n \n(\np\n: \nProject\n)\n \n=>\n \n    \np\n.\nfileExists\n(\n\"src/test/java/com/company/CalendarServiceWebIntegrationTests.java\"\n)\n\n\n)\n\n\n\nThen\n(\n\"the name of the class in the application file is changed\"\n,\n \n(\np\n: \nProject\n)\n \n=>\n \n    \np\n.\nfindFile\n(\n\"src/main/java/com/company/CalendarServiceApplication.java\"\n).\ncontains\n(\n\"CalendarServiceApplication\"\n)\n\n\n)\n\n\nThen\n(\n\"the name of the class in the configuration file is changed\"\n,\n \n(\np\n: \nProject\n)\n \n=>\n \n    \np\n.\nfindFile\n(\n\"src/main/java/com/company/CalendarServiceConfiguration.java\"\n).\ncontains\n(\n\"CalendarServiceConfiguration\"\n)\n\n\n)\n\n\nThen\n(\n\"the name of the class in the application tests file is changed\"\n,\n \n(\np\n: \nProject\n)\n \n=>\n \n    \np\n.\nfindFile\n(\n\"src/test/java/com/company/CalendarServiceApplicationTests.java\"\n).\ncontains\n(\n\"CalendarServiceApplicationTests\"\n)\n\n\n)\n\n\nThen\n(\n\"the name of the class in the integration tests file is changed\"\n,\n \n(\np\n: \nProject\n)\n \n=>\n \n    \np\n.\nfindFile\n(\n\"src/test/java/com/company/CalendarServiceOutOfContainerIntegrationTests.java\"\n).\ncontains\n(\n\"CalendarServiceOutOfContainerIntegrationTests\"\n)\n\n\n)\n\n\nThen\n(\n\"the name of the class in the web integration tests is changed\"\n,\n \n(\np\n: \nProject\n)\n \n=>\n \n    \np\n.\nfindFile\n(\n\"src/test/java/com/company/CalendarServiceWebIntegrationTests.java\"\n).\ncontains\n(\n\"CalendarServiceWebIntegrationTests\"\n)\n\n\n)\n\n\n\n\n\n\n\nIf you\u2019re not familiar with this approach, the \n\n.atomist/tests/NewSpringBootService.feature\n describes our tests in a set of\nhypotheses and expectations. All those steps are implemented in the \n\n.atomist/tests/Steps.ts\n file which is executed when the test is run:\n\n\n$\n rug \ntest\n\n\nResolving dependencies for com.company.rugs:spring-boot-service:0.13.0:local completed\n\n\nInvoking TypeScript Compiler on ts script sources                                                                                                                                                                \n\n\n  Created .atomist/tests/Steps.js.map                                                                                                                                                                            \n\n\n  Created .atomist/tests/Steps.js                                                                                                                                                                                \n\n\n  Created .atomist/editors/NewSpringBootService.js.map                                                                                                                                                           \n\n\n  Created .atomist/editors/NewSpringBootService.js                                                                                                                                                               \n\n\nProcessing script sources completed\n\n\nLoading com.company.rugs:spring-boot-service:0.13.0:local completed\n\n\n  Executing feature Creating new Spring Rest Service projects                                                                                                                                                   \n\n\n    Executing test scenario A default Spring Rest project structure should be generated                                                                                                                         \n\n\n  Creating project_name                                                                                                                                                                                         \n\n\nRunning tests in com.company.rugs:spring-boot-service:0.13.0:local completed\n\n\n\nSuccessfully executed 1 of 1 test: Test SUCCESS\n\n\n\n\n\n\nAssuming we change one of the hypotheses to make it fail, \nrug\n would notify us\nwith a relevant error message:\n\n\n$\n rug \ntest\n\n\nResolving dependencies for com.company.rugs:spring-boot-service:0.13.0:local completed\n\n\nInvoking TypeScript Compiler on ts script sources                                                                                                                                                                \n\n\n  Created .atomist/tests/Steps.js.map                                                                                                                                                                            \n\n\n  Created .atomist/tests/Steps.js                                                                                                                                                                                \n\n\n  Created .atomist/editors/NewSpringBootService.js                                                                                                                                                               \n\n\n  Created .atomist/editors/NewSpringBootService.js.map                                                                                                                                                           \n\n\nProcessing script sources completed\n\n\nLoading com.company.rugs:spring-boot-service:0.13.0:local completed\n\n\n  Executing feature Creating new Spring Rest Service projects                                                                                                                                                   \n\n\n    Executing test scenario A default Spring Rest project structure should be generated                                                                                                                         \n\n\n  Creating project_name                                                                                                                                                                                         \n\n\nRunning tests in com.company.rugs:spring-boot-service:0.13.0:local completed\n\n\n\n\u2192 Test Report\n\n\n  Failures\n\n\n  \u2514\u2500\u252c Creating new Spring Rest Service projects\n\n\n    \u2514\u2500\u252c A default Spring Rest project structure should be generated\n\n\n      \u251c\u2500\u252c the name of the application file is changed: Failed\n\n\n      | \u2514\u2500\u2500 function (p) {\n\n\n    return p.fileExists(\"src/main/java/com/company/CalndarServiceApplication.java\");\n\n\n}\n\n\n      \u251c\u2500\u2500 the name of the application tests file is changed: Passed\n\n\n      \u251c\u2500\u2500 the name of the class in the application file is changed: Passed\n\n\n      \u251c\u2500\u2500 the name of the class in the application tests file is changed: Passed\n\n\n      \u251c\u2500\u2500 the name of the class in the configuration file is changed: Passed\n\n\n      \u251c\u2500\u2500 the name of the class in the integration tests file is changed: Passed\n\n\n      \u251c\u2500\u2500 the name of the class in the web integration tests is changed: Passed\n\n\n      \u251c\u2500\u2500 the name of the configuration file is changed: Passed\n\n\n      \u251c\u2500\u2500 the name of the integration tests file is changed: Passed\n\n\n      \u2514\u2500\u2500 the name of the web integration tests file is changed: Passed\n\n\n\nUnsuccessfully executed 1 of 1 test: Test FAILURE\n\n\n\n\n\n\nAs you can see, Rug generator scripts are simple functions that apply\nchanges against a freshly copy of your its content. This changes may be \nparametarized to tailor the result to the user\u2019s expectations. Finally, \nfollowing a test-driven approach, generators can be quickly validated before\nbeing released.",
            "title": "Generators"
        },
        {
            "location": "/user-guide/rug/generators/#anatomy-of-a-generator",
            "text": "Suppose we have a model project our team clones to quickly get the skeleton of a  Spring Bot Rest Service .  The contents of the model project are \nthe following.  ~/workspace/spring-boot-rest-basic      \u251c\u2500\u2500 .gitignore      \u251c\u2500\u2500 pom.xml      \u251c\u2500\u2500 README.md      \u251c\u2500\u2500 src      \u2502\u00a0\u00a0 \u251c\u2500\u2500 main      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 java      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 company      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 HomeController.java      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 MyRestServiceApplication.java      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 MyRestServiceConfiguration.java      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 application.properties      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 logback.xml      \u2502\u00a0\u00a0 \u2514\u2500\u2500 test      \u2502\u00a0\u00a0     \u2514\u2500\u2500 java      \u2502\u00a0\u00a0         \u2514\u2500\u2500 com      \u2502\u00a0\u00a0             \u2514\u2500\u2500 company      \u2502\u00a0\u00a0                 \u251c\u2500\u2500 MyRestServiceApplicationTests.java      \u2502\u00a0\u00a0                 \u251c\u2500\u2500 MyRestServiceOutOfContainerIntegrationTests.java      \u2502\u00a0\u00a0                 \u2514\u2500\u2500 MyRestServiceWebIntegrationTests.java   To convert out model project into a  Rug generator , we can use the  ConvertExistingProjectToGenerator  Rug editor in  rug-editors  to \nadd all the necessary directories and files:  $  rug edit atomist-rugs:rug-editors:ConvertExistingProjectToGenerator  \\ \n     archive_name = spring-boot-service  \\ \n     group_id = company-rugs  \\ \n     version = 0 .13.0  \\ \n     generator_name = NewSpringBootService  \\ \n     description = \"Rug generator for a Spring Boot REST service\"  Processing dependencies                                                                                                                                                                                              Downloading atomist-rugs/rug-editors/maven-metadata.xml \u2190 rugs (740 bytes) succeeded                                                                                                                     Downloading atomist-rugs/rug-editors/maven-metadata.xml \u2190 global (740 bytes) succeeded                                                                                                                   Downloading atomist-rugs/rug-editors/0.14.0/rug-editors-0.14.0.pom \u2190 rugs (635 bytes) succeeded                                                                                                          Downloading atomist-rugs/rug-editors/0.14.0/rug-editors-0.14.0-metadata.json \u2190 rugs (14 kb) succeeded                                                                                                    Downloading atomist-rugs/rug-editors/0.14.0/rug-editors-0.14.0.zip \u2190 rugs (194 kb) succeeded                                                                                                           Resolving dependencies for atomist-rugs:rug-editors:latest completed  Loading atomist-rugs:rug-editors:0.14.0 into runtime completed    TypeScript files added, run `cd .atomist && npm install`                                                                                                                                                        Running editor ConvertExistingProjectToGenerator of atomist-rugs:rug-editors:0.14.0 completed  \u2192 Project    ~/workspace/spring-boot-rest-basic (14 kb in 20 files)  \u2192 Changes    \u251c\u2500\u2500 .atomist/manifest.yml created (223 bytes)    \u251c\u2500\u2500 .atomist/manifest.yml updated (227 bytes)    \u251c\u2500\u2500 .atomist/manifest.yml updated (235 bytes)    \u251c\u2500\u2500 .atomist/manifest.yml updated (235 bytes)    \u251c\u2500\u2500 .atomist/manifest.yml updated (179 bytes)    \u251c\u2500\u2500 .atomist/manifest.yml updated (128 bytes)    \u251c\u2500\u2500 .atomist/manifest.yml updated (113 bytes)    \u251c\u2500\u2500 .atomist/manifest.yml updated (105 bytes)    \u251c\u2500\u2500 .atomist/manifest.yml updated (103 bytes)    \u251c\u2500\u2500 .atomist/package.json created (57 bytes)    \u251c\u2500\u2500 .atomist/tsconfig.json created (627 bytes)    \u251c\u2500\u2500 .atomist/.gitignore created (27 bytes)    \u251c\u2500\u2500 .atomist/editors/NewSpringBootService.ts created (602 bytes)    \u251c\u2500\u2500 .atomist/tests/NewSpringBootService.rt created (153 bytes)    \u251c\u2500\u2500 .atomist/editors/NewSpringBootService.ts updated (580 bytes)    \u251c\u2500\u2500 .atomist/editors/NewSpringBootService.ts updated (583 bytes)    \u251c\u2500\u2500 .atomist/editors/NewSpringBootService.ts updated (584 bytes)    \u251c\u2500\u2500 .atomist/tests/NewSpringBootService.rt updated (155 bytes)    \u251c\u2500\u2500 .atomist/tests/NewSpringBootService.rt updated (880 bytes)    \u2514\u2500\u2500 .atomist.yml created (2 kb)   The  group_id  and  archive_name  parameters, coupled with the name of the Rug \ngenerator, define the fully-qualified name of the  Rug archive  (the \npublished package of a Rug).  Once this is completed, the project should look like this:  ~/workspace/spring-boot-rest-basic      \u251c\u2500\u2500 .atomist      \u2502\u00a0\u00a0 \u251c\u2500\u2500 editors      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 NewSpringBootService.ts      \u2502\u00a0\u00a0 \u251c\u2500\u2500 .gitignore      \u2502\u00a0\u00a0 \u251c\u2500\u2500 manifest.yml      \u2502\u00a0\u00a0 \u251c\u2500\u2500 package.json      \u2502\u00a0\u00a0 \u251c\u2500\u2500 tests      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 project      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502   \u251c\u2500\u2500 NewSpringBootService.feature      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 \u2514\u2500\u2500 Steps.ts      \u2502\u00a0\u00a0 \u2514\u2500\u2500 tsconfig.json      \u251c\u2500\u2500 .atomist.yml      \u251c\u2500\u2500 .gitignore      \u251c\u2500\u2500 pom.xml      \u251c\u2500\u2500 .project      \u251c\u2500\u2500 README.md      \u251c\u2500\u2500 src      \u2502\u00a0\u00a0 \u251c\u2500\u2500 main      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 java      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 company      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 HomeController.java      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 MyRestServiceApplication.java      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 MyRestServiceConfiguration.java      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 application.properties      \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 logback.xml      \u2502\u00a0\u00a0 \u2514\u2500\u2500 test      \u2502\u00a0\u00a0     \u2514\u2500\u2500 java      \u2502\u00a0\u00a0         \u2514\u2500\u2500 com      \u2502\u00a0\u00a0             \u2514\u2500\u2500 company      \u2502\u00a0\u00a0                 \u251c\u2500\u2500 MyRestServiceApplicationTests.java      \u2502\u00a0\u00a0                 \u251c\u2500\u2500 MyRestServiceOutOfContainerIntegrationTests.java      \u2502\u00a0\u00a0                 \u2514\u2500\u2500 MyRestServiceWebIntegrationTests.java   The  .atomist  directory contains a manifest file,\ndeclares  TypeScript  dependencies in the  package.json  file, and\nhas the Rug generator script and its associated test in appropriate\nsubdirectories.   Because all of the Atomist files are hidden under the  .atomist \ndirectory, our generator project is still a fully functioning,\nperfectly valid Spring Boot project.   Let\u2019s take a close look at the Rug generator script.",
            "title": "Anatomy of a Generator"
        },
        {
            "location": "/user-guide/rug/generators/#a-basic-generator-script",
            "text": "The generator script\u2019s  populate  method is invoked after\nthe model project\u2019s files have been copied to the target project.  The default \ncontents of the generator script we added above look like the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 import   {   PopulateProject   }   from   '@atomist/rug/operations/ProjectGenerator' ;  import   {   Project   }   from   '@atomist/rug/model/Project' ;  import   {   Pattern   }   from   '@atomist/rug/operations/RugOperation' ;  import   {   Generator ,   Parameter ,   Tags   }   from   '@atomist/rug/operations/Decorators' ;  @Generator ( \"NewSpringBootService\" ,   \"Rug project for Spring Rest Services\" )  @Tags ( \"documentation\" )  export   class   NewSpringBootService   implements   PopulateProject   { \n\n     populate ( project :  Project )   { \n         console . log ( `Creating  ${ project . name () } ` ); \n     }  }  export   const   newSpringBootService   =   new   NewSpringBootService ();    After importing the TypeScript Rug typings for the elements we will be\nusing (lines 1\u20134), we use a  decorator  to declare the\nfollowing class a generator (line 6).  The first argument to the @Generator  decorator is the name of the generator.\nThis is the externally visible and discoverable name of the Rug.  This\nname, along with the generators group and repository, form the\nfully-qualified name of the generator.  The second argument to the @Generator  decorator is a brief description of the\ngenerator.  On line 5 we use the  @Tags  decorator to\napply some tags to our generator so people can search for it more\neasily.  Using the  @Tags  decorator is optional but\nhighly recommended.  We define the class that will implement our generator on line 8.  A\ngenerator implements the  PopulateProject  interface.\nThis interface requires the  populate ( Project )  method to\nbe defined, which we do on line 10 (more on that below).  It is\nconvention for the generator and the class that implements it to have\nthe same name.  In the last line of the generator script we export an instance of that\ngenerator to make it visible to the Rug runtime when it executed (line 15).\nLike the generator class name, the name of the  const \ndoes not matter, but it is convention to use the generator/class name,\nlower-casing the first letter.  As explained earlier, a generator copies the content of the project where it \nlives into a target directory before applying changes. The definition of our \ngenerator currently performs only the copy (this is done automatically for us).\nLet\u2019s now amend the generator to modify the copied contents, for example to \nchange the name of the copied class. An action users would likely do manually.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34 import   {   PopulateProject   }   from   '@atomist/rug/operations/ProjectGenerator' ;  import   {   Project   }   from   '@atomist/rug/model/Project' ;  import   {   File   }   from   '@atomist/rug/model/File' ;  import   {   Pattern   }   from   '@atomist/rug/operations/RugOperation' ;  import   {   Generator ,   Parameter ,   Tags   }   from   '@atomist/rug/operations/Decorators' ;  import   {   PathExpressionEngine   }   from   '@atomist/rug/tree/PathExpression' ;   @Generator ( \"NewSpringBootService\" ,   \"Rug project for Spring Rest Services\" )  @Tags ( \"documentation\" )  export   class   NewSpringBootService   implements   PopulateProject   { \n\n     @Parameter ({ \n         displayName :   \"Class Name\" , \n         description :   \"name for the service class\" , \n         pattern :  Pattern.java_class , \n         validInput :   \"a valid Java class name, which contains only alphanumeric characters, $ and _ and does not start with a number\" , \n         minLength :  1 , \n         maxLength :  50 , \n         required :  false \n     }) \n     service_class_name :  string ; \n\n     populate ( project :  Project )   { \n         console . log ( `Creating  ${ project . name () } ` );           let   eng :  PathExpressionEngine   =   project . context (). pathExpressionEngine ()           eng . with < File > ( project ,   '/src//File()[contains(@name, \"MyRestService\")]' ,   f   =>   {               f . replace ( \"MyRestService\" ,   this . service_class_name );               f . setPath ( f . path (). replace ( \"MyRestService\" ,   this . service_class_name ));           });       }  }  export   const   newSpringBootService   =   new   NewSpringBootService ();    Rugs, like typical methods, often take parameters to customize their\nbehavior.  Generators have a required parameter: the name of the\nproject that will be generated.  The project name parameter is\nautomatically defined for a generate.  All other parameters used by\nthe generator must be declared.  Parameters are declared using the @Parameter  decorator (line 10).  The  @Parameter  decorator provides the metadata for the parameter while\nthe subsequent instance variable declaration provides the name and\ndefault value, if any.  The  @Parameter  decorator\naccepts a single argument, a JavaScript object.  The JavaScript object\npassed to  @Parameter  accepts all of the property names\nshown above, but only  pattern  is mandatory.  The  pattern  property\nprovides an anchored regular expression used to validate user input.\nHere we use one the Atomist pre-defined  Pattern s (line\n13).  Despite the fact that the other  @Parameter \nproperties are option, it is highly recommended to provide them to\nhelp consumers of your generator.  The  populate  method takes a single argument, a Project  object.  The  Project  provided to\nthis method contains the contents of the generated project, i.e., all\nthe files copied from the generator project.  Using this object, you\ncan alter the exact copy of the original project as appropriate so the\nresult is the new project with the desired contents.  To effect your\ndesired changes, you have the power of TypeScript and the Rug\nprogramming model.    In that regards, as Atomist comprehends filesystem and code structure, the Rug\nprogramming model offers a powerful mechanism to make the above example a lot\nless brittle through  path expressions . In this generator script, we query \nthe filesystem for all files containing a specific token in their names \n(line 27). Then for each one of these files, we replace its content (line 28) \nand move it to different path (line 29).   Rugs should be tested as any other pieces of software, Rug and its runtime \nnatively supports a  BDD-centric testing approach , based on the \nGherkin DSL.  The test for our generator could be described as follows in  .atomist/tests/NewSpringBootService.feature :  Feature:  Creating new Spring Rest Service projects  Scenario:  A default Spring Rest project structure should be generated   Given  an empty project    When  running the Spring Boot Service generator    Then  the name of the application file is changed    Then  the name of the configuration file is changed    Then  the name of the application tests file is changed    Then  the name of the integration tests file is changed    Then  the name of the web integration tests file is changed    Then  the name of the class in the application file is changed    Then  the name of the class in the configuration file is changed    Then  the name of the class in the application tests file is changed    Then  the name of the class in the integration tests file is changed    Then  the name of the class in the web integration tests is changed   Implemented by the steps in  .atomist/tests/Steps.ts  file:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42 import   {   Given ,   When ,   Then ,   ProjectScenarioWorld   }   from   \"@atomist/rug/test/project/Core\" ;  import   {   Result   }   from   \"@atomist/rug/test/Result\" ;  import   {   Project   }   from   \"@atomist/rug/model/Project\" ;  Given ( \"an empty project\" ,   p   =>   {})  When ( \"running the Spring Boot Service generator\" ,   ( p :  Project ,   world :  ProjectScenarioWorld )   =>   { \n   let   generator   =   world . generator ( \"NewSpringBootService\" ); \n   world . generateWith ( generator ,   { \"service_class_name\" :   \"CalendarService\" });  })  Then ( \"the name of the application file is changed\" ,   ( p :  Project )   =>  \n     p . fileExists ( \"src/main/java/com/company/CalendarServiceApplication.java\" )  )  Then ( \"the name of the configuration file is changed\" ,   ( p :  Project )   =>  \n     p . fileExists ( \"src/main/java/com/company/CalendarServiceConfiguration.java\" )  )  Then ( \"the name of the application tests file is changed\" ,   ( p :  Project )   =>  \n     p . fileExists ( \"src/test/java/com/company/CalendarServiceApplicationTests.java\" )  )  Then ( \"the name of the integration tests file is changed\" ,   ( p :  Project )   =>  \n     p . fileExists ( \"src/test/java/com/company/CalendarServiceOutOfContainerIntegrationTests.java\" )  )  Then ( \"the name of the web integration tests file is changed\" ,   ( p :  Project )   =>  \n     p . fileExists ( \"src/test/java/com/company/CalendarServiceWebIntegrationTests.java\" )  )  Then ( \"the name of the class in the application file is changed\" ,   ( p :  Project )   =>  \n     p . findFile ( \"src/main/java/com/company/CalendarServiceApplication.java\" ). contains ( \"CalendarServiceApplication\" )  )  Then ( \"the name of the class in the configuration file is changed\" ,   ( p :  Project )   =>  \n     p . findFile ( \"src/main/java/com/company/CalendarServiceConfiguration.java\" ). contains ( \"CalendarServiceConfiguration\" )  )  Then ( \"the name of the class in the application tests file is changed\" ,   ( p :  Project )   =>  \n     p . findFile ( \"src/test/java/com/company/CalendarServiceApplicationTests.java\" ). contains ( \"CalendarServiceApplicationTests\" )  )  Then ( \"the name of the class in the integration tests file is changed\" ,   ( p :  Project )   =>  \n     p . findFile ( \"src/test/java/com/company/CalendarServiceOutOfContainerIntegrationTests.java\" ). contains ( \"CalendarServiceOutOfContainerIntegrationTests\" )  )  Then ( \"the name of the class in the web integration tests is changed\" ,   ( p :  Project )   =>  \n     p . findFile ( \"src/test/java/com/company/CalendarServiceWebIntegrationTests.java\" ). contains ( \"CalendarServiceWebIntegrationTests\" )  )    If you\u2019re not familiar with this approach, the  .atomist/tests/NewSpringBootService.feature  describes our tests in a set of\nhypotheses and expectations. All those steps are implemented in the  .atomist/tests/Steps.ts  file which is executed when the test is run:  $  rug  test  Resolving dependencies for com.company.rugs:spring-boot-service:0.13.0:local completed  Invoking TypeScript Compiler on ts script sources                                                                                                                                                                    Created .atomist/tests/Steps.js.map                                                                                                                                                                                Created .atomist/tests/Steps.js                                                                                                                                                                                    Created .atomist/editors/NewSpringBootService.js.map                                                                                                                                                               Created .atomist/editors/NewSpringBootService.js                                                                                                                                                                 Processing script sources completed  Loading com.company.rugs:spring-boot-service:0.13.0:local completed    Executing feature Creating new Spring Rest Service projects                                                                                                                                                         Executing test scenario A default Spring Rest project structure should be generated                                                                                                                             Creating project_name                                                                                                                                                                                           Running tests in com.company.rugs:spring-boot-service:0.13.0:local completed  Successfully executed 1 of 1 test: Test SUCCESS   Assuming we change one of the hypotheses to make it fail,  rug  would notify us\nwith a relevant error message:  $  rug  test  Resolving dependencies for com.company.rugs:spring-boot-service:0.13.0:local completed  Invoking TypeScript Compiler on ts script sources                                                                                                                                                                    Created .atomist/tests/Steps.js.map                                                                                                                                                                                Created .atomist/tests/Steps.js                                                                                                                                                                                    Created .atomist/editors/NewSpringBootService.js                                                                                                                                                                   Created .atomist/editors/NewSpringBootService.js.map                                                                                                                                                             Processing script sources completed  Loading com.company.rugs:spring-boot-service:0.13.0:local completed    Executing feature Creating new Spring Rest Service projects                                                                                                                                                         Executing test scenario A default Spring Rest project structure should be generated                                                                                                                             Creating project_name                                                                                                                                                                                           Running tests in com.company.rugs:spring-boot-service:0.13.0:local completed  \u2192 Test Report    Failures    \u2514\u2500\u252c Creating new Spring Rest Service projects      \u2514\u2500\u252c A default Spring Rest project structure should be generated        \u251c\u2500\u252c the name of the application file is changed: Failed        | \u2514\u2500\u2500 function (p) {      return p.fileExists(\"src/main/java/com/company/CalndarServiceApplication.java\");  }        \u251c\u2500\u2500 the name of the application tests file is changed: Passed        \u251c\u2500\u2500 the name of the class in the application file is changed: Passed        \u251c\u2500\u2500 the name of the class in the application tests file is changed: Passed        \u251c\u2500\u2500 the name of the class in the configuration file is changed: Passed        \u251c\u2500\u2500 the name of the class in the integration tests file is changed: Passed        \u251c\u2500\u2500 the name of the class in the web integration tests is changed: Passed        \u251c\u2500\u2500 the name of the configuration file is changed: Passed        \u251c\u2500\u2500 the name of the integration tests file is changed: Passed        \u2514\u2500\u2500 the name of the web integration tests file is changed: Passed  Unsuccessfully executed 1 of 1 test: Test FAILURE   As you can see, Rug generator scripts are simple functions that apply\nchanges against a freshly copy of your its content. This changes may be \nparametarized to tailor the result to the user\u2019s expectations. Finally, \nfollowing a test-driven approach, generators can be quickly validated before\nbeing released.",
            "title": "A Basic Generator Script"
        },
        {
            "location": "/user-guide/rug/reviewers/",
            "text": "In the last few years, code review has become a strong asset for any\nteam looking at producing high quality software and reducing\nbugs. However, with the sheer size of projects, it can become highly\ntedious to track all changes properly and a balance must be found\nbetween thorough code reviews and the time they consume.\n\n\nRug reviewers allievate some of that burden by letting your team\ncodifying some of your peer reviews into automatable operations.\n\n\nA Basic Reviewer\n\u00b6\n\n\nThe following reviewer ensures each Markdown file of a MkDocs (a\ndocumentation builder tool) project do not override the top-level\nheader which is set by MkDocs from its settings.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\nimport\n \n{\n \nReviewProject\n \n}\n \nfrom\n \n\"@atomist/rug/operations/ProjectReviewer\"\n\n\nimport\n \n{\n \nReviewer\n,\n \nTags\n \n}\n \nfrom\n \n\"@atomist/rug/operations/Decorators\"\n\n\nimport\n \n{\n \nReviewResult\n,\n \nReviewComment\n,\n \nSeverity\n \n}\n \nfrom\n \n'@atomist/rug/operations/RugOperations'\n\n\nimport\n \n{\n \nPathExpressionEngine\n \n}\n \nfrom\n \n\"@atomist/rug/tree/PathExpression\"\n\n\nimport\n \n{\n \nProject\n \n}\n \nfrom\n \n'@atomist/rug/model/Project'\n\n\nimport\n \n{\n \nLine\n \n}\n \nfrom\n \n'@atomist/rug/model/Line'\n\n\n\n@Reviewer\n(\n\"DoNotOverrideTopLevelHeaderInMkDocsProject\"\n,\n\n          \n\"checks Markdown document do not have a top-level header\"\n)\n\n\n@Tags\n(\n\"markdown\"\n,\n \n\"documentation\"\n,\n \n\"mkdocs\"\n)\n\n\nclass\n \nDoNotOverrideTopLevelHeaderInMkDocsProject\n \nimplements\n \nReviewProject\n \n{\n\n\n    \nreview\n(\nproject\n: \nProject\n)\n:\n \nReviewResult\n \n{\n\n        \nlet\n \neng\n: \nPathExpressionEngine\n \n=\n \nproject\n.\ncontext\n().\npathExpressionEngine\n()\n\n\n        \nlet\n \nreview\n \n=\n \nReviewResult\n.\nempty\n(\nthis\n.\nname\n)\n\n\n        \neng\n.\nwith\n<\nLine\n>\n(\nproject\n,\n \n\"/*[Directory()[@name=\"\ndocs\n\"]]//Line()\"\n,\n \nl\n \n=>\n \n{\n\n            \nlet\n \nindex\n \n=\n \nl\n.\nvalue\n().\nindexOf\n(\n\"# \"\n)\n\n            \nif\n \n(\nindex\n \n==\n \n0\n)\n\n                \nreview\n.\nadd\n(\nnew\n \nReviewComment\n(\n\n                    \nthis\n.\nname\n,\n\n                    \nSeverity\n.\nMajor\n,\n\n                    \nl\n.\nfile\n().\npath\n(),\n\n                    \nl\n.\nnumFrom1\n(),\n\n                    \nindex\n \n+\n \n1\n\n                \n)\n\n            \n)\n\n        \n})\n\n\n        \nreturn\n \nreview\n\n    \n}\n\n\n}\n\n\nexport\n \nlet\n \nreviewer\n \n=\n \nnew\n \nDoNotOverrideTopLevelHeaderInMkDocsProject\n()\n\n\n\n\n\nThe responsibility of a reviewer is to return a \nReviewResult\n containing zero or more \nReviewComment\n instances. Reviewers use the same object model as other project operations, but cannot modify projects. (Any attempt to update a project will be ignored.) Review comments may contain the file path, line and column, of the problem.\n\n\nA Reviewer Focusing on AST Nodes\n\u00b6\n\n\nWhen you are working with AST nodes within a file produced by Antlr or another technologies (and typically returned by path expressions), there is a convenient method of adding a review comment, automatically capturing full positional information. The comments in the following listing explain:\n\n\nimport {Project} from '@atomist/rug/model/Core'\nimport {ProjectReviewer} from '@atomist/rug/operations/ProjectReviewer'\nimport {PathExpression,PathExpressionEngine} from '@atomist/rug/tree/PathExpression'\nimport {ReviewResult,ReviewComment,Severity} from '@atomist/rug/operations/RugOperation'\n\n// We can use this to get additional information from path expression matches\nimport {DecoratingPathExpressionEngine} from '@atomist/rug/ast/DecoratingPathExpressionEngine'\nimport {RichTextTreeNode} from '@atomist/rug/ast/TextTreeNodeOps'\nimport {Parameter, Reviewer} from '@atomist/rug/operations/Decorators'\n\n// Import Java types and helpers\nimport * as java from '@atomist/rug/ast/java/Types'\n\nexport class CatchThrowable implements ProjectReviewer {\n\n    name = \"CatchThrowable\"\n    description = \"Look for particular throwables\"\n\n    // Note the use of the well-known validation pattern @java_identifier\n    @Parameter({description: \"Exception to look for\", pattern: \"@java_identifier\"})\n    exception: string\n\n    review(project: Project) {\n        // Use a decorating PathExpressionEngine to get RichTextTreeNode\n        // mixin returned from path expression evaluation\n      const eng = \n      new DecoratingPathExpressionEngine(project.context().pathExpressionEngine())\n\n      const rr = ReviewResult.empty(this.name)\n\n        // Uses well-known path expression.\n        // Works with RichTextTreeNode\n      eng.withExpression<RichTextTreeNode>(project, new java.Catch(this.exception), n => {   \n        // Because this comment concerns a node within the file's AST\n        // the commentConcerning function automatically takes care of finding th location: file path, line and column \n        rr.add(n.commentConcerning(\n                    this.name,\n                    Severity.Major)\n        )\n       })\n       return rr\n    }\n}\n\nexport const editor = new CatchThrowable()\n\n\n\nThe well-known Java path expression \nCatch\n is as follows, and is a useful model for user-authored path expressions. It builds an interpolated string from its construtor parameters and passes the result to its superclass\u2019s constructor:\n\n\nexport class Catch extends PathExpression<Project,TextTreeNode> {\n\n    constructor(exception: string) {\n        super(`//JavaFile()//catchClause//catchType[@value='${exception}']`)\n    }\n}",
            "title": "Reviewers"
        },
        {
            "location": "/user-guide/rug/reviewers/#a-basic-reviewer",
            "text": "The following reviewer ensures each Markdown file of a MkDocs (a\ndocumentation builder tool) project do not override the top-level\nheader which is set by MkDocs from its settings.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34 import   {   ReviewProject   }   from   \"@atomist/rug/operations/ProjectReviewer\"  import   {   Reviewer ,   Tags   }   from   \"@atomist/rug/operations/Decorators\"  import   {   ReviewResult ,   ReviewComment ,   Severity   }   from   '@atomist/rug/operations/RugOperations'  import   {   PathExpressionEngine   }   from   \"@atomist/rug/tree/PathExpression\"  import   {   Project   }   from   '@atomist/rug/model/Project'  import   {   Line   }   from   '@atomist/rug/model/Line'  @Reviewer ( \"DoNotOverrideTopLevelHeaderInMkDocsProject\" , \n           \"checks Markdown document do not have a top-level header\" )  @Tags ( \"markdown\" ,   \"documentation\" ,   \"mkdocs\" )  class   DoNotOverrideTopLevelHeaderInMkDocsProject   implements   ReviewProject   { \n\n     review ( project :  Project ) :   ReviewResult   { \n         let   eng :  PathExpressionEngine   =   project . context (). pathExpressionEngine () \n\n         let   review   =   ReviewResult . empty ( this . name ) \n\n         eng . with < Line > ( project ,   \"/*[Directory()[@name=\" docs \"]]//Line()\" ,   l   =>   { \n             let   index   =   l . value (). indexOf ( \"# \" ) \n             if   ( index   ==   0 ) \n                 review . add ( new   ReviewComment ( \n                     this . name , \n                     Severity . Major , \n                     l . file (). path (), \n                     l . numFrom1 (), \n                     index   +   1 \n                 ) \n             ) \n         }) \n\n         return   review \n     }  }  export   let   reviewer   =   new   DoNotOverrideTopLevelHeaderInMkDocsProject ()   \nThe responsibility of a reviewer is to return a  ReviewResult  containing zero or more  ReviewComment  instances. Reviewers use the same object model as other project operations, but cannot modify projects. (Any attempt to update a project will be ignored.) Review comments may contain the file path, line and column, of the problem.",
            "title": "A Basic Reviewer"
        },
        {
            "location": "/user-guide/rug/reviewers/#a-reviewer-focusing-on-ast-nodes",
            "text": "When you are working with AST nodes within a file produced by Antlr or another technologies (and typically returned by path expressions), there is a convenient method of adding a review comment, automatically capturing full positional information. The comments in the following listing explain:  import {Project} from '@atomist/rug/model/Core'\nimport {ProjectReviewer} from '@atomist/rug/operations/ProjectReviewer'\nimport {PathExpression,PathExpressionEngine} from '@atomist/rug/tree/PathExpression'\nimport {ReviewResult,ReviewComment,Severity} from '@atomist/rug/operations/RugOperation'\n\n// We can use this to get additional information from path expression matches\nimport {DecoratingPathExpressionEngine} from '@atomist/rug/ast/DecoratingPathExpressionEngine'\nimport {RichTextTreeNode} from '@atomist/rug/ast/TextTreeNodeOps'\nimport {Parameter, Reviewer} from '@atomist/rug/operations/Decorators'\n\n// Import Java types and helpers\nimport * as java from '@atomist/rug/ast/java/Types'\n\nexport class CatchThrowable implements ProjectReviewer {\n\n    name = \"CatchThrowable\"\n    description = \"Look for particular throwables\"\n\n    // Note the use of the well-known validation pattern @java_identifier\n    @Parameter({description: \"Exception to look for\", pattern: \"@java_identifier\"})\n    exception: string\n\n    review(project: Project) {\n        // Use a decorating PathExpressionEngine to get RichTextTreeNode\n        // mixin returned from path expression evaluation\n      const eng = \n      new DecoratingPathExpressionEngine(project.context().pathExpressionEngine())\n\n      const rr = ReviewResult.empty(this.name)\n\n        // Uses well-known path expression.\n        // Works with RichTextTreeNode\n      eng.withExpression<RichTextTreeNode>(project, new java.Catch(this.exception), n => {   \n        // Because this comment concerns a node within the file's AST\n        // the commentConcerning function automatically takes care of finding th location: file path, line and column \n        rr.add(n.commentConcerning(\n                    this.name,\n                    Severity.Major)\n        )\n       })\n       return rr\n    }\n}\n\nexport const editor = new CatchThrowable() \n\nThe well-known Java path expression  Catch  is as follows, and is a useful model for user-authored path expressions. It builds an interpolated string from its construtor parameters and passes the result to its superclass\u2019s constructor:  export class Catch extends PathExpression<Project,TextTreeNode> {\n\n    constructor(exception: string) {\n        super(`//JavaFile()//catchClause//catchType[@value='${exception}']`)\n    }\n}",
            "title": "A Reviewer Focusing on AST Nodes"
        },
        {
            "location": "/user-guide/rug/extensions/",
            "text": "Rug extensions represent different types of source code, events, and\nsystems which Rug can understand and interact with.  Each Rug\nextension defines a set of operations you can use to get and\nmodify the system or language it represents.\n\n\nA fundamental Rug extension is \nProject\n.  \nProject\n represents a\nsource code repository and allows you get information about the\nrepository, e.g., if a file exists, and to alter the repository, e.g.,\nadd or delete a file.\n\n\nAtomist makes several Rug extensions available to all its users.  Many\nof the standard extensions provide understanding and operations to\nalter common software development languages like Java, C#, Python,\nClojure, and Scala.  Other extensions provide connectivity to common\nsoftware development tools like CI platforms.",
            "title": "Extensions"
        },
        {
            "location": "/user-guide/rug/path-expressions/",
            "text": "Rug path expressions, inspired by \nXPath\n, provide a means to\nnavigate entities in Rug with high precision.  From selecting events\nwith highly-specific criteria to matching only certain \ncatch\n blocks,\npath expressions from a powerful and flexible way to select code and\nevents to operate on.\n\n\n\n\n\nSurgical selections\n\u00b6\n\n\nWhen running a Rug against a \nProject\n, you can locate a file with a\nknown name with some code like the following line.  string like this:\n\n\nproject\n.\nfindFile\n(\n\"mkdocs.yml\"\n).\nreplace\n(\n\"<NAME>\"\n,\n \nproject\n.\nname\n())\n\n\n\n\n\n\nThis approach provides a simple mechanism for finding a file within a\nproject if you know its path.  But what if you want to select a file\nbased on something other than its path?  What if you want to select\nseveral files that all satisfy common criteria?  What if you want to\nselect just a part of a file?  To allow users to select elements with\nsuch flexibility and specificity, Atomist provides a powerful tool\ncalled \npath expressions\n.\n\n\nQuery the file system\n\u00b6\n\n\nThe above code selecting a file by path can be written as a path\nexpression.  First, we must import the \nPathExpressionEngine\n\n\nimport\n \n{\n \nPathExpressionEngine\n \n}\n \nfrom\n \n\"@atomist/rug/tree/PathExpression\"\n;\n\n\n\n\n\n\nand fetch the \nPathExpressionEngine\n from the\n\nProject\n context.\n\n\nlet\n \neng\n: \nPathExpressionEngine\n \n=\n \nproject\n.\ncontext\n().\npathExpressionEngine\n();\n\n\n\n\n\n\nWe then rewrite the \nfindFile\n()\n function call using the\n\nPathExpressionEngine\n method \nwith\n()\n,\nsupplying the appropriate path expression to select the file based on\nname.\n\n\neng\n.\nwith\n<\nFile\n>\n(\nproject\n,\n \n\"/*[@name='mkdocs.yml']\"\n,\n \nf\n \n=>\n \n{\n\n    \nf\n.\nreplace\n(\n\"<NAME>\"\n,\n \nproject\n.\nname\n())\n\n\n})\n\n\n\n\n\n\nThe final argument of of the \nwith\n()\n method is a\nfunction which receives as its argument all \nFile\ns that\nsatisfy the path expression, one at a time, and can then operate on\neach match in turn.  Here we call the \nreplace\n()\n method\njust as we did before.  For this simple case, using path expressions\nmay is a bit more involved, but it demonstrates the concepts well.\n\n\nQuery the code\n\u00b6\n\n\nWhile querying a project for files using path expressions allow for\ngreater flexibility than the other means of navigating files in a\nproject, a more powerful way is to query the content of that file to\nmanipulate directly. This file is a YAML structure, we therefore use a\nspecific path expression engine that knows how to navigate this kind\nof structure.\n\n\nFirst the expected import statements:\n\n\nimport\n \n*\n \nas\n \nyaml\n \nfrom\n \n\"@atomist/rug/ast/yaml/Types\"\n\n\nimport\n \n{\n \nYamlPathExpressionEngine\n \n}\n \nfrom\n \n\"@atomist/rug/ast/yaml/YamlPathExpressionEngine\"\n\n\n\n\n\n\nLet\u2019s amend our previous example:\n\n\nlet\n \neng\n: \nPathExpressionEngine\n \n=\n \nnew\n \nYamlPathExpressionEngine\n(\nproject\n.\ncontext\n().\npathExpressionEngine\n())\n\n\n\neng\n.\nwith\n<\nyaml\n.\nYamlString\n>\n(\nproject\n,\n \n\"/*[@name='mkdocs.yml']/YamlFile()/*[@name='site_name']\"\n,\n \nfield\n \n=>\n \n{\n\n    \nfield\n.\nupdateText\n(\nproject\n.\nname\n())\n\n\n})\n\n\n\n\n\n\nFirst we create a specific YAML-aware path expression engine, this\nwill offer us appropriate methods to work on a YAML structure.  The\npath expression we provide begins with the familiar file system query,\nidentifying a file named \nmkdocs.yml\n.  The next step in the path\nexpression, \nYamlFile()\n is something new.  The \nYamlFile()\n step to\ntells Rug to address the file(s) it has found using the preceding\ncriteria as not just a generic \nFile\n, but a more\nspecific \nYamlFile\n.  The \nYamlFile\n type\nhas the ability to enter into the YAML syntax tree, allowing you to\nquery and select individual elements of the YAML document.  Here,\n\n/*[@name='site_name']\n tells Rug that we want fields named\n\nsite_name\n in the parsed YAML document.  Each such field in the YAML\ndocument is passed to the function defined in the third argument to\n\nwith\n()\n.  This function replaces the original value of\nthat field using the method \nfield\n.\nupdateText\n(\nproject\n.\nname\n())\n, a method defined specifically on\nthe \nyaml.YamlString\n type.",
            "title": "Path Expressions"
        },
        {
            "location": "/user-guide/rug/path-expressions/#surgical-selections",
            "text": "When running a Rug against a  Project , you can locate a file with a\nknown name with some code like the following line.  string like this:  project . findFile ( \"mkdocs.yml\" ). replace ( \"<NAME>\" ,   project . name ())   This approach provides a simple mechanism for finding a file within a\nproject if you know its path.  But what if you want to select a file\nbased on something other than its path?  What if you want to select\nseveral files that all satisfy common criteria?  What if you want to\nselect just a part of a file?  To allow users to select elements with\nsuch flexibility and specificity, Atomist provides a powerful tool\ncalled  path expressions .",
            "title": "Surgical selections"
        },
        {
            "location": "/user-guide/rug/path-expressions/#query-the-file-system",
            "text": "The above code selecting a file by path can be written as a path\nexpression.  First, we must import the  PathExpressionEngine  import   {   PathExpressionEngine   }   from   \"@atomist/rug/tree/PathExpression\" ;   and fetch the  PathExpressionEngine  from the Project  context.  let   eng :  PathExpressionEngine   =   project . context (). pathExpressionEngine ();   We then rewrite the  findFile ()  function call using the PathExpressionEngine  method  with () ,\nsupplying the appropriate path expression to select the file based on\nname.  eng . with < File > ( project ,   \"/*[@name='mkdocs.yml']\" ,   f   =>   { \n     f . replace ( \"<NAME>\" ,   project . name ())  })   The final argument of of the  with ()  method is a\nfunction which receives as its argument all  File s that\nsatisfy the path expression, one at a time, and can then operate on\neach match in turn.  Here we call the  replace ()  method\njust as we did before.  For this simple case, using path expressions\nmay is a bit more involved, but it demonstrates the concepts well.",
            "title": "Query the file system"
        },
        {
            "location": "/user-guide/rug/path-expressions/#query-the-code",
            "text": "While querying a project for files using path expressions allow for\ngreater flexibility than the other means of navigating files in a\nproject, a more powerful way is to query the content of that file to\nmanipulate directly. This file is a YAML structure, we therefore use a\nspecific path expression engine that knows how to navigate this kind\nof structure.  First the expected import statements:  import   *   as   yaml   from   \"@atomist/rug/ast/yaml/Types\"  import   {   YamlPathExpressionEngine   }   from   \"@atomist/rug/ast/yaml/YamlPathExpressionEngine\"   Let\u2019s amend our previous example:  let   eng :  PathExpressionEngine   =   new   YamlPathExpressionEngine ( project . context (). pathExpressionEngine ())  eng . with < yaml . YamlString > ( project ,   \"/*[@name='mkdocs.yml']/YamlFile()/*[@name='site_name']\" ,   field   =>   { \n     field . updateText ( project . name ())  })   First we create a specific YAML-aware path expression engine, this\nwill offer us appropriate methods to work on a YAML structure.  The\npath expression we provide begins with the familiar file system query,\nidentifying a file named  mkdocs.yml .  The next step in the path\nexpression,  YamlFile()  is something new.  The  YamlFile()  step to\ntells Rug to address the file(s) it has found using the preceding\ncriteria as not just a generic  File , but a more\nspecific  YamlFile .  The  YamlFile  type\nhas the ability to enter into the YAML syntax tree, allowing you to\nquery and select individual elements of the YAML document.  Here, /*[@name='site_name']  tells Rug that we want fields named site_name  in the parsed YAML document.  Each such field in the YAML\ndocument is passed to the function defined in the third argument to with () .  This function replaces the original value of\nthat field using the method  field . updateText ( project . name ()) , a method defined specifically on\nthe  yaml.YamlString  type.",
            "title": "Query the code"
        },
        {
            "location": "/user-guide/rug/microgrammars/",
            "text": "Microgrammars are \n\u201cpartial grammars designed to extract checker-specific features only\u201d\n (see \nthis post by Adrian Colyer\n for an introduction to the concept of Micro-grammars).\n\n\nWhen there is no existing \nRug Language Extension\n and plain file manipulation is too clumsy and random, the microgrammar support in Rug provides an effective way of declaring a way to safely select and extract a portion of a file so that it can be inspected and manipulated by your Rugs.\n\n\n\n\nFor more on microgrammars we strongly recommend you check out this \npost by Adrian Colyer\n.\n\n\n\n\nA Rug micro-grammar in Action\n\u00b6\n\n\nThe following code shows a microgrammar being declared in a Rug TypeScript editor:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\nclass\n \nMicrogrammarSampleEditor\n \nimplements\n \nProjectEditor\n \n{\n\n  \nname\n: \nstring\n \n=\n \n\"MicrogrammarSampleEditor\"\n\n  \ndescription\n: \nstring\n \n=\n \n\"Demonstrates using a microgrammar\"\n\n\n  \nedit\n(\nproject\n: \nProject\n)\n \n{\n\n    \nlet\n \nmg\n \n=\n \nnew\n \nMicrogrammar\n(\n'modelVersion'\n,\n \n`<modelVersion>$mv1</modelVersion`\n,\n\n                \n{\n \nmv1\n \n:\n \n'\u00a7[a-zA-Z0-9_\\\\.]+\u00a7'\n \n}\n \n)\n\n\n    \nlet\n \neng\n: \nPathExpressionEngine\n \n=\n \nproject\n.\ncontext\n().\npathExpressionEngine\n().\naddType\n(\nmg\n)\n\n\n    \neng\n.\nwith\n<\nTextTreeNode\n>\n(\nproject\n,\n \n\"/*[@name='pom.xml']/modelVersion()/mv1()\"\n,\n \nn\n \n=>\n \n{\n\n\n      \nif\n \n(\nn\n.\nvalue\n()\n \n!=\n \n\"4.0.0\"\n)\n \nproject\n.\nfail\n(\n\"\"\n \n+\n \nn\n.\nvalue\n())\n\n\n      \nlet\n \nmsg\n \n=\n \n`The node is \n${\nn\n}\n`\n\n\n      \nn\n.\nupdate\n(\n'4.0.1'\n)\n\n    \n})\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nThis code breaks down as follows:\n\n\n\n\nLines 6 and 7\n - This is where the microgrammar is declared. The microgrammar is called \nmodelVersion\n and we are looking for anywhere in the file that matches \n<modelVersion>$mv1</modelVersion\n. The \n$mv1\n is the microgrammar\u2019s marker for a submatcher, holding the content we want to extract when the microgrammar matches. Finally on Line 7 we are declaring the submatcher, associating it with a regular expression that declares what the structure of the \nmv1\n content should be. The \u00a7 characters delineate a regular expression.\n\n\nLine 9\n - Adds this new microgrammar to this \nRug\u2019s path expression\n engine so that it can be applied.\n\n\nLine 11\n - Applies a \nRug path expression\n to the project, specifying that we are interested in any file in the project whose name begins with \npom.xml\n.\n\n\nLine 11\n - Applies a \nRug path expression\n to the project, specifying that we are interested in any file in the project whose name begins with \npom.xml\n. Then your new \nmodelVersion\n microgrammar is applied to those files and the contents of the microgrammar\u2019s \nmv1\n is made available and assigned to the variable \nn\n.\n\n\nLine 12\n - Inspecting the value of \nn\n the project editor is triggered to \nfail\n its editing if the value of \nn\n is not \n4.0.0\n.\n\n\nLine 15\n - The value of \nn\n as extracted using the micro-grammar, is embedded into a string message.\n\n\nLine 17\n - Finally the value of \nn\n is set to something new by calling the \nupdate\n method.\n\n\n\n\nThe result is: the modelVersion element\u2019s value is changed from 4.0.0 to 4.0.1 in the pom.xml file.\n\n\nThis little example hopefully demonstrates some of the real power of Rug microgrammars. You can copy a piece of the file you want to modify, pull the bits that matter to you out into submatchers, and then look at them or change them in the editor code. The parsing instruction looks like the content of the file, unlike regular expressions or any other parsing specification.\n\n\nWith a Rug microgrammar you can select, inspect and replace a set of values identified within a context in a file elegantly and meaningfully without the need for a full \nRug Language Extension\n.",
            "title": "Microgrammars"
        },
        {
            "location": "/user-guide/rug/microgrammars/#a-rug-micro-grammar-in-action",
            "text": "The following code shows a microgrammar being declared in a Rug TypeScript editor:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20 class   MicrogrammarSampleEditor   implements   ProjectEditor   { \n   name :  string   =   \"MicrogrammarSampleEditor\" \n   description :  string   =   \"Demonstrates using a microgrammar\" \n\n   edit ( project :  Project )   { \n     let   mg   =   new   Microgrammar ( 'modelVersion' ,   `<modelVersion>$mv1</modelVersion` , \n                 {   mv1   :   '\u00a7[a-zA-Z0-9_\\\\.]+\u00a7'   }   ) \n\n     let   eng :  PathExpressionEngine   =   project . context (). pathExpressionEngine (). addType ( mg ) \n\n     eng . with < TextTreeNode > ( project ,   \"/*[@name='pom.xml']/modelVersion()/mv1()\" ,   n   =>   { \n\n       if   ( n . value ()   !=   \"4.0.0\" )   project . fail ( \"\"   +   n . value ()) \n\n       let   msg   =   `The node is  ${ n } ` \n\n       n . update ( '4.0.1' ) \n     }) \n   }  }    This code breaks down as follows:   Lines 6 and 7  - This is where the microgrammar is declared. The microgrammar is called  modelVersion  and we are looking for anywhere in the file that matches  <modelVersion>$mv1</modelVersion . The  $mv1  is the microgrammar\u2019s marker for a submatcher, holding the content we want to extract when the microgrammar matches. Finally on Line 7 we are declaring the submatcher, associating it with a regular expression that declares what the structure of the  mv1  content should be. The \u00a7 characters delineate a regular expression.  Line 9  - Adds this new microgrammar to this  Rug\u2019s path expression  engine so that it can be applied.  Line 11  - Applies a  Rug path expression  to the project, specifying that we are interested in any file in the project whose name begins with  pom.xml .  Line 11  - Applies a  Rug path expression  to the project, specifying that we are interested in any file in the project whose name begins with  pom.xml . Then your new  modelVersion  microgrammar is applied to those files and the contents of the microgrammar\u2019s  mv1  is made available and assigned to the variable  n .  Line 12  - Inspecting the value of  n  the project editor is triggered to  fail  its editing if the value of  n  is not  4.0.0 .  Line 15  - The value of  n  as extracted using the micro-grammar, is embedded into a string message.  Line 17  - Finally the value of  n  is set to something new by calling the  update  method.   The result is: the modelVersion element\u2019s value is changed from 4.0.0 to 4.0.1 in the pom.xml file.  This little example hopefully demonstrates some of the real power of Rug microgrammars. You can copy a piece of the file you want to modify, pull the bits that matter to you out into submatchers, and then look at them or change them in the editor code. The parsing instruction looks like the content of the file, unlike regular expressions or any other parsing specification.  With a Rug microgrammar you can select, inspect and replace a set of values identified within a context in a file elegantly and meaningfully without the need for a full  Rug Language Extension .",
            "title": "A Rug micro-grammar in Action"
        },
        {
            "location": "/user-guide/rug/templates/",
            "text": "Atomist discourages the use of templates\n\n\nOne of the guiding principles of Atomist is that editors and\ngenerators should originate from working projects and those\nprojects should remain operational under their native tooling.\nUsing templates undermines this principle.  Template are hard to\ntest and it is easy to forget to keep them up to date.  We\nrecommend transforming real project files over using templates\nhidden away under the \n.atomist/templates\n directory.\n\n\n\n\nRug Templates are files that contain parameterized content that can be\nused by Rug \ngenerators\n\nand \neditors\n.  Templates are located in the\n\n.atomist/templates\n directory.\n\n\nCurrently Rug supports using\nboth \nVelocity\n\nand \nMustache\n styles of template.\nVelocity templates must have a \n.vm\n extension.  Mustache templates\nmust have a \n.mustache\n extension.",
            "title": "Templates"
        },
        {
            "location": "/user-guide/rug/tests/",
            "text": "Rug provides a testing framework based on \nBDD\n concepts. This allows rapid, in-memory testing of Rug generators, reviewers and editors.\n\n\nThe framework is based on the well known \nGherkin BDD DSL\n and inspired by solutions built on it, such as \ncucumber-js\n. All logic is coded in TypeScript or JavaScript. If you are familiar with Cucumber (versions of which exist for many languages), you should find the Rug test framework particularly easy to learn; if not, it should still be intuitive.\n\n\n\n\nRug is designed to support Test Driven Development using the BDD style, and we\u2019ve seen the greatest productivity in its early use from those that create test scenarios and then follow the \nred\n -> \ngreen\n -> \nrefactor\n approach.\n\n\n\n\nA Quick Overview of a Rug Test\n\u00b6\n\n\nBefore taking a deeper dive, let\u2019s look at an example.\n\n\nConsider the following simple editor that will rename a Java file (imports omitted):\n\n\n@Editor\n(\n\"Renamer\"\n,\n \n\"Renames Java class\"\n)\n\n\nexport\n \nclass\n \nRenamer\n \n{\n\n\n    \nedit\n(\nproject\n: \nProject\n)\n \n{\n\n        \nlet\n \neng\n \n=\n \nproject\n.\ncontext\n().\npathExpressionEngine\n();\n\n        \neng\n.\nwith\n<\nJavaClass\n>\n(\nproject\n,\n \n\"//JavaClass()[@name='Dog']\"\n,\n \njc\n \n=>\n \n{\n\n            \njc\n.\nrename\n(\n\"Cat\"\n);\n\n    \n});\n\n\n}\n\n\n\n\n\n\nWe want to test that the editor works as intended. First, we write a Gherkin \n.feature\n file that is an easily readable description of the behaviors we expect. We\u2019ll call it \nRenaming.feature\n and place it under \n.atomist/tests\n. \n\n\nFeature:\n Renaming a Java file\n\n\n Three lines of indented content\n\n\n to describe the meaning of this feature,\n\n\n followed by one or more Scenario definitions.\n\n\n\nScenario:\n Dogs can be turned into cats\n\n\n Given \na file named src/main/java/Dog.java \n\n\n \nWhen \nedit with Renamer\n\n\n \nThen \nthere should be one file\n\n\n \nThen \nthe file is now src/main/java/Cat.java\n\n\n\n\n\n\nWalking through this definition:\n\n\n\n\nThe syntax is standard Gherkin. It is human-readable and contains a specification of the desired behavior, but not how that behavior is to be verified. \n\n\nA Gherkin \nfeature\n can contain one or more \nscenarios\n. You can include as many feature files in the \n.atomist/tests\n directory as you like.\n\n\nEach \nscenario\n is typically broken down into three blocks of \ngiven\n, \nwhen\n, \nthen\n, following the BDD style. Each of these is called a \nstep\n. Typically there is a single \nwhen\n step\u2013the execution of an editor. There are often multiple \ngiven\n and \nthen\n steps. \nthen\n steps are assertions, and it is good practice to break them up for clarity, so failures are specific.\n\n\n\n\nWe now have a clear specification of the desired behavior. How does the test infrastructure know how to execute these steps?\n\n\nAs in \ncucumber-js\n, we delegate to JavaScript or TypeScript to execute these steps. In keeping with our general preference for TypeScript, let\u2019s see the TypeScript steps corresponding to the above feature:\n\n\nimport\n \n{\n \nProject\n \n}\n \nfrom\n \n\"@atomist/rug/model/Core\"\n;\n\n\nimport\n \n{\n \nProjectEditor\n \n}\n \nfrom\n \n\"@atomist/rug/operations/ProjectEditor\"\n;\n\n\nimport\n \n{\n \nGiven\n,\n \nWhen\n,\n \nThen\n,\n \nResult\n \n}\n \nfrom\n \n\"@atomist/rug/test/Core\"\n;\n\n\n\nGiven\n(\n\"a file named src/main/java/Dog.java\"\n,\n \np\n \n=>\n \n{\n\n  \np\n.\naddFile\n(\n\"src/main/java/Dog.java\"\n,\n \n\"public class Dog {}\"\n);\n\n\n});\n\n\nWhen\n(\n\"edit with Renamer\"\n,\n \np\n \n=>\n \n{\n\n  \np\n.\neditWith\n(\n\"Renamer\"\n);\n\n\n});\n\n\nThen\n(\n\"there should be one file\"\n,\n \np\n \n=>\n \n{\n\n      \np\n.\ntotalFileCount\n()\n \n==\n \n1\n;\n\n\n});\n\n\nThen\n(\n\"the file is now src/main/java/Cat.java\"\n,\n \np\n \n=>\n \n{\n\n    \np\n.\nfileExists\n(\n\"src/main/java/Cat.java\"\n);\n\n\n});\n\n\n\n\nAll steps are expressed in terms of the \nProject\n type. \n\n\nWe start by importing \nProject\n, and the core test module and its exported \nGiven\n, \nWhen\n and \nThen\n functions.\n\n\nStep definitions are linked to the steps in the feature via strings, such as \n\"a file named src/main/java/Dog.java\"\n.\n\n\nStep definitions may be provided in any TypeScript or JavaScript file under \n.atomist/tests\n. They will be loaded automatically by the test infrastructure.\n\n\nDifferent scenarios and even different features may share step definitions. This is particularly beneficial in the case of common definitions such as Given \u201can empty archive,\u201d which can be shared for all users, across an organization or team or across an archive. We\u2019ll look at those Atomist provides later in this document.\n\n\nWhen\n: Running operations\n\u00b6\n\n\nTypically there is one \nwhen\n step, invoking a single editor or reviewer is invoked. We\u2019ll explain how to do this once we\u2019ve covered the important \nworld\n concept.\n\n\nThen\n Assertions\n\u00b6\n\n\nThe \nthen\n block then consists of one or more assertions about the final state of the project. It is good practice for these to be fine-grained so that reports are maximally informative about what succeeded and failed. The code of each failed assertion will be available in the test report.\n\n\nWorlds\n\u00b6\n\n\nEach scenario has a \u201cworld\u201d associated with it, avaiable to all steps. A world is an isolated context for each scenario execution, which allows:\n\n\n\n\nThe binding and retrieval of arbitrary objects\n\n\nAdditional context-specific operations provided in the world\u2019s implementation\n\n\n\n\nCurrently \nrug\n supports only BDD-based tests for generators, editors and reviewers. These use the \nProjectWorld\n type, defined in \nCore.ts\n. \nProjectWorld\n allows \nthen\n blocks to query the number of modifications made, whether or not edit attempts succeeded, and the number of editors run.\n\n\nThe scenario world is an optional second parameter in all step definitions. For example:\n\n\nexport\n \nfunction\n \nGiven\n(\ns\n: \nstring\n,\n \nf\n:\n \n(\nProject\n,\n \nScenarioWorld\n?\n)\n \n=>\n \nvoid\n);\n\n\n\n\n\n\nWhile our examples have used only the project, the world can be used as follows:\n\n\nThen\n(\n\"I'm happy with both project and world\"\n,\n \n(\np\n,\n \nworld\n)\n \n=>\n \n{\n\n        \n// Assertion that may reference the world\n\n\n});\n\n\n\n\n\n\nValidating Parameters Passed to Operations\n\u00b6\n\n\nTo pass parameters to operations and have them validated, use the \nProjectWorld.editWith\n function:\n\n\nWhen(\"politics takes its course\", (p, w) => {\n  let world = w as ProjectScenarioWorld\n  world.editWith(world.editor(\"AlpEditor\"), {heir: \"Paul\"})\n})\n\n\n\nParameters are provided in a map (or object).\n\n\nIn future versions of Rug Test, validation may be possible via instantiating an operation and injecting its properties before invoking its \nedit\n or equivalent method. You can do this already if you don\u2019t care about validation (because you know the injected properties are valid), and if the operation uses \n@Parameter\n injected properties. In this style, the above example would look like this:\n\n\nWhen(\"politics takes its course\", (p, w) => {\n  let e = new AlpEditor()\n  e.heir = \"Paul\"\n  e.edit()\n})\n\n\n\nFor this to work, the \nAlpEditor\n would need to have been imported like any other TypeScript class.\n\n\nWell-Known Steps\n\u00b6\n\n\nCertain well-known steps\u2013most notably, \nthen\n statements\u2013can be used in features without the need to define. A full list can be found in \n@atomist/rug/test/WellKnownSteps.ts\n. You can use these as a guide to defining your own well-known assertions and steps. The following excerpt from \nWellKnownSteps.ts\n includes the most important, and shows how easy such steps are to implement:\n\n\nGiven(\"an empty project\", p => {\n    // Nothing to do\n})\n\nThen(\"changes were made\", (p, world) => {\n    return world.modificationsMade()\n})\n\nThen(\"no changes were made\", (p, world) => {\n    return !world.modificationsMade()\n})\n\nThen(\"parameters were invalid\", \n    (p, world) => world.invalidParameters() != null)\n\n\n\nGherkin usage of these steps would be as follows:\n\n\nScenario:\n Some scenario\n\n\n Given \nan empty project\n\n\n ... \n\n\n \nThen \nchanges were made\n\n\n\n\n\n\n\n\nNote\n: If you want your own common steps to be automatically registered, put them in a module and import it, or import a JavaScript file containing them directly. This is necessary as your code does not directly reference them.\n\n\n\n\nIn the unlikely event you want to override a common step definition  provided by Atomist or yourself, you can define the same step in your step definitions. Your local definition will take precedence. \n\n\nDebugging Hints\n\u00b6\n\n\nTo see the contents of a file in the output, simply get hold of the file in the project and use \nconsole.log\n. For example:\n\n\nThen\n(\n\"the file has the right stuff\"\n,\n \np\n \n=>\n \n{\n\n    \nlet\n \nfilename\n \n=\n \n\"my/path/to/File.txt\"\n;\n\n    \nlet\n \nf\n \n=\n \np\n.\nfindFile\n(\nfilename\n);\n\n    \nif\n \n(\nf\n)\n \n{\n\n        \nconsole\n.\nlog\n(\n`Contents of \n${\nfilename\n}\n are \n\\\nn\n${\nf\n.\ncontent\n()\n}\n\\\nn`\n);\n\n        \nreturn\n \nf\n.\ncontent\n().\nindexOf\n(\n\"stuff i care about\"\n)\n \n>\n \n-\n1\n;\n\n    \n}\n\n    \nelse\n \n{\n\n        \nconsole\n.\nlog\n(\n`\n${\nfilename\n}\n not found in archive`\n);\n\n        \nreturn\n \nfalse\n;\n\n    \n}\n\n\n});\n\n\n\n\n\n\nTo dump the entire archive at any point, use the \nHelpers\n module as follows:\n\n\nimport\n \n*\n \nas\n \nhelpers\n \nfrom\n \n\"@atomist/rug/test/Helpers\"\n\n\n...\n\n\nhelpers\n.\nprettyListFiles\n(\nproject\n)\n\n\n\n\n\n\nTo dump the tree in a particular file:\n\n\nTODO\n\n\nGaps\n\u00b6\n\n\nRug Test does not yet support the full range of Gherkin functionality. The following features are missing: \n\n\n\n\nDoc strings\n\n\nData tables\n\n\nTags\n\n\n\n\nThese may be supported in a future version of \nrug\n.\n\n\nFuture Directions\n\u00b6\n\n\n\n\nThe need for more than one source file for each feature is both a strength and weakness of Gherkin. It\u2019s a strength because each file is in a single, logical, toolable language; it\u2019s a weakness because of the level of ceremony required and because of the brittle linkage by a string value. We intend to provide editors that helps with this, automatically creating feature files for editors, and TypeScript files implementing the steps in feature files.\n\n\nIn a future release, BDD testing support will be extended beyond project operations to event handlers.",
            "title": "Tests"
        },
        {
            "location": "/user-guide/rug/tests/#a-quick-overview-of-a-rug-test",
            "text": "Before taking a deeper dive, let\u2019s look at an example.  Consider the following simple editor that will rename a Java file (imports omitted):  @Editor ( \"Renamer\" ,   \"Renames Java class\" )  export   class   Renamer   { \n\n     edit ( project :  Project )   { \n         let   eng   =   project . context (). pathExpressionEngine (); \n         eng . with < JavaClass > ( project ,   \"//JavaClass()[@name='Dog']\" ,   jc   =>   { \n             jc . rename ( \"Cat\" ); \n     });  }   We want to test that the editor works as intended. First, we write a Gherkin  .feature  file that is an easily readable description of the behaviors we expect. We\u2019ll call it  Renaming.feature  and place it under  .atomist/tests .   Feature:  Renaming a Java file   Three lines of indented content   to describe the meaning of this feature,   followed by one or more Scenario definitions.  Scenario:  Dogs can be turned into cats   Given  a file named src/main/java/Dog.java     When  edit with Renamer    Then  there should be one file    Then  the file is now src/main/java/Cat.java   Walking through this definition:   The syntax is standard Gherkin. It is human-readable and contains a specification of the desired behavior, but not how that behavior is to be verified.   A Gherkin  feature  can contain one or more  scenarios . You can include as many feature files in the  .atomist/tests  directory as you like.  Each  scenario  is typically broken down into three blocks of  given ,  when ,  then , following the BDD style. Each of these is called a  step . Typically there is a single  when  step\u2013the execution of an editor. There are often multiple  given  and  then  steps.  then  steps are assertions, and it is good practice to break them up for clarity, so failures are specific.   We now have a clear specification of the desired behavior. How does the test infrastructure know how to execute these steps?  As in  cucumber-js , we delegate to JavaScript or TypeScript to execute these steps. In keeping with our general preference for TypeScript, let\u2019s see the TypeScript steps corresponding to the above feature:  import   {   Project   }   from   \"@atomist/rug/model/Core\" ;  import   {   ProjectEditor   }   from   \"@atomist/rug/operations/ProjectEditor\" ;  import   {   Given ,   When ,   Then ,   Result   }   from   \"@atomist/rug/test/Core\" ;  Given ( \"a file named src/main/java/Dog.java\" ,   p   =>   { \n   p . addFile ( \"src/main/java/Dog.java\" ,   \"public class Dog {}\" );  });  When ( \"edit with Renamer\" ,   p   =>   { \n   p . editWith ( \"Renamer\" );  });  Then ( \"there should be one file\" ,   p   =>   { \n       p . totalFileCount ()   ==   1 ;  });  Then ( \"the file is now src/main/java/Cat.java\" ,   p   =>   { \n     p . fileExists ( \"src/main/java/Cat.java\" );  });  \n\nAll steps are expressed in terms of the  Project  type.   We start by importing  Project , and the core test module and its exported  Given ,  When  and  Then  functions.  Step definitions are linked to the steps in the feature via strings, such as  \"a file named src/main/java/Dog.java\" .  Step definitions may be provided in any TypeScript or JavaScript file under  .atomist/tests . They will be loaded automatically by the test infrastructure.  Different scenarios and even different features may share step definitions. This is particularly beneficial in the case of common definitions such as Given \u201can empty archive,\u201d which can be shared for all users, across an organization or team or across an archive. We\u2019ll look at those Atomist provides later in this document.",
            "title": "A Quick Overview of a Rug Test"
        },
        {
            "location": "/user-guide/rug/tests/#when-running-operations",
            "text": "Typically there is one  when  step, invoking a single editor or reviewer is invoked. We\u2019ll explain how to do this once we\u2019ve covered the important  world  concept.",
            "title": "When: Running operations"
        },
        {
            "location": "/user-guide/rug/tests/#then-assertions",
            "text": "The  then  block then consists of one or more assertions about the final state of the project. It is good practice for these to be fine-grained so that reports are maximally informative about what succeeded and failed. The code of each failed assertion will be available in the test report.",
            "title": "Then Assertions"
        },
        {
            "location": "/user-guide/rug/tests/#worlds",
            "text": "Each scenario has a \u201cworld\u201d associated with it, avaiable to all steps. A world is an isolated context for each scenario execution, which allows:   The binding and retrieval of arbitrary objects  Additional context-specific operations provided in the world\u2019s implementation   Currently  rug  supports only BDD-based tests for generators, editors and reviewers. These use the  ProjectWorld  type, defined in  Core.ts .  ProjectWorld  allows  then  blocks to query the number of modifications made, whether or not edit attempts succeeded, and the number of editors run.  The scenario world is an optional second parameter in all step definitions. For example:  export   function   Given ( s :  string ,   f :   ( Project ,   ScenarioWorld ? )   =>   void );   While our examples have used only the project, the world can be used as follows:  Then ( \"I'm happy with both project and world\" ,   ( p ,   world )   =>   { \n         // Assertion that may reference the world  });",
            "title": "Worlds"
        },
        {
            "location": "/user-guide/rug/tests/#validating-parameters-passed-to-operations",
            "text": "To pass parameters to operations and have them validated, use the  ProjectWorld.editWith  function:  When(\"politics takes its course\", (p, w) => {\n  let world = w as ProjectScenarioWorld\n  world.editWith(world.editor(\"AlpEditor\"), {heir: \"Paul\"})\n}) \n\nParameters are provided in a map (or object).  In future versions of Rug Test, validation may be possible via instantiating an operation and injecting its properties before invoking its  edit  or equivalent method. You can do this already if you don\u2019t care about validation (because you know the injected properties are valid), and if the operation uses  @Parameter  injected properties. In this style, the above example would look like this:  When(\"politics takes its course\", (p, w) => {\n  let e = new AlpEditor()\n  e.heir = \"Paul\"\n  e.edit()\n}) \n\nFor this to work, the  AlpEditor  would need to have been imported like any other TypeScript class.",
            "title": "Validating Parameters Passed to Operations"
        },
        {
            "location": "/user-guide/rug/tests/#well-known-steps",
            "text": "Certain well-known steps\u2013most notably,  then  statements\u2013can be used in features without the need to define. A full list can be found in  @atomist/rug/test/WellKnownSteps.ts . You can use these as a guide to defining your own well-known assertions and steps. The following excerpt from  WellKnownSteps.ts  includes the most important, and shows how easy such steps are to implement:  Given(\"an empty project\", p => {\n    // Nothing to do\n})\n\nThen(\"changes were made\", (p, world) => {\n    return world.modificationsMade()\n})\n\nThen(\"no changes were made\", (p, world) => {\n    return !world.modificationsMade()\n})\n\nThen(\"parameters were invalid\", \n    (p, world) => world.invalidParameters() != null) \n\nGherkin usage of these steps would be as follows:  Scenario:  Some scenario   Given  an empty project   ...     Then  changes were made    Note : If you want your own common steps to be automatically registered, put them in a module and import it, or import a JavaScript file containing them directly. This is necessary as your code does not directly reference them.   In the unlikely event you want to override a common step definition  provided by Atomist or yourself, you can define the same step in your step definitions. Your local definition will take precedence.",
            "title": "Well-Known Steps"
        },
        {
            "location": "/user-guide/rug/tests/#debugging-hints",
            "text": "To see the contents of a file in the output, simply get hold of the file in the project and use  console.log . For example:  Then ( \"the file has the right stuff\" ,   p   =>   { \n     let   filename   =   \"my/path/to/File.txt\" ; \n     let   f   =   p . findFile ( filename ); \n     if   ( f )   { \n         console . log ( `Contents of  ${ filename }  are  \\ n ${ f . content () } \\ n` ); \n         return   f . content (). indexOf ( \"stuff i care about\" )   >   - 1 ; \n     } \n     else   { \n         console . log ( ` ${ filename }  not found in archive` ); \n         return   false ; \n     }  });   To dump the entire archive at any point, use the  Helpers  module as follows:  import   *   as   helpers   from   \"@atomist/rug/test/Helpers\"  ...  helpers . prettyListFiles ( project )   To dump the tree in a particular file:  TODO",
            "title": "Debugging Hints"
        },
        {
            "location": "/user-guide/rug/tests/#gaps",
            "text": "Rug Test does not yet support the full range of Gherkin functionality. The following features are missing:    Doc strings  Data tables  Tags   These may be supported in a future version of  rug .",
            "title": "Gaps"
        },
        {
            "location": "/user-guide/rug/tests/#future-directions",
            "text": "The need for more than one source file for each feature is both a strength and weakness of Gherkin. It\u2019s a strength because each file is in a single, logical, toolable language; it\u2019s a weakness because of the level of ceremony required and because of the brittle linkage by a string value. We intend to provide editors that helps with this, automatically creating feature files for editors, and TypeScript files implementing the steps in feature files.  In a future release, BDD testing support will be extended beyond project operations to event handlers.",
            "title": "Future Directions"
        },
        {
            "location": "/user-guide/rug/projects/",
            "text": "A key design goal for Rug was to respect your own tooling as much as\npossible so that \nevery project could be a working Atomist project,\nand every Atomist project remains a working project\n.  Therefore,\nAtomist files reside unobtrusively within your existing projects.\nSpecifically, Atomist files reside in a directory named \n.atomist\n at\nthe root of your project\u2019s source code hierarchy.\n\n\nThe \n.atomist\n directory\n\u00b6\n\n\nA typical Rug project will have a \n.atomist\n directory that looks\nsomething like the following.\n\n\n.atomist\n\n\n\u251c\u2500\u2500 build/\n\n\n\u251c\u2500\u2500 editors/\n\n\n\u251c\u2500\u2500 generators/\n\n\n\u251c\u2500\u2500 handlers/\n\n\n\u251c\u2500\u2500 manifest.yml\n\n\n\u251c\u2500\u2500 node_modules/\n\n\n\u251c\u2500\u2500 package.json\n\n\n\u251c\u2500\u2500 reviewers/\n\n\n\u251c\u2500\u2500 target/\n\n\n\u251c\u2500\u2500 templates/\n\n\n\u251c\u2500\u2500 tests/\n\n\n\u2514\u2500\u2500 tsconfig.json\n\n\n\n\n\n\nThe table below explains each entry.\n\n\n\n\n\n\n\n\nEntry\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuild\n\n\ncontains CI build scripts and configuration\n\n\n\n\n\n\neditors\n\n\ncontains Rug editors\n\n\n\n\n\n\ngenerators\n\n\ncontains Rug generators\n\n\n\n\n\n\nhandlers\n\n\ncontains Rug command and event handlers\n\n\n\n\n\n\nmanifest.yml\n\n\nRug archive metadata and dependencies declarations\n\n\n\n\n\n\nnode_modules\n\n\ncontains source code for TypeScript typings and dependencies installed by \nNPM\n\n\n\n\n\n\npackage.json\n\n\nstandard NPM \npackage.json\n file declaring the TypeScript dependencies\n\n\n\n\n\n\nreviewers\n\n\ncontains Rug reviewers\n\n\n\n\n\n\ntarget\n\n\ncontains files generated by the Rug CLI during building and packaging\n\n\n\n\n\n\ntemplates\n\n\ncontains templates used by Rugs\n\n\n\n\n\n\ntests\n\n\ncontains Rug tests\n\n\n\n\n\n\ntsconfig.json\n\n\nTypeScript compiler options useful for IDE TypeScript tooling\n\n\n\n\n\n\n\n\n\n\nThe \ntsconfig.json\n is \nnot\n used by the Rug CLI when compiling TypeScript.\n\n\n\n\nBasic Rug Project\n\u00b6\n\n\nA very basic Rug project can be generated using\nthe \nRug project generator\n.  Instructions running the\ngenerator using the Rug CLI can be found in the project\u2019s README.",
            "title": "Projects"
        },
        {
            "location": "/user-guide/rug/projects/#the-atomist-directory",
            "text": "A typical Rug project will have a  .atomist  directory that looks\nsomething like the following.  .atomist  \u251c\u2500\u2500 build/  \u251c\u2500\u2500 editors/  \u251c\u2500\u2500 generators/  \u251c\u2500\u2500 handlers/  \u251c\u2500\u2500 manifest.yml  \u251c\u2500\u2500 node_modules/  \u251c\u2500\u2500 package.json  \u251c\u2500\u2500 reviewers/  \u251c\u2500\u2500 target/  \u251c\u2500\u2500 templates/  \u251c\u2500\u2500 tests/  \u2514\u2500\u2500 tsconfig.json   The table below explains each entry.     Entry  Description      build  contains CI build scripts and configuration    editors  contains Rug editors    generators  contains Rug generators    handlers  contains Rug command and event handlers    manifest.yml  Rug archive metadata and dependencies declarations    node_modules  contains source code for TypeScript typings and dependencies installed by  NPM    package.json  standard NPM  package.json  file declaring the TypeScript dependencies    reviewers  contains Rug reviewers    target  contains files generated by the Rug CLI during building and packaging    templates  contains templates used by Rugs    tests  contains Rug tests    tsconfig.json  TypeScript compiler options useful for IDE TypeScript tooling      The  tsconfig.json  is  not  used by the Rug CLI when compiling TypeScript.",
            "title": "The .atomist directory"
        },
        {
            "location": "/user-guide/rug/projects/#basic-rug-project",
            "text": "A very basic Rug project can be generated using\nthe  Rug project generator .  Instructions running the\ngenerator using the Rug CLI can be found in the project\u2019s README.",
            "title": "Basic Rug Project"
        },
        {
            "location": "/user-guide/rug/archives/",
            "text": "A Rug archive is a packaged version of a project that contains Rugs.\nRug archives are created using the \nrug install\n CLI command.  A Rug\narchive contains all of the source code from the original project, the\nnecessary parts of the project\u2019s \n.atomist\n directory, and archive\nmetadata.",
            "title": "Archives"
        },
        {
            "location": "/user-guide/rug/lifecycle/",
            "text": "A Day in the Life of a Rug Project\n\u00b6\n\n\nThis page describes the nature, structure and lifecycle of a Rug\nproject.\n\n\nIf you haven\u2019t done so and you want to follow along, please \ninstall\nthe Rug CLI\n.\n\n\nInception\n\u00b6\n\n\nThe easiest way to create a new Rug project is by using the\n\nNewRugArchiveProject\n generator via the Bot or CLI. Here, we\u2019ll show\nhow to do it with the CLI.\n\n\n$\n rug generate atomist-rugs:rug-archive:NewRugArchiveProject \n\\\n\n    my-rug-project \n\\\n\n    \ngroup_id\n=\natomist-rugs \n\\\n\n    \nversion\n=\n0\n.1.0 \n\\\n\n    \ndescription\n=\n\"My first Rug project\"\n\n\nProcessing dependencies\n\n\n  Downloading atomist-rugs/rug-archive/0.2.1/rug-archive-0.2.1.pom \u2190 rugs (806 bytes) succeeded\n\n\n  Downloading atomist-rugs/rug-archive/0.2.1/rug-archive-0.2.1.zip \u2190 rugs (18 kb) succeeded\n\n\nResolving dependencies for atomist-rugs:rug-archive:0.2.1 completed\n\n\nLoading atomist-rugs:rug-archive:0.2.1 into runtime completed\n\n\nRunning generator NewRugArchiveProject of atomist-rugs:rug-archive:0.2.1 completed\n\n\n\n\u2192 Project\n\n\n  ~/develop/my-rug-project/ (5 kb in 7 files)\n\n\n\n\u2192 Changes\n\n\n  \u251c\u2500\u252c .atomist\n\n\n  | \u251c\u2500\u252c editors\n\n\n  | | \u2514\u2500\u2500 AddReadme.rug\n\n\n  | \u251c\u2500\u2500 manifest.yml\n\n\n  | \u251c\u2500\u252c templates\n\n\n  | | \u2514\u2500\u2500 readme.vm\n\n\n  | \u2514\u2500\u252c tests\n\n\n  |   \u2514\u2500\u2500 AddReadme.rt\n\n\n  \u251c\u2500\u2500 .atomist.yml\n\n\n  \u251c\u2500\u2500 .gitignore\n\n\n  \u2514\u2500\u2500 README.md\n\n\n\nSuccessfully generated new project my-rug-project\n\n\n\n\n\n\nThat command created a new directory named \nmy-rug-project\n in the\ncurrent directory, \n~/develop\n in this case.\n\n\nStructure\n\u00b6\n\n\nThe created Rug project has the following directory structure:\n\n\n$\n tree -a my-rug-project\n\nmy-rug-project\n\n\n\u251c\u2500\u2500 .atomist\n\n\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 editors\n\n\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 AddReadme.rug\n\n\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 manifest.yml\n\n\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 templates\n\n\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 readme.vm\n\n\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tests\n\n\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 AddReadme.rt\n\n\n\u251c\u2500\u2500 .atomist.yml\n\n\n\u251c\u2500\u2500 .gitignore\n\n\n\u2514\u2500\u2500 README.md\n\n\n\n4 directories, 7 files\n\n\n\n\n\n\nThe editor \nAddReadme.rug\n and corresponding test \nAddReadme.rt\n have\nbeen generated when running the generate command.\n\n\nLet\u2019s take a look at the \nmanifest.yml\n:\n\n\n$\n \ncd\n my-rug-project/.atomist\n\n$\n cat manifest.yml\n\ngroup: atomist-rugs\n\n\nartifact: my-rug-project\n\n\nversion: \"0.1.0\"\n\n\nrequires: \"[0.8.0,1.0.0)\"\n\n\ndependencies:\n\n\nextensions:\n\n\n\n\n\n\nThe \nmanifest.yml\n specifies the unique coordinates of the Rug archive\nas well as its version.  Dependencies and extensions can also be\ndeclared\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroup\n\n\nThe group of the Rug archive, should be the GitHub org\n\n\n\n\n\n\nartifact\n\n\nA unique identifier within the \ngroup\n, should be the GitHub repository name\n\n\n\n\n\n\nversion\n\n\nVersion of the Rug archive\n\n\n\n\n\n\nrequires\n\n\nThe rug-lib version this project is being developed with. Version range is allowed\n\n\n\n\n\n\ndependencies\n\n\nList of project dependencies in form group:artifact:version. Version ranges are allowed\n\n\n\n\n\n\nextensions\n\n\nList of binary dependencies, e.g., Rug Extension types. Version ranges are allowed\n\n\n\n\n\n\n\n\nRunning Tests\n\u00b6\n\n\nAfter making changes to your Rug code, you should run the tests.  The\ngenerated Rug project already has some tests.\n\n\n$\n rug \ntest\n\n\nResolving dependencies for atomist-rugs:my-rug-project:0.1.0 \u2190 local completed\n\n\nLoading atomist-rugs:my-rug-project:0.1.0 \u2190 local into runtime completed\n\n\nExecuting scenario AddReadme should add README.md...\n\n\n  Testing assertion fileExists(IdentifierFunctionArg(readme,None))\n\n\n  Testing assertion fileContains(IdentifierFunctionArg(readme,None),IdentifierFunctionArg(newName,None))\n\n\n  Testing assertion fileContains(IdentifierFunctionArg(readme,None),IdentifierFunctionArg(newDescription,None))\n\n\nExecuting scenario AddReadme should reject invalid value name parameter...\n\n\nExecuting scenario AddReadme should reject missing parameter...\n\n\nRunning test scenarios in atomist-rugs:my-rug-project:0.1.0 \u2190 local completed\n\n\n\nSuccessfully executed 3 of 3 scenarios: Test SUCCESS\n\n\n\n\n\n\nInstalling\n\u00b6\n\n\nTo package the Rug project up and make it available to the Rug CLI to\nrun from any directory, you must install it:\n\n\n$\n rug install\n\nResolving dependencies for atomist-rugs:my-rug-project:0.1.0 \u2190 local completed\n\n\nLoading atomist-rugs:my-rug-project:0.1.0 \u2190 local into runtime completed\n\n\n  Created META-INF/maven/atomist-rugs/my-rug-project/pom.xml\n\n\n  Created .atomist/manifest.yml\n\n\n  Created .atomist/metadata.json\n\n\nGenerating archive metadata completed\n\n\n  Installed atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.zip \u2192 /Users/dd/.atomist/repository\n\n\n  Installed atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.pom \u2192 /Users/dd/.atomist/repository\n\n\n  Installed atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0-metadata.json \u2192 /Users/dd/.atomist/repository\n\n\nInstalling archive into local repository completed\n\n\n\n\u2192 Archive\n\n\n  ~/develop/my-rug-project/.atomist/target/my-rug-project-0.1.0.zip (4 kb in 9 files)\n\n\n\n\u2192 Contents\n\n\n  \u251c\u2500\u252c .atomist\n\n\n  | \u251c\u2500\u252c editors\n\n\n  | | \u2514\u2500\u2500 AddReadme.rug\n\n\n  | \u251c\u2500\u2500 manifest.yml\n\n\n  | \u251c\u2500\u2500 metadata.json\n\n\n  | \u251c\u2500\u252c templates\n\n\n  | | \u2514\u2500\u2500 readme.vm\n\n\n  | \u2514\u2500\u252c tests\n\n\n  |   \u2514\u2500\u2500 AddReadme.rt\n\n\n  \u251c\u2500\u2500 .atomist.yml\n\n\n  \u251c\u2500\u2500 .gitignore\n\n\n  \u251c\u2500\u252c META-INF/maven/atomist-rugs/my-rug-project\n\n\n  | \u2514\u2500\u2500 pom.xml\n\n\n  \u2514\u2500\u2500 README.md\n\n\n\nSuccessfully installed archive for atomist-rugs:my-rug-project:0.1.0\n\n\n\n\n\n\nThe \ninstall\n command takes the project, packages it up for\ndistribution, and installs it under \n~/.atomist/repository\n.\n\n\nThe contents of the archive can be further tuned by adding entries to\n\n.gitignore\n and \n.atomist/ignore\n, the packaging step considers the\ncontents of these files when creating the archive.\n\n\nPublishing\n\u00b6\n\n\nPublishing is the process of uploading an archive to a Maven\nrepository so it can only be used by others.  Before publishing a Rug\narchive, you first need to configure a publishing repository in your\n\n~/.atomst/cli.yml\n.  You must have write permission to this\nrepository, set the \npublish\n field to \ntrue\n, and you will typically\nhave to supply authentication information.  For example, if you have\nthe environment variables \nMAVEN_BASE_URL\n, \nMAVEN_USER\n, and\n\nMAVEN_TOKEN\n set appropriate for your Maven repository, you would use\nthe following configuration in your \n~/.atomist/cli.yml\n:\n\n\nremote-repositories\n:\n\n  \nrugs-release\n:\n\n    \npublish\n:\n \ntrue\n\n    \nurl\n:\n \n\"${MAVEN_BASE_URL}/rugs-release\"\n\n    \nauthentication\n:\n\n      \nusername\n:\n \n\"${MAVEN_USER}\"\n\n      \npassword\n:\n \n\"${MAVEN_TOKEN}\"\n\n\n\n\n\n\nOnce you have your publishing repository configured, you simply run\n\nrug publish\n.\n\n\n$\n rug publish\n\nResolving dependencies for atomist-rugs:my-rug-project:0.1.0 \u2190 local completed\n\n\nLoading atomist-rugs:my-rug-project:0.1.0 \u2190 local into runtime completed\n\n\n  Created META-INF/maven/atomist-rugs/my-rug-project/pom.xml\n\n\n  Created .atomist/manifest.yml\n\n\n  Created .atomist/metadata.json\n\n\nGenerating archive metadata completed\n\n\n  Uploading atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.zip \u2192 rugs-release (4 kb) succeeded\n\n\n  Uploading atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.pom \u2192 rugs-release (639 bytes) succeeded\n\n\n  Uploading atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0-metadata.json \u2192 rugs-release (1 kb) succeeded\n\n\n  Downloading atomist-rugs/my-rug-project/maven-metadata.xml \u2190 rugs-release (381 bytes) succeeded\n\n\n  Uploading atomist-rugs/my-rug-project/maven-metadata.xml \u2192 rugs-release (333 bytes) succeeded\n\n\nPublishing archive into remote repository completed\n\n\n\n\u2192 Archive\n\n\n  ~/develop/my-rug-project/.atomist/target/my-rug-project-0.1.0.zip (4 kb in 9 files)\n\n\n\n\u2192 Contents\n\n\n  \u251c\u2500\u252c .atomist\n\n\n  | \u251c\u2500\u252c editors\n\n\n  | | \u2514\u2500\u2500 AddReadme.rug\n\n\n  | \u251c\u2500\u2500 manifest.yml\n\n\n  | \u251c\u2500\u2500 metadata.json\n\n\n  | \u251c\u2500\u252c templates\n\n\n  | | \u2514\u2500\u2500 readme.vm\n\n\n  | \u2514\u2500\u252c tests\n\n\n  |   \u2514\u2500\u2500 AddReadme.rt\n\n\n  \u251c\u2500\u2500 .atomist.yml\n\n\n  \u251c\u2500\u2500 .gitignore\n\n\n  \u251c\u2500\u252c META-INF/maven/atomist-rugs/my-rug-project\n\n\n  | \u2514\u2500\u2500 pom.xml\n\n\n  \u2514\u2500\u2500 README.md\n\n\n\nSuccessfully published archive for atomist-rugs:my-rug-project:0.1.0 to\n\n\n  https://atomist.jfrog.io/atomist/rugs-release/atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.zip\n\n\n\n\n\n\nThe \natomist-rugs:travis-editors:EnableTravisForRugArchiveTS\n editor\nconfigures testing, installing, and publishing archives as part of a\nTravis CI build.  See the \nbuild\n directory of the \ntravis-editors\n\nproject for more detail.",
            "title": "Lifecycle"
        },
        {
            "location": "/user-guide/rug/lifecycle/#a-day-in-the-life-of-a-rug-project",
            "text": "This page describes the nature, structure and lifecycle of a Rug\nproject.  If you haven\u2019t done so and you want to follow along, please  install\nthe Rug CLI .",
            "title": "A Day in the Life of a Rug Project"
        },
        {
            "location": "/user-guide/rug/lifecycle/#inception",
            "text": "The easiest way to create a new Rug project is by using the NewRugArchiveProject  generator via the Bot or CLI. Here, we\u2019ll show\nhow to do it with the CLI.  $  rug generate atomist-rugs:rug-archive:NewRugArchiveProject  \\ \n    my-rug-project  \\ \n     group_id = atomist-rugs  \\ \n     version = 0 .1.0  \\ \n     description = \"My first Rug project\"  Processing dependencies    Downloading atomist-rugs/rug-archive/0.2.1/rug-archive-0.2.1.pom \u2190 rugs (806 bytes) succeeded    Downloading atomist-rugs/rug-archive/0.2.1/rug-archive-0.2.1.zip \u2190 rugs (18 kb) succeeded  Resolving dependencies for atomist-rugs:rug-archive:0.2.1 completed  Loading atomist-rugs:rug-archive:0.2.1 into runtime completed  Running generator NewRugArchiveProject of atomist-rugs:rug-archive:0.2.1 completed  \u2192 Project    ~/develop/my-rug-project/ (5 kb in 7 files)  \u2192 Changes    \u251c\u2500\u252c .atomist    | \u251c\u2500\u252c editors    | | \u2514\u2500\u2500 AddReadme.rug    | \u251c\u2500\u2500 manifest.yml    | \u251c\u2500\u252c templates    | | \u2514\u2500\u2500 readme.vm    | \u2514\u2500\u252c tests    |   \u2514\u2500\u2500 AddReadme.rt    \u251c\u2500\u2500 .atomist.yml    \u251c\u2500\u2500 .gitignore    \u2514\u2500\u2500 README.md  Successfully generated new project my-rug-project   That command created a new directory named  my-rug-project  in the\ncurrent directory,  ~/develop  in this case.",
            "title": "Inception"
        },
        {
            "location": "/user-guide/rug/lifecycle/#structure",
            "text": "The created Rug project has the following directory structure:  $  tree -a my-rug-project my-rug-project  \u251c\u2500\u2500 .atomist  \u2502\u00a0\u00a0 \u251c\u2500\u2500 editors  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 AddReadme.rug  \u2502\u00a0\u00a0 \u251c\u2500\u2500 manifest.yml  \u2502\u00a0\u00a0 \u251c\u2500\u2500 templates  \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 readme.vm  \u2502\u00a0\u00a0 \u2514\u2500\u2500 tests  \u2502\u00a0\u00a0     \u2514\u2500\u2500 AddReadme.rt  \u251c\u2500\u2500 .atomist.yml  \u251c\u2500\u2500 .gitignore  \u2514\u2500\u2500 README.md  4 directories, 7 files   The editor  AddReadme.rug  and corresponding test  AddReadme.rt  have\nbeen generated when running the generate command.  Let\u2019s take a look at the  manifest.yml :  $   cd  my-rug-project/.atomist $  cat manifest.yml group: atomist-rugs  artifact: my-rug-project  version: \"0.1.0\"  requires: \"[0.8.0,1.0.0)\"  dependencies:  extensions:   The  manifest.yml  specifies the unique coordinates of the Rug archive\nas well as its version.  Dependencies and extensions can also be\ndeclared     Key  Description      group  The group of the Rug archive, should be the GitHub org    artifact  A unique identifier within the  group , should be the GitHub repository name    version  Version of the Rug archive    requires  The rug-lib version this project is being developed with. Version range is allowed    dependencies  List of project dependencies in form group:artifact:version. Version ranges are allowed    extensions  List of binary dependencies, e.g., Rug Extension types. Version ranges are allowed",
            "title": "Structure"
        },
        {
            "location": "/user-guide/rug/lifecycle/#running-tests",
            "text": "After making changes to your Rug code, you should run the tests.  The\ngenerated Rug project already has some tests.  $  rug  test  Resolving dependencies for atomist-rugs:my-rug-project:0.1.0 \u2190 local completed  Loading atomist-rugs:my-rug-project:0.1.0 \u2190 local into runtime completed  Executing scenario AddReadme should add README.md...    Testing assertion fileExists(IdentifierFunctionArg(readme,None))    Testing assertion fileContains(IdentifierFunctionArg(readme,None),IdentifierFunctionArg(newName,None))    Testing assertion fileContains(IdentifierFunctionArg(readme,None),IdentifierFunctionArg(newDescription,None))  Executing scenario AddReadme should reject invalid value name parameter...  Executing scenario AddReadme should reject missing parameter...  Running test scenarios in atomist-rugs:my-rug-project:0.1.0 \u2190 local completed  Successfully executed 3 of 3 scenarios: Test SUCCESS",
            "title": "Running Tests"
        },
        {
            "location": "/user-guide/rug/lifecycle/#installing",
            "text": "To package the Rug project up and make it available to the Rug CLI to\nrun from any directory, you must install it:  $  rug install Resolving dependencies for atomist-rugs:my-rug-project:0.1.0 \u2190 local completed  Loading atomist-rugs:my-rug-project:0.1.0 \u2190 local into runtime completed    Created META-INF/maven/atomist-rugs/my-rug-project/pom.xml    Created .atomist/manifest.yml    Created .atomist/metadata.json  Generating archive metadata completed    Installed atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.zip \u2192 /Users/dd/.atomist/repository    Installed atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.pom \u2192 /Users/dd/.atomist/repository    Installed atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0-metadata.json \u2192 /Users/dd/.atomist/repository  Installing archive into local repository completed  \u2192 Archive    ~/develop/my-rug-project/.atomist/target/my-rug-project-0.1.0.zip (4 kb in 9 files)  \u2192 Contents    \u251c\u2500\u252c .atomist    | \u251c\u2500\u252c editors    | | \u2514\u2500\u2500 AddReadme.rug    | \u251c\u2500\u2500 manifest.yml    | \u251c\u2500\u2500 metadata.json    | \u251c\u2500\u252c templates    | | \u2514\u2500\u2500 readme.vm    | \u2514\u2500\u252c tests    |   \u2514\u2500\u2500 AddReadme.rt    \u251c\u2500\u2500 .atomist.yml    \u251c\u2500\u2500 .gitignore    \u251c\u2500\u252c META-INF/maven/atomist-rugs/my-rug-project    | \u2514\u2500\u2500 pom.xml    \u2514\u2500\u2500 README.md  Successfully installed archive for atomist-rugs:my-rug-project:0.1.0   The  install  command takes the project, packages it up for\ndistribution, and installs it under  ~/.atomist/repository .  The contents of the archive can be further tuned by adding entries to .gitignore  and  .atomist/ignore , the packaging step considers the\ncontents of these files when creating the archive.",
            "title": "Installing"
        },
        {
            "location": "/user-guide/rug/lifecycle/#publishing",
            "text": "Publishing is the process of uploading an archive to a Maven\nrepository so it can only be used by others.  Before publishing a Rug\narchive, you first need to configure a publishing repository in your ~/.atomst/cli.yml .  You must have write permission to this\nrepository, set the  publish  field to  true , and you will typically\nhave to supply authentication information.  For example, if you have\nthe environment variables  MAVEN_BASE_URL ,  MAVEN_USER , and MAVEN_TOKEN  set appropriate for your Maven repository, you would use\nthe following configuration in your  ~/.atomist/cli.yml :  remote-repositories : \n   rugs-release : \n     publish :   true \n     url :   \"${MAVEN_BASE_URL}/rugs-release\" \n     authentication : \n       username :   \"${MAVEN_USER}\" \n       password :   \"${MAVEN_TOKEN}\"   Once you have your publishing repository configured, you simply run rug publish .  $  rug publish Resolving dependencies for atomist-rugs:my-rug-project:0.1.0 \u2190 local completed  Loading atomist-rugs:my-rug-project:0.1.0 \u2190 local into runtime completed    Created META-INF/maven/atomist-rugs/my-rug-project/pom.xml    Created .atomist/manifest.yml    Created .atomist/metadata.json  Generating archive metadata completed    Uploading atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.zip \u2192 rugs-release (4 kb) succeeded    Uploading atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.pom \u2192 rugs-release (639 bytes) succeeded    Uploading atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0-metadata.json \u2192 rugs-release (1 kb) succeeded    Downloading atomist-rugs/my-rug-project/maven-metadata.xml \u2190 rugs-release (381 bytes) succeeded    Uploading atomist-rugs/my-rug-project/maven-metadata.xml \u2192 rugs-release (333 bytes) succeeded  Publishing archive into remote repository completed  \u2192 Archive    ~/develop/my-rug-project/.atomist/target/my-rug-project-0.1.0.zip (4 kb in 9 files)  \u2192 Contents    \u251c\u2500\u252c .atomist    | \u251c\u2500\u252c editors    | | \u2514\u2500\u2500 AddReadme.rug    | \u251c\u2500\u2500 manifest.yml    | \u251c\u2500\u2500 metadata.json    | \u251c\u2500\u252c templates    | | \u2514\u2500\u2500 readme.vm    | \u2514\u2500\u252c tests    |   \u2514\u2500\u2500 AddReadme.rt    \u251c\u2500\u2500 .atomist.yml    \u251c\u2500\u2500 .gitignore    \u251c\u2500\u252c META-INF/maven/atomist-rugs/my-rug-project    | \u2514\u2500\u2500 pom.xml    \u2514\u2500\u2500 README.md  Successfully published archive for atomist-rugs:my-rug-project:0.1.0 to    https://atomist.jfrog.io/atomist/rugs-release/atomist-rugs/my-rug-project/0.1.0/my-rug-project-0.1.0.zip   The  atomist-rugs:travis-editors:EnableTravisForRugArchiveTS  editor\nconfigures testing, installing, and publishing archives as part of a\nTravis CI build.  See the  build  directory of the  travis-editors \nproject for more detail.",
            "title": "Publishing"
        },
        {
            "location": "/user-guide/rug/conventions/",
            "text": "Rug Conventions & Best Practices\n\u00b6\n\n\nRug \nis\n the Atomist API and is implemented in its own \nDomain Specific Language (DSL)\n as well as TypeScript variants. Rug is currently used to define\nproject \ngenerators\n, \neditors\n,\nreviewers (coming soon) and \ntests\n.\nIn addition, the Rug runtime exposes these concepts to JavaScript\n(with first class support for \nTypeScript\n) for those classes of problems\nfor which the DSL is too constraining.\n\n\nAs with any language and environment, there is a set of idioms and\ncommon practices that will turn your Rug from \nnice\n to \ngreat\n (and\nin some contexts from \nnot working\n to\n\nworking\n). Collectively these are the \nRug Conventions\n.\n\n\nExemplar\n\u00b6\n\n\nThe \natomist/travis-editors\n Rug repository is\na good example repository.  We strive to keep that repository up to\ndate with these conventions.  It has good documentation and examples\nof both a Rug DSL and TypeScript editors.  When going through the\nconventions below, we encourage you to reference that repository for\nconcrete examples.\n\n\nRug Projects\n\u00b6\n\n\nA \nRug project\n is simply any project that contains a conforming\n\n.atomist\n directory and a \nmanifest.yml\n description of the project. A minimal\n directory layout would only contain:\n\n\n.atomist/\n  manifest.yml\n\n\n\n\n\nA fuller example directory layout for a larger collection of Rug artifacts would be:\n\n\n.atomist/\n  editors/\n  handlers/\n  reviewers/\n  templates/\n  tests/\n  manifest.yml\n\n\n\n\n\nThe \nmanifest.yml\n file should contain the following general information and formatting:\n\n\ngroup\n:\n \natomist-rugs\n\n\nartifact\n:\n \ntravis-editors\n\n\nversion\n:\n \n\"0.12.2\"\n\n\nrequires\n:\n \n\"[0.11.0,1.0.0)\"\n\n\ndependencies\n:\n\n\nextensions\n:\n\n\n\n\n\n\nThere is a \nRug generator available\n that will create a minimal Rug project for you.\n\n\nRug Project Repositories\n\u00b6\n\n\nRug project source code repositories should have a good \nREADME.md\n\ncontaining the following information at minimum:\n\n\n\n\nA general description of the intent of the Rugs in the project,\n    i.e., what ties them all together, at the top of the README.\n\n\nA section named \nRugs\n that has a subsection for each Rug.\n\n\nA section for each Rug in the project with\n\n\nAn explanation of what the Rug does, e.g., how will the\n    source code be changed after running the editor.\n\n\nA subsection named \nPrerequisites\n describing what must be in\n    place before running the Rug.\n\n\nA subsection named \nParameters\n describing the Rug\u2019s input\n    parameters, including examples of valid input values.\n\n\nA subsection named \nRunning\n describing how to run the Rug and\n    providing examples of how to run the Rug.\n\n\n\n\n\n\nA \nSupport\n section providing information on how to get help\n    with the Rugs in the project.\n\n\nA \nDevelopment\n section providing information on how one would\n    modify and test the Rugs.\n\n\n\n\nPublic Rug repositories should be automatically built, tested\nand deployed using \nTravis CI\n.  The Travis CI build status\nbadge and the Slack badge for the Atomist Community should be placed\nin the \nREADME.md\n between the page title and the general description.\nHere is the Markdown text to add the Slack badge:\n\n\n[![Slack Status](https://join.atomist.com/badge.svg)](https://join.atomist.com)\n\n\n\n\n\nRug repositories should have a change log in\nthe \nCHANGELOG.md\n format\n.\n\n\nRug DSL and TypeScript Files\n\u00b6\n\n\nRug files should have the \n.rug\n extension when written using the\nDSL and the standard TypeScript \n.ts\n extension when written in\nTypeScript.  You can safely intermix Rug DSL and TypeScript Rugs in\nthe same project.  Rug files should placed in the following locations\nwithin a \nRug project\n.  Rug editors and generators should be in\n\n.atomist/editors\n and Rug reviewers should be in \n.atomist/reviewers\n.\n\n\nBDD-style tests for your Rugs are strongly recommended and should be\nlocated within a \n.atomist/tests\n directory and have the \n.rt\n\nextension.\n\n\nIf your Rugs, typically editors, use any templates, they are placed in\nthe \n.atomist/templates\n directory.\n\n\nRug Naming\n\u00b6\n\n\nRug editors, generators, reviewers should have their names\nformatted using \nUpperCamelCase\n.\n\n\nFollowing the rule of making implicit concepts explicit, the name of\nyour Rug should correspond to a complete and specific description of\nthe purpose of the Rug.\n\n\nFor example, \nAddDocker\n is a good name if the Rug adds Docker to\nanything, but \nAddDockerToMavenProjects\n is better if the intention of\nthe Rug is to only work with projects that follow Maven conventions.\n\n\nWhile a Rug \n.rug\n file can contain many different editors,\ngenerators and reviewers, the Rug runtime\nenforces that the first Rug definition in a \n.rug\n file should match\nthe name of the file itself. Therefore Rug files should be formatted\nusing UpperCamelCase to match the name of the first Rug definition in\nthe file.\n\n\nFurther, Rugs within the same file are conventionally understood to be\nin support of the main and initial Rug in the file.\n\n\nRug Project Configuration\n\u00b6\n\n\nRug project configuration is stored in a file in the \n.atomist\n\ndirectory.  Rug projects that contain Rug DSL Rugs have their\nconfiguration stored in \n.atomist/manifest.yml\n.  Rug projects using\nTypeScript should also include a \n.atomist/package.json\n describing\nany dependencies\n\n\nThe Rug \n.atomist/manifest.yml\n should describe the Rug project\naccording to the following rules:\n\n\n\n\n\n\ngroup\n: The organisation behind this Rug project. Most commonly\n    the GitHub organisation in which they reside.\n\n\n\n\n\n\nartifact\n: Name of the Rug archive (see next section)\n\n\n\n\n\n\nversion\n: \nSemantic version\n of this Rug project\n\n\n\n\n\n\nrequires\n: Specify the exact, or bounded, version of the Rug\n    language that your Rug project has been tested against.\n\n\n\n\n\n\nIf you are using the Rug TypeScript approach, then the corresponding\n\npackage.json\n in the \n.atomist\n is only used for dependencies and any other\nmetadata require by the TypeScript compiler. The Atomist typings are added as\nfollows:\n\n\n\n\ndependencies\n: At a minimum specifies the version of the Rug\n    typings module that your Rug project has been tested against in the form\n    \n{ \"@atomist/rug\": \"<rug-version>\" }\n\n\n\n\nNOTE: Adding the typings above does \nnot\n control the version of Rug itself. The manifest.yml file does this\n\n\nRug Project Naming\n\u00b6\n\n\nA Rug project name should be hyphenated and start with the technology\nstack being targeted, such as \nspring-boot\n, followed by \n-editors\n if\nthis is a Rug project with a collection of useful editors or reviewers.\n\n\nIf the main purpose of a Rug project is to be a generator, then ending\nthe name of the type of project it will generate would be most\nappropriate.  For example if your Rug projects\u2019s main purpose was to be\na generator for a Spring Boot Rest Service then\n\nspring-boot-rest-service\n or even \njava-spring-boot-rest-service\n\nwould be appropriate. If your Rug projects\u2019s main purpose was simply to\ngenerate a valid Maven project then \nmaven-project\n would be appropriate.\n\n\nRug DSL \ntag\n Annotations\n\u00b6\n\n\nYour Rugs should be annotated with a collection of \ntag\n annotations\nto optimise their discoverability. For example if you were to\ncreate an editor that affected the \nreadme\n \ndocumentation\n then the\nfollowing \ntag\n annotations would be applicable.\n\n\n@tag\n \n\"readme\"\n\n\n@tag\n \n\"documentation\"\n\n\n\n\n\n\nTag values should consist of only lower case letters, numbers, and\ndashes (\n-\n).\n\n\nPlease try to make sure at least one of the tags on your Rug maps to\nan image.  The following tags currently have images: \ndocker\n,\n\ngithub\n, \ntravis-ci\n, \napache\n, \ngit\n, \nspring-boot\n, \nspring\n,\n\nclojure\n, \ngo\n, \njava\n, \npython\n, \nscala\n, and \ndocumentation\n.\n\n\nRug DSL \ndescription\n Annotations\n\u00b6\n\n\nRug editors, generators, reviewers and parameters can have an\naccompanying \ndescription\n annotation such as:\n\n\n@description\n \n\"adds a project specific README\"\n\n\n\n\n\n\nA good description states exactly what the purpose of the Rug is\n\nwithout capitalisation on the sentence\n and \nwithout a closing\nperiod\n. The reason for avoiding sentence punctuation is that the\ndescription is often used by the Atomist Bot and the grammar of its\nusage is context-driven at that point.  Ideally the \ndescription\n\nshould be a sentence fragment and as short as possible.\n\n\nParameters\n\u00b6\n\n\nRug parameters are part of the public contract for invoking that\nRug. They should follow \nsnake_case\n rules and describe, as\nexplicitly as possible, what the parameter is to contain.\n\n\nThe Mandatory \nproject_name\n Parameter in Rug Generators\n\u00b6\n\n\nThe \nproject_name\n parameter is special when declared inside a\n\ngenerator\n and so must be included otherwise your Rug will likely\nfail to run.\n\n\nIt is recommended that you limit the \nproject_name\n parameter to 21\ncharacters in length as the new project name will often be used by\nAtomist to construct a corresponding Slack channel and if the project\nname is longer than 21 characters then some character-loss will occur.\n\n\nParameter Descriptions and Display Names\n\u00b6\n\n\nAs Rug parameters are part of the public contract to the editor,\ngenerator, reviewers, executor or predicate it is recommended that a\nhuman-readable description and display name always be applied using\nthe \n@description\n and \n@displayName\n annotations.\n\n\nSee the \ndescription annotation\n section\nabove for information on the content of the parameter \n@description\n\nannotation.  The \n@displayName\n annotation value should be three words\nor less and use Title Case.\n\n\nParameter Validation\n\u00b6\n\n\nIt is recommended that all parameters should be restricted using the\nmost explicit and constraining regular expression that is appropriate\nfor the corresponding parameter.  In addition, you should provide a\nmeaningful value for the \n@validInput\n parameter annotation so, when\npeople provide an invalid value, they are provided with a useful error\nmessage.\n\n\nMandatory and Optional Parameters\n\u00b6\n\n\nIf a parameter is optionally provided on invocation, using the\n\n@optional\n annotation, then it is recommended to supply a valid\n\n@default\n annotation also so that there is some predictability of how\nthe Rug will function if no parameter is supplied.\n\n\nTypeScript Decorators\n\u00b6\n\n\nThere are TypeScript equivalents to the Rug DSL annotations described above, and\nthey follow the same conventions:\n\n\n...\n\n\n@Editor\n(\n\"Simple\"\n,\n \n\"My simple editor\"\n)\n\n\n@Tags\n(\n\"simple\"\n,\n \n\"decorators\"\n)\n\n\nclass\n \nSimpleEditor\n \n{\n\n    \n@Parameter\n({\ndescription\n:\n \n\"The name\"\n,\n \npattern\n:\n \n\"^.*$$\"\n})\n\n    \nname\n: \nstring\n \n=\n \n\"Not reserved\"\n\n\n...\n\n\n\n\nThe \n@Editir\n decorator labels the class as an \neditor\n, with \nname\n and \ndescription\n\nas its two parameters respectively. \n@Generator\n and \n@Reviewer\n are the TypeScript\ndecorator equivalents of the \ngenerator\n and \nreviewer\n DSL keywords. The \n@Tags\n decorator takes a variable number of strings and \n@Parameter\n is used to declare parameters. TypeScript parameter declarations support the equivalent fields as Rug DSL and conform to the following\ninterface:\n\n\ninterface\n \nParameter\n \n{\n\n  \npattern\n: \nstring\n\n  \nrequired?\n: \nboolean\n\n  \ndescription?\n: \nstring\n\n  \ndisplayName?\n: \nstring\n\n  \nvalidInput?\n: \nstring\n\n  \ndisplayable?\n: \nboolean\n\n  \nmaxLength?\n: \nnumber\n\n  \nminLength?\n: \nnumber\n\n  \ntags?\n: \nstring\n[]\n\n\n}\n\n\n\n\nThe name and default value of a parameter are taken from the code itself.\n\n\nRug DSL: \nlet\n Declarations\n\u00b6\n\n\nRug DSL \nlet\n declarations can be used to initialise some labels with\na corresponding value. It is recommended that these labels should be\nformatted according\nto \nsnake_case\n rules\nsimilarly to Rug parameters.\n\n\nRug DSL: Avoiding \nBegin\n and \nEnd\n when there is only a Single \ndo\n Action\n\u00b6\n\n\nIf your \nwith\n statement only has a single corresponding \ndo\n action\nthen you should omit the \nbegin\n and \nend\n block demarcations.\n\n\nFor example the following is legal but the \nbegin\n and \nend\n\nstatements are not required:\n\n\nwith\n \nfile\n \nwhen\n \npath\n \n=\n \n\"README.md\"\n\n\n  \nbegin\n\n\n    \ndo\n \nreplace\n \n\"{{creation_date}}\"\n \n{\n \nnew\n \nDate\n().toISOString().split('T')[0] }\n\n\n  \nend\n\n\n\n\n\n\nIt is preferable to omit the \nbegin\n and \nend\n statements entirely\nwhen there is only a single associated \ndo\n action:\n\n\nwith file when path = \"README.md\"\n  do replace \"{{creation_date}}\" { new Date().toISOString().split('T')[0] }\n\n\n\n\n\nRug DSL: Indenting Blocks with \nBegin\n and \nEnd\n\u00b6\n\n\nWhen multiple actions are being applied it is important to nest those\n\ndo\n actions within a \nbegin\n and \nend\n block.  It is conventional to\nplace the \nbegin\n indented two spaces on the next line and then to\nindent the \ndo\n statements two more spaces before a closing \nend\n\nstatement indented at the same level as the \nbegin\n:\n\n\nwith\n \npom\n \np\n \nwhen\n \npath\n \n=\n \n\"pom.xml\"\n\n\n  \nbegin\n\n\n    \ndo\n \nsetArtifactId\n  \nartifact_id\n\n\n    \ndo\n \nsetGroupId\n \ngroup_id\n\n\n    \ndo\n \nsetVersion\n \nversion\n\n\n    \ndo\n \nsetProjectName\n \nname\n\n\n    \ndo\n \nsetDescription\n \ndescription\n\n\n  \nend\n\n\n\n\n\n\nRug DSL: Labelling Selections Only When They Are Used\n\u00b6\n\n\nSometimes when selecting a particular Rug Type, such as \npom\n or\n\nfile\n, it is important to expose what has been selected using a\nlabel, such as \np\n. For example:\n\n\nwith\n \nfile\n \nf\n \nwhen\n \npath\n \n=\n \n\"README.md\"\n\n\n  \ndo\n \nreplace\n \n\"{{creation_date}}\" { f.name() + \"\n \ncreated\n \non\n \n\" + new Date().toISOString().split('\nT\n')[0] }\n\n\n\n\n\n\nHowever if the selected type is not being used then the label should\nbe omitted as it will not be used, for example:\n\n\nwith\n \nfile\n \nwhen\n \npath\n \n=\n \n\"README.md\"\n\n\n  \ndo\n \nreplace\n \n\"{{creation_date}}\"\n \n{\n \nnew\n \nDate\n().toISOString().split('T')[0] }\n\n\n\n\n\n\nIn the above example you can see that the \nf\n label for the selected\nfile is not required as it is never used.s\n\n\nRug DSL: Comments\n\u00b6\n\n\nComments should be used only when they add something that the Rug code\nitself doesn\u2019t state.  Self-documenting code is preferable over\nseparate documentation if the code can be better made to express what\nwould have been put in the documentation anyway.",
            "title": "Conventions"
        },
        {
            "location": "/user-guide/rug/conventions/#rug-conventions-best-practices",
            "text": "Rug  is  the Atomist API and is implemented in its own  Domain Specific Language (DSL)  as well as TypeScript variants. Rug is currently used to define\nproject  generators ,  editors ,\nreviewers (coming soon) and  tests .\nIn addition, the Rug runtime exposes these concepts to JavaScript\n(with first class support for  TypeScript ) for those classes of problems\nfor which the DSL is too constraining.  As with any language and environment, there is a set of idioms and\ncommon practices that will turn your Rug from  nice  to  great  (and\nin some contexts from  not working  to working ). Collectively these are the  Rug Conventions .",
            "title": "Rug Conventions &amp; Best Practices"
        },
        {
            "location": "/user-guide/rug/conventions/#exemplar",
            "text": "The  atomist/travis-editors  Rug repository is\na good example repository.  We strive to keep that repository up to\ndate with these conventions.  It has good documentation and examples\nof both a Rug DSL and TypeScript editors.  When going through the\nconventions below, we encourage you to reference that repository for\nconcrete examples.",
            "title": "Exemplar"
        },
        {
            "location": "/user-guide/rug/conventions/#rug-projects",
            "text": "A  Rug project  is simply any project that contains a conforming .atomist  directory and a  manifest.yml  description of the project. A minimal\n directory layout would only contain:  .atomist/\n  manifest.yml  A fuller example directory layout for a larger collection of Rug artifacts would be:  .atomist/\n  editors/\n  handlers/\n  reviewers/\n  templates/\n  tests/\n  manifest.yml  The  manifest.yml  file should contain the following general information and formatting:  group :   atomist-rugs  artifact :   travis-editors  version :   \"0.12.2\"  requires :   \"[0.11.0,1.0.0)\"  dependencies :  extensions :   There is a  Rug generator available  that will create a minimal Rug project for you.",
            "title": "Rug Projects"
        },
        {
            "location": "/user-guide/rug/conventions/#rug-project-repositories",
            "text": "Rug project source code repositories should have a good  README.md \ncontaining the following information at minimum:   A general description of the intent of the Rugs in the project,\n    i.e., what ties them all together, at the top of the README.  A section named  Rugs  that has a subsection for each Rug.  A section for each Rug in the project with  An explanation of what the Rug does, e.g., how will the\n    source code be changed after running the editor.  A subsection named  Prerequisites  describing what must be in\n    place before running the Rug.  A subsection named  Parameters  describing the Rug\u2019s input\n    parameters, including examples of valid input values.  A subsection named  Running  describing how to run the Rug and\n    providing examples of how to run the Rug.    A  Support  section providing information on how to get help\n    with the Rugs in the project.  A  Development  section providing information on how one would\n    modify and test the Rugs.   Public Rug repositories should be automatically built, tested\nand deployed using  Travis CI .  The Travis CI build status\nbadge and the Slack badge for the Atomist Community should be placed\nin the  README.md  between the page title and the general description.\nHere is the Markdown text to add the Slack badge:  [![Slack Status](https://join.atomist.com/badge.svg)](https://join.atomist.com)  Rug repositories should have a change log in\nthe  CHANGELOG.md  format .",
            "title": "Rug Project Repositories"
        },
        {
            "location": "/user-guide/rug/conventions/#rug-dsl-and-typescript-files",
            "text": "Rug files should have the  .rug  extension when written using the\nDSL and the standard TypeScript  .ts  extension when written in\nTypeScript.  You can safely intermix Rug DSL and TypeScript Rugs in\nthe same project.  Rug files should placed in the following locations\nwithin a  Rug project .  Rug editors and generators should be in .atomist/editors  and Rug reviewers should be in  .atomist/reviewers .  BDD-style tests for your Rugs are strongly recommended and should be\nlocated within a  .atomist/tests  directory and have the  .rt \nextension.  If your Rugs, typically editors, use any templates, they are placed in\nthe  .atomist/templates  directory.",
            "title": "Rug DSL and TypeScript Files"
        },
        {
            "location": "/user-guide/rug/conventions/#rug-naming",
            "text": "Rug editors, generators, reviewers should have their names\nformatted using  UpperCamelCase .  Following the rule of making implicit concepts explicit, the name of\nyour Rug should correspond to a complete and specific description of\nthe purpose of the Rug.  For example,  AddDocker  is a good name if the Rug adds Docker to\nanything, but  AddDockerToMavenProjects  is better if the intention of\nthe Rug is to only work with projects that follow Maven conventions.  While a Rug  .rug  file can contain many different editors,\ngenerators and reviewers, the Rug runtime\nenforces that the first Rug definition in a  .rug  file should match\nthe name of the file itself. Therefore Rug files should be formatted\nusing UpperCamelCase to match the name of the first Rug definition in\nthe file.  Further, Rugs within the same file are conventionally understood to be\nin support of the main and initial Rug in the file.",
            "title": "Rug Naming"
        },
        {
            "location": "/user-guide/rug/conventions/#rug-project-configuration",
            "text": "Rug project configuration is stored in a file in the  .atomist \ndirectory.  Rug projects that contain Rug DSL Rugs have their\nconfiguration stored in  .atomist/manifest.yml .  Rug projects using\nTypeScript should also include a  .atomist/package.json  describing\nany dependencies  The Rug  .atomist/manifest.yml  should describe the Rug project\naccording to the following rules:    group : The organisation behind this Rug project. Most commonly\n    the GitHub organisation in which they reside.    artifact : Name of the Rug archive (see next section)    version :  Semantic version  of this Rug project    requires : Specify the exact, or bounded, version of the Rug\n    language that your Rug project has been tested against.    If you are using the Rug TypeScript approach, then the corresponding package.json  in the  .atomist  is only used for dependencies and any other\nmetadata require by the TypeScript compiler. The Atomist typings are added as\nfollows:   dependencies : At a minimum specifies the version of the Rug\n    typings module that your Rug project has been tested against in the form\n     { \"@atomist/rug\": \"<rug-version>\" }   NOTE: Adding the typings above does  not  control the version of Rug itself. The manifest.yml file does this",
            "title": "Rug Project Configuration"
        },
        {
            "location": "/user-guide/rug/conventions/#rug-project-naming",
            "text": "A Rug project name should be hyphenated and start with the technology\nstack being targeted, such as  spring-boot , followed by  -editors  if\nthis is a Rug project with a collection of useful editors or reviewers.  If the main purpose of a Rug project is to be a generator, then ending\nthe name of the type of project it will generate would be most\nappropriate.  For example if your Rug projects\u2019s main purpose was to be\na generator for a Spring Boot Rest Service then spring-boot-rest-service  or even  java-spring-boot-rest-service \nwould be appropriate. If your Rug projects\u2019s main purpose was simply to\ngenerate a valid Maven project then  maven-project  would be appropriate.",
            "title": "Rug Project Naming"
        },
        {
            "location": "/user-guide/rug/conventions/#rug-dsl-tag-annotations",
            "text": "Your Rugs should be annotated with a collection of  tag  annotations\nto optimise their discoverability. For example if you were to\ncreate an editor that affected the  readme   documentation  then the\nfollowing  tag  annotations would be applicable.  @tag   \"readme\"  @tag   \"documentation\"   Tag values should consist of only lower case letters, numbers, and\ndashes ( - ).  Please try to make sure at least one of the tags on your Rug maps to\nan image.  The following tags currently have images:  docker , github ,  travis-ci ,  apache ,  git ,  spring-boot ,  spring , clojure ,  go ,  java ,  python ,  scala , and  documentation .",
            "title": "Rug DSL tag Annotations"
        },
        {
            "location": "/user-guide/rug/conventions/#rug-dsl-description-annotations",
            "text": "Rug editors, generators, reviewers and parameters can have an\naccompanying  description  annotation such as:  @description   \"adds a project specific README\"   A good description states exactly what the purpose of the Rug is without capitalisation on the sentence  and  without a closing\nperiod . The reason for avoiding sentence punctuation is that the\ndescription is often used by the Atomist Bot and the grammar of its\nusage is context-driven at that point.  Ideally the  description \nshould be a sentence fragment and as short as possible.",
            "title": "Rug DSL description Annotations"
        },
        {
            "location": "/user-guide/rug/conventions/#parameters",
            "text": "Rug parameters are part of the public contract for invoking that\nRug. They should follow  snake_case  rules and describe, as\nexplicitly as possible, what the parameter is to contain.",
            "title": "Parameters"
        },
        {
            "location": "/user-guide/rug/conventions/#the-mandatory-project_name-parameter-in-rug-generators",
            "text": "The  project_name  parameter is special when declared inside a generator  and so must be included otherwise your Rug will likely\nfail to run.  It is recommended that you limit the  project_name  parameter to 21\ncharacters in length as the new project name will often be used by\nAtomist to construct a corresponding Slack channel and if the project\nname is longer than 21 characters then some character-loss will occur.",
            "title": "The Mandatory project_name Parameter in Rug Generators"
        },
        {
            "location": "/user-guide/rug/conventions/#parameter-descriptions-and-display-names",
            "text": "As Rug parameters are part of the public contract to the editor,\ngenerator, reviewers, executor or predicate it is recommended that a\nhuman-readable description and display name always be applied using\nthe  @description  and  @displayName  annotations.  See the  description annotation  section\nabove for information on the content of the parameter  @description \nannotation.  The  @displayName  annotation value should be three words\nor less and use Title Case.",
            "title": "Parameter Descriptions and Display Names"
        },
        {
            "location": "/user-guide/rug/conventions/#parameter-validation",
            "text": "It is recommended that all parameters should be restricted using the\nmost explicit and constraining regular expression that is appropriate\nfor the corresponding parameter.  In addition, you should provide a\nmeaningful value for the  @validInput  parameter annotation so, when\npeople provide an invalid value, they are provided with a useful error\nmessage.",
            "title": "Parameter Validation"
        },
        {
            "location": "/user-guide/rug/conventions/#mandatory-and-optional-parameters",
            "text": "If a parameter is optionally provided on invocation, using the @optional  annotation, then it is recommended to supply a valid @default  annotation also so that there is some predictability of how\nthe Rug will function if no parameter is supplied.",
            "title": "Mandatory and Optional Parameters"
        },
        {
            "location": "/user-guide/rug/conventions/#typescript-decorators",
            "text": "There are TypeScript equivalents to the Rug DSL annotations described above, and\nthey follow the same conventions:  ...  @Editor ( \"Simple\" ,   \"My simple editor\" )  @Tags ( \"simple\" ,   \"decorators\" )  class   SimpleEditor   { \n     @Parameter ({ description :   \"The name\" ,   pattern :   \"^.*$$\" }) \n     name :  string   =   \"Not reserved\"  ...  \n\nThe  @Editir  decorator labels the class as an  editor , with  name  and  description \nas its two parameters respectively.  @Generator  and  @Reviewer  are the TypeScript\ndecorator equivalents of the  generator  and  reviewer  DSL keywords. The  @Tags  decorator takes a variable number of strings and  @Parameter  is used to declare parameters. TypeScript parameter declarations support the equivalent fields as Rug DSL and conform to the following\ninterface:  interface   Parameter   { \n   pattern :  string \n   required? :  boolean \n   description? :  string \n   displayName? :  string \n   validInput? :  string \n   displayable? :  boolean \n   maxLength? :  number \n   minLength? :  number \n   tags? :  string []  }  \n\nThe name and default value of a parameter are taken from the code itself.",
            "title": "TypeScript Decorators"
        },
        {
            "location": "/user-guide/rug/conventions/#rug-dsl-let-declarations",
            "text": "Rug DSL  let  declarations can be used to initialise some labels with\na corresponding value. It is recommended that these labels should be\nformatted according\nto  snake_case  rules\nsimilarly to Rug parameters.",
            "title": "Rug DSL: let Declarations"
        },
        {
            "location": "/user-guide/rug/conventions/#rug-dsl-avoiding-begin-and-end-when-there-is-only-a-single-do-action",
            "text": "If your  with  statement only has a single corresponding  do  action\nthen you should omit the  begin  and  end  block demarcations.  For example the following is legal but the  begin  and  end \nstatements are not required:  with   file   when   path   =   \"README.md\"     begin       do   replace   \"{{creation_date}}\"   {   new   Date ().toISOString().split('T')[0] }     end   It is preferable to omit the  begin  and  end  statements entirely\nwhen there is only a single associated  do  action:  with file when path = \"README.md\"\n  do replace \"{{creation_date}}\" { new Date().toISOString().split('T')[0] }",
            "title": "Rug DSL: Avoiding Begin and End when there is only a Single do Action"
        },
        {
            "location": "/user-guide/rug/conventions/#rug-dsl-indenting-blocks-with-begin-and-end",
            "text": "When multiple actions are being applied it is important to nest those do  actions within a  begin  and  end  block.  It is conventional to\nplace the  begin  indented two spaces on the next line and then to\nindent the  do  statements two more spaces before a closing  end \nstatement indented at the same level as the  begin :  with   pom   p   when   path   =   \"pom.xml\"     begin       do   setArtifactId    artifact_id       do   setGroupId   group_id       do   setVersion   version       do   setProjectName   name       do   setDescription   description     end",
            "title": "Rug DSL: Indenting Blocks with Begin and End"
        },
        {
            "location": "/user-guide/rug/conventions/#rug-dsl-labelling-selections-only-when-they-are-used",
            "text": "Sometimes when selecting a particular Rug Type, such as  pom  or file , it is important to expose what has been selected using a\nlabel, such as  p . For example:  with   file   f   when   path   =   \"README.md\"     do   replace   \"{{creation_date}}\" { f.name() + \"   created   on   \" + new Date().toISOString().split(' T ')[0] }   However if the selected type is not being used then the label should\nbe omitted as it will not be used, for example:  with   file   when   path   =   \"README.md\"     do   replace   \"{{creation_date}}\"   {   new   Date ().toISOString().split('T')[0] }   In the above example you can see that the  f  label for the selected\nfile is not required as it is never used.s",
            "title": "Rug DSL: Labelling Selections Only When They Are Used"
        },
        {
            "location": "/user-guide/rug/conventions/#rug-dsl-comments",
            "text": "Comments should be used only when they add something that the Rug code\nitself doesn\u2019t state.  Self-documenting code is preferable over\nseparate documentation if the code can be better made to express what\nwould have been put in the documentation anyway.",
            "title": "Rug DSL: Comments"
        },
        {
            "location": "/user-guide/integrations/",
            "text": "Atomist aims to give you the best experiences across industry leading\nsoftware development collaboration tools.  These include chat\nplatforms, source code repositories, continuous integration servers,\nand runtime platforms.  Currently, the Atomist platform integrates\nwith the following third-party systems:\n\n\n\n\nSlack\n\n\nGitHub.com\n\n\nTravis CI\n\n\nJenkins\n\n\n\n\nWe are always working to improve the developer experience, including\nincreasing the number integrations we support as demand dictates.\n\nCheck back here often as we are always working on growing this\nlist.\n\n\nAdditionally, Atomist users can create custom integrations for the\ntools they use that are not natively supported by Atomist.",
            "title": "Overview"
        },
        {
            "location": "/user-guide/integrations/slack/",
            "text": "Slack\n, through its real-time messaging (RTM) API, is the\nsupported means for interacting with the Atomist Bot.  Slack messages\nare sent to Atomist where they are processed and the proper action\ntaken.\n\n\nAtomist must be \ninstalled\n in your Slack team and the\nAtomist Bot must be invited to channels where you would like to\ninteract with it.  The \nGetting Started\n guide takes\nyou through this process step by step.",
            "title": "Slack"
        },
        {
            "location": "/user-guide/integrations/github/",
            "text": "GitHub.com\n provides a central repository for source code and\nalso issue tracking.  The Atomist GitHub OAuth application must be\nauthorized into your GitHub organization.  After authorization,\nAtomist will add the Atomist webhook to your organization so it can\nbegin to collect events.  When webhook data are posted to the Atomist\nwebhook endpoint, it is ingested into the system and appropriate\nactions are taken.\n\n\nSo that Atomist may take action on behalf of a user when that user\nasks it to do something, e.g., create a repository or comment on an\nissue, the Atomist GitHub application must also be authorized for each\nuser account in the organization.  After authorization, Atomist will\ncreate a personal access token with the needed scopes.\n\n\nThe Getting Started guide takes you through the process\nof \nauthorizing Atomist\n in your GitHub organization and each\nteam member\u2019s GitHub user.",
            "title": "GitHub.com"
        },
        {
            "location": "/user-guide/integrations/travis-ci/",
            "text": "Travis CI\n provides continuous integration services for\nGitHub hosted repositories.  Atomist integrates with Travis CI using\nwebhooks configured in each source code repository\u2019s Travis CI\nconfiguration.  For every Travis CI build, the standard webhook\npayload is sent to the Atomist Travis CI webhook endpoint.  Atomist\ningests this information and takes the appropriate actions.\n\n\nThe Getting Started guide takes you through the process\nof \nconfiguring Travis CI\n to send data to the Atomist webhook\nendpoint.",
            "title": "Travis CI"
        },
        {
            "location": "/user-guide/integrations/jenkins/",
            "text": "Jenkins\n is a continuous integration solution.  Atomist\nintegrates with Jenkins using the \nNotification plugin\n.  Once\nthe plugin is installed, activated, and configured, Jenkins will send\nthe standard build data to the Atomist Jenkins webhook endpoint.\nAtomist ingests this information and takes the appropriate actions.\n\n\nThe Getting Started guide takes you through the process\nof \nconfiguring Jenkins\n to send data to the Atomist webhook\nendpoint.",
            "title": "Jenkins"
        },
        {
            "location": "/user-guide/interfaces/",
            "text": "At Atomist we believe the goal of automation is that no interface is\nrequired: everything is automated.  But, for the time before you reach\nthe point of complete automation, Atomist provides two main user\ninterfaces.\n\n\n\n\nAtomist Bot\n: interacting with Atomist in chat\n\n\nRug CLI\n: interacting with Atomist on the command line",
            "title": "Introduction"
        },
        {
            "location": "/user-guide/interfaces/bot/",
            "text": "Presently, the best introduction to interacting with the Atomist Bot\nis to watch this video.\n\n\n\n  \n\n\n\n\n\nSearch\n\u00b6\n\n\nThe Atomist Bot can be used to search for Rugs.\n\n\nTo see the list of available generators to your team, ask the bot for\nthem:\n\n\n@atomist generators\n\n\n\n\n\nThis will return a truncated list of generators.  You can refine your\nsearch by appending filter words to the command. For instance, to\nsearch for generators for Java and Spring:\n\n\n@atomist generators java spring\n\n\n\n\n\nSimilarly, you can search for available editors using the \neditors\n\ncommand\n\n\n@atomist editors\n\n\n\n\n\nand refine the search by appending search terms.\n\n\n@atomist editors python\n\n\n\n\n\nGenerators\n\u00b6\n\n\nThe Atomist Bot can run generators for you, creating new projects for\nyou in GitHub.  To have the Atomist Bot create a project for you, you\nmust first search for and find the generator you want to run.  Once\nyou have found the generator you want to run, click the \u201cGenerate\nproject\u201d button below the generator.  The bot will start a thread\ndiscussion with you asking for this generator\u2019s parameters until you\ncomplete the exchange.  Once generated, the bot will inform you of the\nURL where to find your new project.",
            "title": "Bot"
        },
        {
            "location": "/user-guide/interfaces/bot/#search",
            "text": "The Atomist Bot can be used to search for Rugs.  To see the list of available generators to your team, ask the bot for\nthem:  @atomist generators  This will return a truncated list of generators.  You can refine your\nsearch by appending filter words to the command. For instance, to\nsearch for generators for Java and Spring:  @atomist generators java spring  Similarly, you can search for available editors using the  editors \ncommand  @atomist editors  and refine the search by appending search terms.  @atomist editors python",
            "title": "Search"
        },
        {
            "location": "/user-guide/interfaces/bot/#generators",
            "text": "The Atomist Bot can run generators for you, creating new projects for\nyou in GitHub.  To have the Atomist Bot create a project for you, you\nmust first search for and find the generator you want to run.  Once\nyou have found the generator you want to run, click the \u201cGenerate\nproject\u201d button below the generator.  The bot will start a thread\ndiscussion with you asking for this generator\u2019s parameters until you\ncomplete the exchange.  Once generated, the bot will inform you of the\nURL where to find your new project.",
            "title": "Generators"
        },
        {
            "location": "/user-guide/interfaces/cli/",
            "text": "The Rug command-line interface (CLI) provides users with the ability\nto execute Rugs in their command terminal and to script the execution\nof Rug using the shell.  The CLI provides developers with the tools\nthey need to create, test, and manage Rugs.\n\n\n\n\nNote\n\n\nIf you only plan on benefiting from Atomist capabilities through\nits standard integrations in chat, you do not need the CLI.\n\n\n\n\n\n\nRug CLI Installation\n\n\nUsing the CLI to execute Rugs\n\n\nDeveloping Rugs with the Rug CLI\n\n\nRug CLI Command Reference",
            "title": "Overview"
        },
        {
            "location": "/user-guide/interfaces/cli/install/",
            "text": "You can install the Rug command-line interface (CLI) using the\nstandard developer packaging tools for your platform.  We currently\nsupport installing the Rug CLI on GNU/Linux Deb and RPM distributions,\nMac OS X/macOS using \nHomebrew\n, and MS Windows\nusing \nChocolatey\n.\n\n\nInstall the Rug CLI on Mac OS X / macOS\n\u00b6\n\n\nThe easiest way to get start on a Mac is to install the Rug CLI using\nour \nHomebrew\n \ntap\n repository.\n\n\nOnce you have Homebrew installed, it is just two easy steps:\n\n\n$\n brew tap atomist/tap\n\n$\n brew install rug-cli\n\n\n\n\n\nIf you\u2019d like to stay on the latest, possible unstable and un-released, version of the CLI you can install HEAD from:\n\n\n$\n brew upgrade --HEAD rug-cli --fetch-HEAD\n\n\n\n\n\nInstall the RUG CLI on Linux\n\u00b6\n\n\nWe support installing via packages on Debian and RPM-based GNU/Linux\ndistributions.\n\n\nDebian/Ubuntu\n\u00b6\n\n\nTo install on a Debian-based distributions, follow the next instructions:\n\n\n\n\n\n\nGrab the public GPG key for the repository:\n\n\n$\n wget -qO - \n'https://atomist.jfrog.io/atomist/api/gpg/key/public'\n \n|\n sudo apt-key add -\n\n\n\n2.  Add a new apt source entry:\n\n\n$\n \necho\n \n\"deb https://atomist.jfrog.io/atomist/debian \n$(\nlsb_release -c -s\n)\n main\"\n \n|\n sudo tee /etc/apt/sources.list.d/atomist.list\n\n\n\n3.  Update the metadata:\n\n\n$\n sudo apt-get update\n\n\n\n4.  Install the CLI:\n\n\n$\n sudo apt-get install rug-cli\n\n\n\n\n\n\n\n\n\n\n\nJDK 8 Requirement\n\n\nRug and the CLI require Java 8. Until Rug CLI 0.22, the package would try\nto automatically install the appropriate JDK but different people install Java\ndifferently on their machine. Therefore, starting with Rug CLI 0.22, the package\nonly suggests to install the dependency and emits the following message when\nrunning the CLI without a proper Java 8 found:\n\n\n\n\n$\n rug\n\nJAVA_HOME not set and cannot find javac to deduce location, please set JAVA_HOME.\n\n\n\n\n\n\nIn that case, you must ensure you set the \nJAVA_HOME\n variable for your system\nso that it points to a valid Java 8 JDK directory. On recent, Debian/Ubuntu\ndistributions, you can simply run \nsudo apt-get install openjdk-8-jdk\n. On older\ndistributions, either install Java 8 manually and set the according variable,\nor try the following instructions:\n\n\n$\n sudo add-apt-repository ppa:openjdk-r/ppa\n\n$\n sudo apt-get update\n\n$\n sudo apt-get install openjdk-8-jdk\n\n\n\n\n\nRedHat/CentOS\n\u00b6\n\n\nTo install on a RedHat-based distributions, follow the next instructions:\n\n\n\n\n\n\nAdd a new yum repository:\n\n\n$\n cat <<EOF \n|\n sudo tee /etc/yum.repos.d/atomist.repo\n\n[Atomist]\n\n\nname=Atomist\n\n\nbaseurl=https://atomist.jfrog.io/atomist/yum/\n\n\nenabled=1\n\n\ngpgcheck=0\n\n\nEOF\n\n\n\n\n\n\n\n\n\n\nInstall the CLI:\n\n\n$\n sudo yum install rug-cli\n\n\n\n\n\n\n\n\n\nThe only required dependency is the JDK version 8 or later.\n\n\nInstall the RUG CLI on Windows\n\u00b6\n\n\nWe used \nNuget\n and \nChocolatey\n to package and\ndistribute the CLI on Windows systems (actually wherever .NET and\nPowershell run).\n\n\nThe following steps have been tested on Windows 10, your mileage may vary.\n\n\n\n\n\n\nInstall Chocolatey on your host as per\n    the \ndoc\n\n\n\n\n\n\nInstall the \njdk8\n\n    dependency using chocolatey as an Administrator:\n    \n(admin) C:\\ > choco install jdk8\n\n\n\n\n\n\n\n\n\n\nThen, install the CLI using Chocolatey as an administrator:\n\n\n(admin) C:\\ > choco install rug-cli -s \"'https://atomist.jfrog.io/atomist/api/nuget/nuget'\"\n\n\n\n\n\n\nThe CLI will be installed in\n\n%programdata%\\Chocolatey\\lib\\rug-cli\n and available to your\n\n%PATH%\n. You can now run as a normal user:\n\n\n(user) C:\\ > rug --version\n\n\nrug 0.13.0\n\n\natomist/rug-cli.git (git revision 2cde8f5: last commit 2016-12-01)\n\n\n\n\n\n\nNotice, you will find the \n.atomist\n directory for settings and\nartifacts in \n%USERPROFILE%\\.atomist\n\n\n\n\n\n\nYou can keep your Rug CLI up to dat by regularly upgrading:\n\n\n(admin) C:\\ > choco upgrade rug-cli -s \"'https://atomist.jfrog.io/atomist/api/nuget/nuget'\"\n\n\n\n\n\n\nYou can remove the Rug CLI if you no longer want it installed:\n\n\n(admin) C:\\ > choco uninstall rug-cli\n\n\n\n\n\n\nFiles and directories in \n%USERPROFILE%\\.atomist\n will not be\nremoved. You can safely delete that directory manually if you don\u2019t\nintend to use the CLI any longer.\n\n\nDocker installation\n\u00b6\n\n\nIf you cannot install using a system-wide approach, you can rely also on\ndownloading the CLI through a Docker image we provide.\n\n\n$\n docker pull atomist-docker.jfrog.io/rug-cli\n\n\n\n\n\nRunning the image as will give you the Rug shell:\n\n\n$\n docker run --rm -it atomist-docker.jfrog.io/rug-cli\n\nResolving dependencies for com.atomist:rug:0.12.0 completed\n\n\nInitializing shell for com.atomist:rug:0.12.0 completed\n\n\nPress 'Tab' to complete. Type 'help' and hit 'Return' for help, and 'exit' to quit.\n\n\nrug \u2192\n\n\n\n\n\n\nIf you want to run the CLI, the image expects you to call \nrug\n as its first\nargument. For instance:\n\n\n$\n docker run --rm -it atomist-docker.jfrog.io/rug-cli rug --version\n\nrug 0.23.0\n\n\nhttps://github.com/atomist/rug-cli.git (git revision e77cf5f; last commit 2017-02-14)\n\n\n\n\n\n\nNotice how the CLI stores its settings \ninside the container\n under\n\n/home/atomist/.atomist/cli.yml\n. All the dependencies will be downloaded into\nthe \n/home/atomist/.atomist/repository\n directory.\n\n\nYou can persist those on your host by providing the following argument to the\ndocker run command: \n-v $HOME/.atomist:/home/atomist/.atomist\n.\n\n\nTo use the CLI against a project on your host, you will also need to share your\nproject\u2019s directory with the container \n/home/atomist/project\n container\u2019s\nworking directory. For example, assuming you are currently in a Rug project:\n\n\n$\n docker run --rm -it \n\\\n\n    --user \n$UID\n:\n`\nid -g\n`\n \n\\\n\n    -v \n$HOME\n/.atomist:/home/atomist/.atomist \n\\\n\n    -v \n$PWD\n:/home/atomist/project \n\\\n\n    atomist-docker.jfrog.io/rug-cli \n\\\n\n    rug\n\n\n\n\n\nThe constraint here is the limit imposed by the management of permissions\nbetween your host\u2019s user and the user defined in the container.\n\n\nIn the container, the CLI is not run as \nroot\n but as a regular user that\nhopefully does not map any UID on your system. A possible workaround is\nto switch to a different user at runtime, hence the rather ugly command line\nabove. Another approach is to switch to \nuser namespace\n on your host.\n\n\nManual installation\n\u00b6\n\n\nIf you are not on a supported platform, or just prefer to install the\nRug CLI yourself, you can download the Rug CLI archive, unpack it, and\nsimply put it its \nbin\n directory in your \nPATH\n.\n\n\n\n\n\n\nMake sure you have Java 8 or later installed.  Run the following\n    command in a terminal and make sure you get an output something\n    like that shown.\n\n\n$\n java -version\n\njava version \"1.8.0_66\"\n\n\nJava(TM) SE Runtime Environment (build 1.8.0_66-b17)\n\n\nJava HotSpot(TM) 64-Bit Server VM (build 25.66-b17, mixed mode)\n\n\n\n\n\n\nIf that command is unsuccessful, see \nInstalling Java\n\nor \nInstalling OpenJDK\n.\n\n\n\n\n\n\nDownload either the \n.tar.gz\n or \n.zip\n archive from the\n    \nlatest Rug CLI release\n.\n\n\n\n\n\n\nUnpack the archive in an appropriate location.  Replace \nVERSION\n\n    with the version you downloaded.\n\n\n$\n mkdir \n$HOME\n/opt\n\n$\n \ncd\n \n$HOME\n/opt\n\n$\n tar -x -z -f rug-cli-VERSION-bin.tar.gz\n\n$\n ln -s rug-cli-VERSION rug-cli\n\n\n\n\n\nor\n\n\n$\n mkdir \n$HOME\n/opt\n\n$\n \ncd\n \n$HOME\n/opt\n\n$\n unzip rug-cli-VERSION-bin.zip\n\n$\n ln -s rug-cli-VERSION rug-cli\n\n\n\n\n\nOn MS Windows, download the \n.zip\n and double-click it to extract\nits contents.\n\n\n\n\n\n\nAdd the Rug CLI \nbin\n directory to your \nPATH\n.\n\n\n$\n \nexport\n \nPATH\n=\n$PATH\n:\n$HOME\n/opt/rug-cli/bin\n\n\n\n\n\nAdd the above command to your shell startup script to ensure you\nalways will have access to the Rug CLI.  On MS Windows,\nsee \nHow to Edit Your System Path\n, adding the \nbin\n\ndirectory of the archive you unpacked in the previous step.",
            "title": "Installation"
        },
        {
            "location": "/user-guide/interfaces/cli/install/#install-the-rug-cli-on-mac-os-x-macos",
            "text": "The easiest way to get start on a Mac is to install the Rug CLI using\nour  Homebrew   tap  repository.  Once you have Homebrew installed, it is just two easy steps:  $  brew tap atomist/tap $  brew install rug-cli  If you\u2019d like to stay on the latest, possible unstable and un-released, version of the CLI you can install HEAD from:  $  brew upgrade --HEAD rug-cli --fetch-HEAD",
            "title": "Install the Rug CLI on Mac OS X / macOS"
        },
        {
            "location": "/user-guide/interfaces/cli/install/#install-the-rug-cli-on-linux",
            "text": "We support installing via packages on Debian and RPM-based GNU/Linux\ndistributions.",
            "title": "Install the RUG CLI on Linux"
        },
        {
            "location": "/user-guide/interfaces/cli/install/#debianubuntu",
            "text": "To install on a Debian-based distributions, follow the next instructions:    Grab the public GPG key for the repository:  $  wget -qO -  'https://atomist.jfrog.io/atomist/api/gpg/key/public'   |  sudo apt-key add - \n\n2.  Add a new apt source entry:  $   echo   \"deb https://atomist.jfrog.io/atomist/debian  $( lsb_release -c -s )  main\"   |  sudo tee /etc/apt/sources.list.d/atomist.list \n\n3.  Update the metadata:  $  sudo apt-get update \n\n4.  Install the CLI:  $  sudo apt-get install rug-cli     JDK 8 Requirement  Rug and the CLI require Java 8. Until Rug CLI 0.22, the package would try\nto automatically install the appropriate JDK but different people install Java\ndifferently on their machine. Therefore, starting with Rug CLI 0.22, the package\nonly suggests to install the dependency and emits the following message when\nrunning the CLI without a proper Java 8 found:   $  rug JAVA_HOME not set and cannot find javac to deduce location, please set JAVA_HOME.   In that case, you must ensure you set the  JAVA_HOME  variable for your system\nso that it points to a valid Java 8 JDK directory. On recent, Debian/Ubuntu\ndistributions, you can simply run  sudo apt-get install openjdk-8-jdk . On older\ndistributions, either install Java 8 manually and set the according variable,\nor try the following instructions:  $  sudo add-apt-repository ppa:openjdk-r/ppa $  sudo apt-get update $  sudo apt-get install openjdk-8-jdk",
            "title": "Debian/Ubuntu"
        },
        {
            "location": "/user-guide/interfaces/cli/install/#redhatcentos",
            "text": "To install on a RedHat-based distributions, follow the next instructions:    Add a new yum repository:  $  cat <<EOF  |  sudo tee /etc/yum.repos.d/atomist.repo [Atomist]  name=Atomist  baseurl=https://atomist.jfrog.io/atomist/yum/  enabled=1  gpgcheck=0  EOF     Install the CLI:  $  sudo yum install rug-cli    The only required dependency is the JDK version 8 or later.",
            "title": "RedHat/CentOS"
        },
        {
            "location": "/user-guide/interfaces/cli/install/#install-the-rug-cli-on-windows",
            "text": "We used  Nuget  and  Chocolatey  to package and\ndistribute the CLI on Windows systems (actually wherever .NET and\nPowershell run).  The following steps have been tested on Windows 10, your mileage may vary.    Install Chocolatey on your host as per\n    the  doc    Install the  jdk8 \n    dependency using chocolatey as an Administrator:\n     (admin) C:\\ > choco install jdk8      Then, install the CLI using Chocolatey as an administrator:  (admin) C:\\ > choco install rug-cli -s \"'https://atomist.jfrog.io/atomist/api/nuget/nuget'\"   The CLI will be installed in %programdata%\\Chocolatey\\lib\\rug-cli  and available to your %PATH% . You can now run as a normal user:  (user) C:\\ > rug --version  rug 0.13.0  atomist/rug-cli.git (git revision 2cde8f5: last commit 2016-12-01)   Notice, you will find the  .atomist  directory for settings and\nartifacts in  %USERPROFILE%\\.atomist    You can keep your Rug CLI up to dat by regularly upgrading:  (admin) C:\\ > choco upgrade rug-cli -s \"'https://atomist.jfrog.io/atomist/api/nuget/nuget'\"   You can remove the Rug CLI if you no longer want it installed:  (admin) C:\\ > choco uninstall rug-cli   Files and directories in  %USERPROFILE%\\.atomist  will not be\nremoved. You can safely delete that directory manually if you don\u2019t\nintend to use the CLI any longer.",
            "title": "Install the RUG CLI on Windows"
        },
        {
            "location": "/user-guide/interfaces/cli/install/#docker-installation",
            "text": "If you cannot install using a system-wide approach, you can rely also on\ndownloading the CLI through a Docker image we provide.  $  docker pull atomist-docker.jfrog.io/rug-cli  Running the image as will give you the Rug shell:  $  docker run --rm -it atomist-docker.jfrog.io/rug-cli Resolving dependencies for com.atomist:rug:0.12.0 completed  Initializing shell for com.atomist:rug:0.12.0 completed  Press 'Tab' to complete. Type 'help' and hit 'Return' for help, and 'exit' to quit.  rug \u2192   If you want to run the CLI, the image expects you to call  rug  as its first\nargument. For instance:  $  docker run --rm -it atomist-docker.jfrog.io/rug-cli rug --version rug 0.23.0  https://github.com/atomist/rug-cli.git (git revision e77cf5f; last commit 2017-02-14)   Notice how the CLI stores its settings  inside the container  under /home/atomist/.atomist/cli.yml . All the dependencies will be downloaded into\nthe  /home/atomist/.atomist/repository  directory.  You can persist those on your host by providing the following argument to the\ndocker run command:  -v $HOME/.atomist:/home/atomist/.atomist .  To use the CLI against a project on your host, you will also need to share your\nproject\u2019s directory with the container  /home/atomist/project  container\u2019s\nworking directory. For example, assuming you are currently in a Rug project:  $  docker run --rm -it  \\ \n    --user  $UID : ` id -g `   \\ \n    -v  $HOME /.atomist:/home/atomist/.atomist  \\ \n    -v  $PWD :/home/atomist/project  \\ \n    atomist-docker.jfrog.io/rug-cli  \\ \n    rug  The constraint here is the limit imposed by the management of permissions\nbetween your host\u2019s user and the user defined in the container.  In the container, the CLI is not run as  root  but as a regular user that\nhopefully does not map any UID on your system. A possible workaround is\nto switch to a different user at runtime, hence the rather ugly command line\nabove. Another approach is to switch to  user namespace  on your host.",
            "title": "Docker installation"
        },
        {
            "location": "/user-guide/interfaces/cli/install/#manual-installation",
            "text": "If you are not on a supported platform, or just prefer to install the\nRug CLI yourself, you can download the Rug CLI archive, unpack it, and\nsimply put it its  bin  directory in your  PATH .    Make sure you have Java 8 or later installed.  Run the following\n    command in a terminal and make sure you get an output something\n    like that shown.  $  java -version java version \"1.8.0_66\"  Java(TM) SE Runtime Environment (build 1.8.0_66-b17)  Java HotSpot(TM) 64-Bit Server VM (build 25.66-b17, mixed mode)   If that command is unsuccessful, see  Installing Java \nor  Installing OpenJDK .    Download either the  .tar.gz  or  .zip  archive from the\n     latest Rug CLI release .    Unpack the archive in an appropriate location.  Replace  VERSION \n    with the version you downloaded.  $  mkdir  $HOME /opt $   cd   $HOME /opt $  tar -x -z -f rug-cli-VERSION-bin.tar.gz $  ln -s rug-cli-VERSION rug-cli  or  $  mkdir  $HOME /opt $   cd   $HOME /opt $  unzip rug-cli-VERSION-bin.zip $  ln -s rug-cli-VERSION rug-cli  On MS Windows, download the  .zip  and double-click it to extract\nits contents.    Add the Rug CLI  bin  directory to your  PATH .  $   export   PATH = $PATH : $HOME /opt/rug-cli/bin  Add the above command to your shell startup script to ensure you\nalways will have access to the Rug CLI.  On MS Windows,\nsee  How to Edit Your System Path , adding the  bin \ndirectory of the archive you unpacked in the previous step.",
            "title": "Manual installation"
        },
        {
            "location": "/user-guide/interfaces/cli/using-rugs/",
            "text": "The Rug CLI is able to run Rugs locally against projects on your local\nfile system.\n\n\nSearch\n\u00b6\n\n\nTo find available generators with the CLI, run the following command.\n\n\n$\n rug search --operations --type generator\n\nResolving version range for com.atomist:rug:(0.12.9,0.13.1) completed\n\n\nResolving dependencies for com.atomist:rug:0.13.0-SNAPSHOT completed\n\n\n  Searching https://api.atomist.com/catalog/operation/search\n\n\nSearching catalogs completed\n\n\n\n\u2192 Remote Archives (18 archives found)\n\n\n  atomist-rugs:flask-service [public] (0.1.2)\n\n\n    Generators\n\n\n    \u2514\u2500\u2500 NewFlaskMicroserviceProject\n\n\n  atomist-rugs:rug-project [public] (0.2.0)\n\n\n    Generators\n\n\n    \u251c\u2500\u2500 NewRugProject\n\n\n    \u2514\u2500\u2500 NewStarterRugProject\n\n\n  atomist-rugs:spring-boot-rest-service [public] (0.7.1)\n\n\n    Generators\n\n\n    \u2514\u2500\u2500 NewSpringBootRestService\n\n\n...\n\n\n\n\n\n\nThe output informs you about the name of the Rug generator and which\nRug archive it lives in.\n\n\nGenerators\n\u00b6\n\n\nYou can create new projects on your local machine using the CLI, for instance:\n\n\n$ cd ~/workspace\n$ rug generate atomist-rugs:rug-project:NewStarterRugProject my-new-generator\n\n\n\n\n\nThe first argument is always the project name.\n\n\n\n\nTip\n\n\nWhenever you run a Rug Generator, the \nrug CLI\n downloads the archive on the\nfly before applying it. There is no specific \ndownload\n command.",
            "title": "Using Rugs"
        },
        {
            "location": "/user-guide/interfaces/cli/using-rugs/#search",
            "text": "To find available generators with the CLI, run the following command.  $  rug search --operations --type generator Resolving version range for com.atomist:rug:(0.12.9,0.13.1) completed  Resolving dependencies for com.atomist:rug:0.13.0-SNAPSHOT completed    Searching https://api.atomist.com/catalog/operation/search  Searching catalogs completed  \u2192 Remote Archives (18 archives found)    atomist-rugs:flask-service [public] (0.1.2)      Generators      \u2514\u2500\u2500 NewFlaskMicroserviceProject    atomist-rugs:rug-project [public] (0.2.0)      Generators      \u251c\u2500\u2500 NewRugProject      \u2514\u2500\u2500 NewStarterRugProject    atomist-rugs:spring-boot-rest-service [public] (0.7.1)      Generators      \u2514\u2500\u2500 NewSpringBootRestService  ...   The output informs you about the name of the Rug generator and which\nRug archive it lives in.",
            "title": "Search"
        },
        {
            "location": "/user-guide/interfaces/cli/using-rugs/#generators",
            "text": "You can create new projects on your local machine using the CLI, for instance:  $ cd ~/workspace\n$ rug generate atomist-rugs:rug-project:NewStarterRugProject my-new-generator  The first argument is always the project name.   Tip  Whenever you run a Rug Generator, the  rug CLI  downloads the archive on the\nfly before applying it. There is no specific  download  command.",
            "title": "Generators"
        },
        {
            "location": "/user-guide/interfaces/cli/developing-rugs/",
            "text": "The Rug CLI gives you the tooling to search, install, and run public\nand private Rugs on your local machine. It is also the tool to\ndevelop, test and publish your own Rugs.\n\n\nInstalling the Rug CLI\n\u00b6\n\n\nYou can install the Rug command-line interface using standard\npackaging tools for your operating system.\nSee \nRug CLI Installation\n for instructions.\n\n\nAdditional Dependencies\n\u00b6\n\n\nRugs are implemented in \nTypeScript\n and it is recommended you install\n\nnpm\n. You should also get an IDE that has good support for that\nlanguage.\n\n\nQuick CLI Tour\n\u00b6\n\n\nGet some Rugs\n\u00b6\n\n\nTo generate and edit code with Rug automation, you should become\nfamiliar with Rug editors, generators, and reviewers.  The best way to\ndo that is to look at some examples.  Some simple examples of Rug\neditors can be found in the \ncommon-editors\n repo.  You can\nclone that repo with the following command.\n\n\n$\n git clone https://github.com/atomist-rugs/common-editors.git\n\n$\n \ncd\n common-editors\n\n$\n ls -1F\n\nCHANGELOG.md\n\n\nCODE_OF_CONDUCT.md\n\n\nLICENSE\n\n\nREADME.md\n\n\nsrc/\n\n\n\n\n\n\nYou cloned the repo, but where are the Rugs?  Rugs are always located\nin the \n.atomist\n directory at the top level of the project, i.e., the\nsame directory that has the \n.git\n directory.\n\n\n$\n ls -1F .atomist/\n\nbuild/\n\n\neditors/\n\n\nmanifest.yml\n\n\ntarget/\n\n\ntemplates/\n\n\ntests/\n\n\n\n\n\n\nHere you can see the standard layout for a Rug directory.  It has a\n\nmanifest.yml\n describing the contents of the project.  Think of this\nas the metadata for your Rugs, i.e., the name, version, dependencies,\netc.  The editors and generators are in the \neditors\n directory.  Any\ntemplates are in the \ntemplates\n directory.  Testing is integral to\nRug, so we also use a \ntests\n directory to hold all our tests.  There\nis also a \nbuild\n directory that contains the repository\u2019s CI scripts\nand configurations.\n\n\nLet\u2019s see what editors we have available.\n\n\n$\n awk \n'$1 == \"editor\" { print $2 }'\n .atomist/editors/*.rug\n\nAddApacheSoftwareLicense20\n\n\nAddChangeLog\n\n\nAddReadme\n\n\nAddScalaMavenGitIgnore\n\n\nClassRenamer\n\n\nPackageMove\n\n\nPomParameterizer\n\n\nRemoveApacheSoftwareLicense20\n\n\nRemoveChangeLog\n\n\nRemoveCodeOfConduct\n\n\n\n\n\n\nFeel free to look around in the \n.atomist\n directory to see what is\nthere, investigate the Rug syntax, and see what the tests look like.\n\n\nTest those Rugs\n\u00b6\n\n\nIt is a best practice to provide tests for your Rugs.  The first Rug\ncommand we are going to try will run all of the tests available in the\ncommon-editors repo.\n\n\n$\n rug \ntest\n\n\nProcessing dependencies\n\n\n  Downloading com/atomist/rug/maven-metadata.xml \u2190 rug-types (0kb) succeeded\n\n\n  Downloading com/atomist/rug-cli-root/1.0.0/rug-cli-root-1.0.0.pom \u2190 rug-types (0kb) succeeded\n\n\n  Downloading com/atomist/rug/maven-metadata.xml \u2190 rug-types (2kb) succeeded\n\n\n  Downloading com/atomist/rug/0.8.0/rug-0.8.0.pom \u2190 rug-types (13kb) succeeded\n\n\n  ... (more downloads)\n\n\n  Downloading com/atomist/rug-cli-root/1.0.0/rug-cli-root-1.0.0.jar \u2190 rug-types (1kb) succeeded\n\n\n  Downloading org/scala-lang/scala-reflect/2.11.8/scala-reflect-2.11.8.jar \u2190 maven-central (4466kb) succeeded\n\n\nResolving dependencies for atomist-rugs:common-editors:0.7.0 \u2190 local completed\n\n\nLoading atomist-rugs:common-editors:0.7.0 \u2190 local into runtime completed\n\n\nExecuting scenario AddApacheSoftwareLicense20 should add a new LICENSE file according to a provided template...\n\n\n  Testing assertion fileExists(SimpleLiteral(LICENSE))\n\n\n  Testing assertion fileContains(SimpleLiteral(LICENSE),SimpleLiteral(Version 2.0, January 2004))\n\n\nExecuting scenario AddChangeLog should add CHANGELOG.md...\n\n\n  Testing assertion fileExists(IdentifierFunctionArg(changelog,None))\n\n\n  Testing assertion fileContains(IdentifierFunctionArg(changelog,None),IdentifierFunctionArg(repo_slug,None))\n\n\nExecuting scenario AddChangeLog should overwrite CHANGELOG.md...\n\n\n  Testing assertion fileExists(IdentifierFunctionArg(changelog,None))\n\n\n  Testing assertion fileContains(IdentifierFunctionArg(changelog,None),IdentifierFunctionArg(repo_slug,None))\n\n\n  Testing assertion ParsedJavaScriptFunction(JavaScriptBlock( !result.fileContains(changelog, \"common-editor\") ))\n\n\nExecuting scenario AddChangeLog should reject invalid repo_slug...\n\n\nExecuting scenario AddChangeLog should reject missing parameter...\n\n\nExecuting scenario AddScalaMavenGitIgnore should add a new .gitignore file according to a provided template...\n\n\n  Testing assertion fileExists(SimpleLiteral(.gitignore))\n\n\n  Testing assertion fileContains(SimpleLiteral(.gitignore),SimpleLiteral(# Created by Atomist))\n\n\nExecuting scenario AddScalaMavenGitIgnore should overwrite an existing .gitignore file according to a provided template...\n\n\n  Testing assertion fileExists(SimpleLiteral(.gitignore))\n\n\n  Testing assertion fileContains(SimpleLiteral(.gitignore),SimpleLiteral(# Created by Atomist))\n\n\nExecuting scenario AddScalaMavenGitIgnore should add a new .gitignore to a subdirectory...\n\n\n  Testing assertion fileExists(SimpleLiteral(other/.gitignore))\n\n\n  Testing assertion fileContains(SimpleLiteral(other/.gitignore),SimpleLiteral(# Created by Atomist))\n\n\nExecuting scenario AddReadme should add README.md...\n\n\n  Testing assertion fileExists(IdentifierFunctionArg(readme,None))\n\n\n  Testing assertion fileContains(IdentifierFunctionArg(readme,None),IdentifierFunctionArg(newName,None))\n\n\n  Testing assertion fileContains(IdentifierFunctionArg(readme,None),IdentifierFunctionArg(newDescription,None))\n\n\nExecuting scenario AddReadme should reject invalid value name parameter...\n\n\nExecuting scenario AddReadme should reject missing parameter...\n\n\nExecuting scenario ClassRenamer should rename simple class...\n\n\n  Testing assertion EqualsExpression(fileCount(),SimpleLiteral(1))\n\n\n  Testing assertion fileContains(SimpleLiteral(src/main/java/Cat.java),SimpleLiteral(class Cat))\n\n\nExecuting scenario ClassRenamer should rename class and leave no references to old name...\n\n\n  Testing assertion fileExists(SimpleLiteral(src/main/java/com/atomist/springrest/WeirdAndWonderful.java))\n\n\n  Testing assertion ParsedJavaScriptFunction(JavaScriptBlock( !result.anyFileContains(\".java\", oldclass) ))\n\n\nExecuting scenario ClassRenamer should rename class but leave any additional characters on the class name...\n\n\n  Testing assertion fileExists(SimpleLiteral(src/main/java/com/atomist/springrest/WeirdAndWonderfulConfiguration.java))\n\n\n  Testing assertion fileExists(SimpleLiteral(src/main/java/com/atomist/springrest/WeirdAndWonderfulApplication.java))\n\n\n  Testing assertion fileExists(SimpleLiteral(src/test/java/com/atomist/springrest/WeirdAndWonderfulApplicationTests.java))\n\n\n  Testing assertion fileExists(SimpleLiteral(src/test/java/com/atomist/springrest/WeirdAndWonderfulOutOfContainerIntegrationTests.java))\n\n\n  Testing assertion fileExists(SimpleLiteral(src/test/java/com/atomist/springrest/WeirdAndWonderfulWebIntegrationTests.java))\n\n\n  Testing assertion ParsedJavaScriptFunction(JavaScriptBlock( !result.anyFileContains(\".java\", \"SpringRest\") ))\n\n\nExecuting scenario PackageMove should move base package and leave no references to old packages...\n\n\n  Testing assertion fileExists(SimpleLiteral(src/main/java/com/foo/bar/SpringRestConfiguration.java))\n\n\n  Testing assertion ParsedJavaScriptFunction(JavaScriptBlock( !result.anyFileContains(\".java\", oldpack) ))\n\n\nExecuting scenario PomParameterizer should establish a new project's valid pom.xml...\n\n\n  Testing assertion fileExists(SimpleLiteral(pom.xml))\n\n\n  Testing assertion fileContains(SimpleLiteral(pom.xml),SimpleLiteral(<artifactId>mynewproject</artifactId>))\n\n\n  Testing assertion fileContains(SimpleLiteral(pom.xml),SimpleLiteral(<groupId>mygroup</groupId>))\n\n\n  Testing assertion fileContains(SimpleLiteral(pom.xml),SimpleLiteral(<version>0.0.1-SNAPSHOT</version>))\n\n\n  Testing assertion fileContains(SimpleLiteral(pom.xml),SimpleLiteral(<description>My project description</description>))\n\n\nExecuting scenario RemoveApacheSoftwareLicense20 should remove Apache license...\n\n\n  Testing assertion ParsedJavaScriptFunction(JavaScriptBlock( !result.fileExists(\"LICENSE\") ))\n\n\nExecuting scenario RemoveApacheSoftwareLicense20 should not remove other license...\n\n\nExecuting scenario RemoveChangeLog should remove CHANGELOG...\n\n\n  Testing assertion ParsedJavaScriptFunction(JavaScriptBlock( !result.fileExists(\"CHANGELOG.md\") ))\n\n\nExecuting scenario RemoveApacheSoftwareLicense20 silently do nothing if no CHANGELOG present...\n\n\nExecuting scenario RemoveCodeOfConduct should remove CODE_OF_CONDUCT...\n\n\n  Testing assertion ParsedJavaScriptFunction(JavaScriptBlock( !result.fileExists(\"CODE_OF_CONDUCT.md\") ))\n\n\nExecuting scenario RemoveCodeOfConduct silently do nothing if no CODE_OF_CONDUCT present...\n\n\nRunning test scenarios in atomist-rugs:common-editors:0.7.0 \u2190 local completed\n\n\n\nSuccessfully executed 22 of 22 scenarios: Test SUCCESS\n\n\n\n\n\n\nThe above command will download all the dependencies needed to run the\neditors defined in the common-editors repo.  Depending on the speed of\nyour network connection, this may take some time.  Each dependency\nonly need be downloaded once, so subsequent executions of \nrug\n will\nbe faster.\n\n\nAs you can see from the last line of output, all of the test scenarios\npassed.\n\n\nMake your Rugs Available\n\u00b6\n\n\nThe next step is to create a Rug archive and install it locally so you\ncan use it on local projects.  This is accomplished with the \ninstall\n\ncommand.\n\n\n$\n rug install\n\nResolving dependencies for atomist-rugs:common-editors:0.7.0 \u2190 local completed\n\n\nLoading atomist-rugs:common-editors:0.7.0 \u2190 local into runtime completed\n\n\n  Generated META-INF/maven/atomist-rugs/common-editors/pom.xml\n\n\n  Generated .atomist/manifest.yml\n\n\n  Generated .atomist/metadata.json\n\n\nGenerating archive metadata completed\n\n\n  Installed atomist-rugs/common-editors/0.7.0/common-editors-0.7.0.zip \u2192 /Users/dd/.atomist/repository\n\n\n  Installed atomist-rugs/common-editors/0.7.0/common-editors-0.7.0.pom \u2192 /Users/dd/.atomist/repository\n\n\n  Installed atomist-rugs/common-editors/0.7.0/common-editors-0.7.0-metadata.json \u2192 /Users/dd/.atomist/repository\n\n\nInstalling archive into local repository completed\n\n\n\n\u2192 Archive\n\n\n  ~/develop/atomist-rugs/common-editors/.atomist/target/common-editors-0.7.0.zip (39kb in 43 files)\n\n\n\n\u2192 Contents\n\n\n  \u251c\u2500\u252c .atomist\n\n\n  | \u251c\u2500\u252c build\n\n\n  | | \u251c\u2500\u2500 cli-build.yml\n\n\n  | | \u251c\u2500\u2500 cli-dev.yml\n\n\n  | | \u2514\u2500\u2500 cli-release.yml\n\n\n  | \u251c\u2500\u252c editors\n\n\n  | | \u251c\u2500\u2500 AddApacheSoftwareLicense20.rug\n\n\n  | | \u251c\u2500\u2500 AddChangeLog.rug\n\n\n  | | \u251c\u2500\u2500 AddReadme.rug\n\n\n  | | \u251c\u2500\u2500 AddScalaMavenGitIgnore.rug\n\n\n  | | \u251c\u2500\u2500 ClassRenamer.rug\n\n\n  | | \u251c\u2500\u2500 PackageMove.rug\n\n\n  | | \u251c\u2500\u2500 PomParameterizer.rug\n\n\n  | | \u251c\u2500\u2500 RemoveApacheSoftwareLicense20.rug\n\n\n  | | \u251c\u2500\u2500 RemoveChangeLog.rug\n\n\n  | | \u2514\u2500\u2500 RemoveCodeOfConduct.rug\n\n\n  | \u251c\u2500\u2500 manifest.yml\n\n\n  | \u251c\u2500\u2500 metadata.json\n\n\n  | \u251c\u2500\u252c templates\n\n\n  | | \u251c\u2500\u2500 ApacheSoftwareLicenseV20.vm\n\n\n  | | \u251c\u2500\u2500 CHANGELOG.md.mustache\n\n\n  | | \u251c\u2500\u2500 gitignore.vm\n\n\n  | | \u2514\u2500\u2500 readme.vm\n\n\n  | \u2514\u2500\u252c tests\n\n\n  |   \u251c\u2500\u2500 AddApacheSoftwareLicense20.rt\n\n\n  |   \u251c\u2500\u2500 AddChangeLog.rt\n\n\n  |   \u251c\u2500\u2500 AddGitIgnore.rt\n\n\n  |   \u251c\u2500\u2500 AddReadme.rt\n\n\n  |   \u251c\u2500\u2500 ClassRenamer.rt\n\n\n  |   \u251c\u2500\u2500 PackageMove.rt\n\n\n  |   \u251c\u2500\u2500 PomParameterizer.rt\n\n\n  |   \u251c\u2500\u2500 RemoveApacheSoftwareLicense20.rt\n\n\n  |   \u251c\u2500\u2500 RemoveChangeLog.rt\n\n\n  |   \u2514\u2500\u2500 RemoveCodeOfConduct.rt\n\n\n  \u251c\u2500\u2500 .atomist.yml\n\n\n  \u251c\u2500\u2500 .gitignore\n\n\n  \u251c\u2500\u2500 CHANGELOG.md\n\n\n  \u251c\u2500\u2500 CODE_OF_CONDUCT.md\n\n\n  \u251c\u2500\u2500 LICENSE\n\n\n  \u251c\u2500\u252c META-INF/maven/atomist-rugs/common-editors\n\n\n  | \u2514\u2500\u2500 pom.xml\n\n\n  \u251c\u2500\u2500 README.md\n\n\n  \u251c\u2500\u252c src/main/java/com/atomist/springrest\n\n\n  | \u251c\u2500\u2500 SpringRestApplication.java\n\n\n  | \u2514\u2500\u2500 SpringRestConfiguration.java\n\n\n  \u251c\u2500\u252c src/main/resources\n\n\n  | \u251c\u2500\u2500 application.properties\n\n\n  | \u2514\u2500\u2500 logback.xml\n\n\n  \u2514\u2500\u252c src/test/java/com/atomist/springrest\n\n\n    \u251c\u2500\u2500 SpringRestApplicationTests.java\n\n\n    \u251c\u2500\u2500 SpringRestOutOfContainerIntegrationTests.java\n\n\n    \u2514\u2500\u2500 SpringRestWebIntegrationTests.java\n\n\n\nSuccessfully installed archive for atomist-rugs:common-editors:0.7.0\n\n\n\n\n\n\nThis command packages up all of the Rugs in the \n.atomist\n directory\nand installs them in your local repository, typically\n\n~/.atomist/repository\n.\n\n\nList the installed Editors\n\u00b6\n\n\nRemember above when we ran that arcane \nawk\n command to list the\neditors?  There is a better way!  Now that we some editors installed\nlocally, we can list our local editors.\n\n\n$\n rug list\n\nResolving dependencies for com.atomist:rug:0.8.0 completed\n\n\nListing local archives completed\n\n\n\n\u2192 Local Archives\n\n\n  atomist-rugs:common-editors (0.7.0)\n\n\n\nFor more information on specific archive version, run:\n\n\n  rug describe archive ARCHIVE -a VERSION\n\n\n\n\n\n\nLooks like the Rug Archive we installed is indeed installed.  That\nlast line of the output tells us how we can get more information.\nLet\u2019s try that command.  Since we only have one version available, we\ncan omit the \n-a\n command-line option.  When it is not provided, the\nlatest version is used.\n\n\n$\n rug describe archive atomist-rugs:common-editors\n\nProcessing dependencies\n\n\n  Downloading atomist-rugs/common-editors/maven-metadata.xml \u2190 rugs (0kb) succeeded\n\n\nResolving dependencies for atomist-rugs:common-editors:latest completed\n\n\nLoading atomist-rugs:common-editors:0.7.0 into runtime completed\n\n\n\natomist-rugs:common-editors:0.7.0\n\n\n\n\u2192 Origin\n\n\n  atomist-rugs/common-editors.git#master (622ed10)\n\n\n\u2192 Archive\n\n\n  ~/.atomist/repository/atomist-rugs/common-editors/0.7.0/common-editors-0.7.0.zip (39kb in 43 files)\n\n\n\n\u2192 Editors\n\n\n  AddApacheSoftwareLicense20 (add the Apache Software License version 2.0 file)\n\n\n  AddChangeLog (adds a new CHANGELOG)\n\n\n  AddReadme (adds a project specific README)\n\n\n  AddScalaMavenGitIgnore (adds a .gitignore suitable for Scala Maven projects)\n\n\n  ClassRenamer (renames a Java class, replacing one literal pattern with another)\n\n\n  PackageMove (renames a Java package)\n\n\n  PomParameterizer (updates a Maven pom to a new group, artifact, version and description)\n\n\n  RemoveApacheSoftwareLicense20 (removes an Apache Software License version 2.0 file if present)\n\n\n  RemoveChangeLog (removes CHANGELOG file if present)\n\n\n  RemoveCodeOfConduct (removes CODE_OF_CONDUCT file if present)\n\n\n\n\u2192 Requires\n\n\n  [0.8.0,1.0.0)\n\n\n\nTo get more information on any of the Rugs listed above, run:\n\n\n  rug describe editor|generator|executor|reviewer ARTIFACT\n\n\n\n\n\n\nThat list of editors looks familiar, we must be doing something right!\nAgain, the last line of the output tells us how we can get more\ninformation.  Let\u2019s try it.\n\n\n$\n rug describe editor AddApacheSoftwareLicense20\n\n\nNo valid ARTIFACT provided, no default artifact defined and not in local mode.\n\n\n\nRun the following command for usage help:\n\n\n  rug describe --help.\n\n\n\n\n\n\nHmm, looks like something went wrong.  Fortunately the error tells us\nwe either need to define a default artifact or run in local mode.  How\ndo we run in local mode?  The above output tells us to run \nrug\ndescribe --help\n for usage help.  Let\u2019s do it.\n\n\n$\n rug describe --help\n\nUsage: rug describe [OPTION]... TYPE ARTIFACT\n\n\nPrint details about an archive or Rug.\n\n\n\nOptions:\n\n\n  -?,-h,--help          Print help information\n\n\n  -X,--error            Print verbose error messages\n\n\n  -o,--offline          Use only downloaded archives\n\n\n  -q,--quiet            Do not display progress messages\n\n\n  -r,--resolver-report  Print dependency tree\n\n\n  -s,--settings FILE    Use settings file FILE\n\n\n  -t,--timer            Print timing information\n\n\n  -u,--update           Update dependency resolution\n\n\n\nCommand Options:\n\n\n  -a,--archive-version AV  Use archive version AV\n\n\n  -l,--local               Use local working directory as archive\n\n\n\nTYPE should be 'editor', 'generator', 'executor', 'reviewer' or\n\n\n'archive' and ARTIFACT should be the full name of an artifact, e.g.,\n\n\n\"atomist:spring-service:Spring Microservice\".  If the name of the\n\n\nartifact has spaces in it, you need to put quotes around it.\n\n\n\nPlease report issues at https://github.com/atomist/rug-cli\n\n\n\n\n\n\nThe help output provides two pieces of information useful to us.\nFirst, it says the \nARTIFACT\n should be the full name of the artifact.\nWe only provided the editor name.  Perhaps we needed to prepend the\narchive name.  Second, the \n-l\n or \n--local\n command-line option tells\nthe CLI to use the current directory as an archive.  In other words,\nit tries to find an \n.atomist\n directory and use the Rugs in it.\nSince we are in a directory that has the \n.atomist\n directory with the\neditor we want to run, that seems promising.\n\n\n$\n rug describe -l editor AddApacheSoftwareLicense20\n\nResolving dependencies for atomist-rugs:common-editors:0.7.0 \u2190 local completed\n\n\nLoading atomist-rugs:common-editors:0.7.0 \u2190 local into runtime completed\n\n\n\nAddApacheSoftwareLicense20\n\n\natomist-rugs:common-editors:0.7.0\n\n\nadd the Apache Software License version 2.0 file\n\n\n\n\u2192 Tags\n\n\n  apache (apache)\n\n\n  license (license)\n\n\n  documentation (documentation)\n\n\n\u2192 Parameters\n\n\n  no parameters needed\n\n\n\nTo invoke the AddApacheSoftwareLicense20 editor, run:\n\n\n  rug edit \"atomist-rugs:common-editors:AddApacheSoftwareLicense20\" -a 0.7.0 -l\n\n\n\n\n\n\nSuccess!  The output from that command also tells us what the full\nname of the editor is,\n\natomist-rugs:common-editors:AddApacheSoftwareLicense20\n.  We could\nhave guessed that.  Since we previously installed the editor, we could\nhave run the following command and gotten the same result.\n\n\n$\n rug describe editor atomist-rugs:common-editors:AddApacheSoftwareLicense20\n\n\n\n\n\nThe \ndescribe editor\n output includes several pieces of useful\ninformation.  The description, \u201cadds the Apache Software License\nversion 2.0 file\u201d, provides a slightly more verbose description than\nthe already descriptive editor name.  We can see that this editor has\nthree tags, \nlicense\n, \napache\n, and \ndocumentation\n, and it takes no\nparameters.\n\n\nAdding the Apache license seems like a good thing to do.  The last\nline of the output once again gives us the information we need: how to\nrun this editor.  Let\u2019s try it.\n\n\nRun an Editor\n\u00b6\n\n\nWe will just run the command we were provided above.  We remove the\n\n-l\n since, having installed the archive, we do not need to run it\nfrom the local directory, we can run it from the installed archive.\n\n\n$\n rug edit atomist-rugs:common-editors:AddApacheSoftwareLicense20 -a \n0\n.7.0\n\nResolving dependencies for atomist-rugs:common-editors:latest completed\n\n\nLoading atomist-rugs:common-editors:0.7.0 into runtime completed\n\n\nRunning editor AddApacheSoftwareLicense20 of atomist-rugs:common-editors:0.7.0 completed\n\n\n\n\u2192 Project\n\n\n  ~/develop/atomist-rugs/common-editors/ (282kb in 302 files)\n\n\n\n\u2192 Changes\n\n\n  \u251c\u2500\u2500 LICENSE created 11kb\n\n\n  \u2514\u2500\u2500 .atomist.yml created 3kb\n\n\n\nSuccessfully edited project common-editors\n\n\n\n\n\n\nLooks like two files were edited in the local repository.\n\n\n$\n git status\n\nOn branch master\n\n\nYour branch is up-to-date with 'origin/master'.\n\n\nChanges not staged for commit:\n\n\n  (use \"git add <file>...\" to update what will be committed)\n\n\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\n\n    modified:   .atomist.yml\n\n\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n\n\n\n\n\nHmm, git shows only one file has been modified.  Why?  Well, the\ncontents of the \nLICENSE\n file were set to be the Apache Software\nLicense, but that is what the contents already were.  Git is smart.\nWhat is that \natomist.yml\n file?\n\n\n$\n cat .atomist.yml\n\n---\n\n\nkind: \"operation\"\n\n\nclient: \"rug-cli 0.20.0\"\n\n\neditor:\n\n\n  name: \"atomist-rugs.common-editors.AddApacheSoftwareLicense20\"\n\n\n  group: \"atomist-rugs\"\n\n\n  artifact: \"common-editors\"\n\n\n  version: \"0.7.0\"\n\n\n  origin:\n\n\n    repo: \"atomist-rugs/common-editors.git\"\n\n\n    branch: \"master\"\n\n\n    sha: \"622ed10\"\n\n\n\n\n\n\nLooks like it is a record of what we have done, nice!\n\n\nI suppose we should have guessed the editor would act on the local\ndirectory, but we don\u2019t really want to edit the current project.\nLet\u2019s create another project to edit.  We run the same command as\nabove, except we\u2019ll remove the archive version command-line option.\nIf you do not provide the \n-a\n option, the CLI will use the latest\ninstalled version, 0.7.0 in our case.\n\n\n$\n \ncd\n ..\n\n$\n mkdir atomist-test\n\n$\n \ncd\n !$\n\n$\n git init\n\n$\n rug edit atomist-rugs:common-editors:AddApacheSoftwareLicense20\n\n$\n rug edit atomist-rugs:common-editors:AddApacheSoftwareLicense20\n\nResolving dependencies for atomist-rugs:common-editors:latest completed\n\n\nLoading atomist-rugs:common-editors:0.7.0 into runtime completed\n\n\nRunning editor AddApacheSoftwareLicense20 of atomist-rugs:common-editors:0.7.0 completed\n\n\n\n\u2192 Project\n\n\n  ~/develop/atomist-rugs/atomist-test/ (15 kb in 16 files)\n\n\n\n\u2192 Changes\n\n\n  \u251c\u2500\u2500 LICENSE created 11 kb\n\n\n  \u2514\u2500\u2500 .atomist.yml created 287 bytes\n\n\n\nSuccessfully edited project atomist-test\n\n\n$\n git status\n\nOn branch master\n\n\n\nInitial commit\n\n\n\nUntracked files:\n\n\n  (use \"git add <file>...\" to include in what will be committed)\n\n\n\n    .atomist.yml\n\n\n    LICENSE\n\n\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n\n\n\n\n\nThat\u2019s more like it!  What if we decide we do not want the Apache\nSoftware License?  There\u2019s an editor for that!\n\n\n$\n rug edit atomist-rugs:common-editors:RemoveApacheSoftwareLicense20\n\nResolving dependencies for atomist-rugs:common-editors:latest completed\n\n\nLoading atomist-rugs:common-editors:0.7.0 into runtime completed\n\n\nRunning editor RemoveApacheSoftwareLicense20 of atomist-rugs:common-editors:0.7.0 completed\n\n\n\n\u2192 Project\n\n\n  ~/develop/atomist-rugs/atomist-test/ (26 kb in 15 files)\n\n\n\n\u2192 Changes\n\n\n  \u251c\u2500\u2500 LICENSE deleted 15 kb\n\n\n  \u2514\u2500\u2500 .atomist.yml created 577 bytes\n\n\n\nSuccessfully edited project atomist-test\n\n\n$\n git status\n\nOn branch master\n\n\n\nInitial commit\n\n\n\nUntracked files:\n\n\n  (use \"git add <file>...\" to include in what will be committed)\n\n\n\n    .atomist.yml\n\n\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n\n\n\n\n\nWe see the \nLICENSE\n file is gone.  If we inspect the contents of the\n\n.atomist.yml\n file, we see a complete record of what Rug has done.\n\n\n$\n cat .atomist.yml\n\n---\n\n\nkind: \"operation\"\n\n\nclient: \"rug-cli 0.20.0\"\n\n\neditor:\n\n\n  name: \"atomist-rugs.common-editors.AddApacheSoftwareLicense20\"\n\n\n  group: \"atomist-rugs\"\n\n\n  artifact: \"common-editors\"\n\n\n  version: \"0.7.0\"\n\n\n  origin:\n\n\n    repo: \"atomist-rugs/common-editors.git\"\n\n\n    branch: \"master\"\n\n\n    sha: \"622ed10\"\n\n\n\n---\n\n\nkind: \"operation\"\n\n\nclient: \"rug-cli 0.20.0\"\n\n\neditor:\n\n\n  name: \"atomist-rugs.common-editors.RemoveApacheSoftwareLicense20\"\n\n\n  group: \"atomist-rugs\"\n\n\n  artifact: \"common-editors\"\n\n\n  version: \"0.7.0\"\n\n\n  origin:\n\n\n    repo: \"atomist-rugs/common-editors.git\"\n\n\n    branch: \"master\"\n\n\n    sha: \"622ed10\"",
            "title": "Developing Rugs"
        },
        {
            "location": "/user-guide/interfaces/cli/developing-rugs/#installing-the-rug-cli",
            "text": "You can install the Rug command-line interface using standard\npackaging tools for your operating system.\nSee  Rug CLI Installation  for instructions.",
            "title": "Installing the Rug CLI"
        },
        {
            "location": "/user-guide/interfaces/cli/developing-rugs/#additional-dependencies",
            "text": "Rugs are implemented in  TypeScript  and it is recommended you install npm . You should also get an IDE that has good support for that\nlanguage.",
            "title": "Additional Dependencies"
        },
        {
            "location": "/user-guide/interfaces/cli/developing-rugs/#quick-cli-tour",
            "text": "",
            "title": "Quick CLI Tour"
        },
        {
            "location": "/user-guide/interfaces/cli/developing-rugs/#get-some-rugs",
            "text": "To generate and edit code with Rug automation, you should become\nfamiliar with Rug editors, generators, and reviewers.  The best way to\ndo that is to look at some examples.  Some simple examples of Rug\neditors can be found in the  common-editors  repo.  You can\nclone that repo with the following command.  $  git clone https://github.com/atomist-rugs/common-editors.git $   cd  common-editors $  ls -1F CHANGELOG.md  CODE_OF_CONDUCT.md  LICENSE  README.md  src/   You cloned the repo, but where are the Rugs?  Rugs are always located\nin the  .atomist  directory at the top level of the project, i.e., the\nsame directory that has the  .git  directory.  $  ls -1F .atomist/ build/  editors/  manifest.yml  target/  templates/  tests/   Here you can see the standard layout for a Rug directory.  It has a manifest.yml  describing the contents of the project.  Think of this\nas the metadata for your Rugs, i.e., the name, version, dependencies,\netc.  The editors and generators are in the  editors  directory.  Any\ntemplates are in the  templates  directory.  Testing is integral to\nRug, so we also use a  tests  directory to hold all our tests.  There\nis also a  build  directory that contains the repository\u2019s CI scripts\nand configurations.  Let\u2019s see what editors we have available.  $  awk  '$1 == \"editor\" { print $2 }'  .atomist/editors/*.rug AddApacheSoftwareLicense20  AddChangeLog  AddReadme  AddScalaMavenGitIgnore  ClassRenamer  PackageMove  PomParameterizer  RemoveApacheSoftwareLicense20  RemoveChangeLog  RemoveCodeOfConduct   Feel free to look around in the  .atomist  directory to see what is\nthere, investigate the Rug syntax, and see what the tests look like.",
            "title": "Get some Rugs"
        },
        {
            "location": "/user-guide/interfaces/cli/developing-rugs/#test-those-rugs",
            "text": "It is a best practice to provide tests for your Rugs.  The first Rug\ncommand we are going to try will run all of the tests available in the\ncommon-editors repo.  $  rug  test  Processing dependencies    Downloading com/atomist/rug/maven-metadata.xml \u2190 rug-types (0kb) succeeded    Downloading com/atomist/rug-cli-root/1.0.0/rug-cli-root-1.0.0.pom \u2190 rug-types (0kb) succeeded    Downloading com/atomist/rug/maven-metadata.xml \u2190 rug-types (2kb) succeeded    Downloading com/atomist/rug/0.8.0/rug-0.8.0.pom \u2190 rug-types (13kb) succeeded    ... (more downloads)    Downloading com/atomist/rug-cli-root/1.0.0/rug-cli-root-1.0.0.jar \u2190 rug-types (1kb) succeeded    Downloading org/scala-lang/scala-reflect/2.11.8/scala-reflect-2.11.8.jar \u2190 maven-central (4466kb) succeeded  Resolving dependencies for atomist-rugs:common-editors:0.7.0 \u2190 local completed  Loading atomist-rugs:common-editors:0.7.0 \u2190 local into runtime completed  Executing scenario AddApacheSoftwareLicense20 should add a new LICENSE file according to a provided template...    Testing assertion fileExists(SimpleLiteral(LICENSE))    Testing assertion fileContains(SimpleLiteral(LICENSE),SimpleLiteral(Version 2.0, January 2004))  Executing scenario AddChangeLog should add CHANGELOG.md...    Testing assertion fileExists(IdentifierFunctionArg(changelog,None))    Testing assertion fileContains(IdentifierFunctionArg(changelog,None),IdentifierFunctionArg(repo_slug,None))  Executing scenario AddChangeLog should overwrite CHANGELOG.md...    Testing assertion fileExists(IdentifierFunctionArg(changelog,None))    Testing assertion fileContains(IdentifierFunctionArg(changelog,None),IdentifierFunctionArg(repo_slug,None))    Testing assertion ParsedJavaScriptFunction(JavaScriptBlock( !result.fileContains(changelog, \"common-editor\") ))  Executing scenario AddChangeLog should reject invalid repo_slug...  Executing scenario AddChangeLog should reject missing parameter...  Executing scenario AddScalaMavenGitIgnore should add a new .gitignore file according to a provided template...    Testing assertion fileExists(SimpleLiteral(.gitignore))    Testing assertion fileContains(SimpleLiteral(.gitignore),SimpleLiteral(# Created by Atomist))  Executing scenario AddScalaMavenGitIgnore should overwrite an existing .gitignore file according to a provided template...    Testing assertion fileExists(SimpleLiteral(.gitignore))    Testing assertion fileContains(SimpleLiteral(.gitignore),SimpleLiteral(# Created by Atomist))  Executing scenario AddScalaMavenGitIgnore should add a new .gitignore to a subdirectory...    Testing assertion fileExists(SimpleLiteral(other/.gitignore))    Testing assertion fileContains(SimpleLiteral(other/.gitignore),SimpleLiteral(# Created by Atomist))  Executing scenario AddReadme should add README.md...    Testing assertion fileExists(IdentifierFunctionArg(readme,None))    Testing assertion fileContains(IdentifierFunctionArg(readme,None),IdentifierFunctionArg(newName,None))    Testing assertion fileContains(IdentifierFunctionArg(readme,None),IdentifierFunctionArg(newDescription,None))  Executing scenario AddReadme should reject invalid value name parameter...  Executing scenario AddReadme should reject missing parameter...  Executing scenario ClassRenamer should rename simple class...    Testing assertion EqualsExpression(fileCount(),SimpleLiteral(1))    Testing assertion fileContains(SimpleLiteral(src/main/java/Cat.java),SimpleLiteral(class Cat))  Executing scenario ClassRenamer should rename class and leave no references to old name...    Testing assertion fileExists(SimpleLiteral(src/main/java/com/atomist/springrest/WeirdAndWonderful.java))    Testing assertion ParsedJavaScriptFunction(JavaScriptBlock( !result.anyFileContains(\".java\", oldclass) ))  Executing scenario ClassRenamer should rename class but leave any additional characters on the class name...    Testing assertion fileExists(SimpleLiteral(src/main/java/com/atomist/springrest/WeirdAndWonderfulConfiguration.java))    Testing assertion fileExists(SimpleLiteral(src/main/java/com/atomist/springrest/WeirdAndWonderfulApplication.java))    Testing assertion fileExists(SimpleLiteral(src/test/java/com/atomist/springrest/WeirdAndWonderfulApplicationTests.java))    Testing assertion fileExists(SimpleLiteral(src/test/java/com/atomist/springrest/WeirdAndWonderfulOutOfContainerIntegrationTests.java))    Testing assertion fileExists(SimpleLiteral(src/test/java/com/atomist/springrest/WeirdAndWonderfulWebIntegrationTests.java))    Testing assertion ParsedJavaScriptFunction(JavaScriptBlock( !result.anyFileContains(\".java\", \"SpringRest\") ))  Executing scenario PackageMove should move base package and leave no references to old packages...    Testing assertion fileExists(SimpleLiteral(src/main/java/com/foo/bar/SpringRestConfiguration.java))    Testing assertion ParsedJavaScriptFunction(JavaScriptBlock( !result.anyFileContains(\".java\", oldpack) ))  Executing scenario PomParameterizer should establish a new project's valid pom.xml...    Testing assertion fileExists(SimpleLiteral(pom.xml))    Testing assertion fileContains(SimpleLiteral(pom.xml),SimpleLiteral(<artifactId>mynewproject</artifactId>))    Testing assertion fileContains(SimpleLiteral(pom.xml),SimpleLiteral(<groupId>mygroup</groupId>))    Testing assertion fileContains(SimpleLiteral(pom.xml),SimpleLiteral(<version>0.0.1-SNAPSHOT</version>))    Testing assertion fileContains(SimpleLiteral(pom.xml),SimpleLiteral(<description>My project description</description>))  Executing scenario RemoveApacheSoftwareLicense20 should remove Apache license...    Testing assertion ParsedJavaScriptFunction(JavaScriptBlock( !result.fileExists(\"LICENSE\") ))  Executing scenario RemoveApacheSoftwareLicense20 should not remove other license...  Executing scenario RemoveChangeLog should remove CHANGELOG...    Testing assertion ParsedJavaScriptFunction(JavaScriptBlock( !result.fileExists(\"CHANGELOG.md\") ))  Executing scenario RemoveApacheSoftwareLicense20 silently do nothing if no CHANGELOG present...  Executing scenario RemoveCodeOfConduct should remove CODE_OF_CONDUCT...    Testing assertion ParsedJavaScriptFunction(JavaScriptBlock( !result.fileExists(\"CODE_OF_CONDUCT.md\") ))  Executing scenario RemoveCodeOfConduct silently do nothing if no CODE_OF_CONDUCT present...  Running test scenarios in atomist-rugs:common-editors:0.7.0 \u2190 local completed  Successfully executed 22 of 22 scenarios: Test SUCCESS   The above command will download all the dependencies needed to run the\neditors defined in the common-editors repo.  Depending on the speed of\nyour network connection, this may take some time.  Each dependency\nonly need be downloaded once, so subsequent executions of  rug  will\nbe faster.  As you can see from the last line of output, all of the test scenarios\npassed.",
            "title": "Test those Rugs"
        },
        {
            "location": "/user-guide/interfaces/cli/developing-rugs/#make-your-rugs-available",
            "text": "The next step is to create a Rug archive and install it locally so you\ncan use it on local projects.  This is accomplished with the  install \ncommand.  $  rug install Resolving dependencies for atomist-rugs:common-editors:0.7.0 \u2190 local completed  Loading atomist-rugs:common-editors:0.7.0 \u2190 local into runtime completed    Generated META-INF/maven/atomist-rugs/common-editors/pom.xml    Generated .atomist/manifest.yml    Generated .atomist/metadata.json  Generating archive metadata completed    Installed atomist-rugs/common-editors/0.7.0/common-editors-0.7.0.zip \u2192 /Users/dd/.atomist/repository    Installed atomist-rugs/common-editors/0.7.0/common-editors-0.7.0.pom \u2192 /Users/dd/.atomist/repository    Installed atomist-rugs/common-editors/0.7.0/common-editors-0.7.0-metadata.json \u2192 /Users/dd/.atomist/repository  Installing archive into local repository completed  \u2192 Archive    ~/develop/atomist-rugs/common-editors/.atomist/target/common-editors-0.7.0.zip (39kb in 43 files)  \u2192 Contents    \u251c\u2500\u252c .atomist    | \u251c\u2500\u252c build    | | \u251c\u2500\u2500 cli-build.yml    | | \u251c\u2500\u2500 cli-dev.yml    | | \u2514\u2500\u2500 cli-release.yml    | \u251c\u2500\u252c editors    | | \u251c\u2500\u2500 AddApacheSoftwareLicense20.rug    | | \u251c\u2500\u2500 AddChangeLog.rug    | | \u251c\u2500\u2500 AddReadme.rug    | | \u251c\u2500\u2500 AddScalaMavenGitIgnore.rug    | | \u251c\u2500\u2500 ClassRenamer.rug    | | \u251c\u2500\u2500 PackageMove.rug    | | \u251c\u2500\u2500 PomParameterizer.rug    | | \u251c\u2500\u2500 RemoveApacheSoftwareLicense20.rug    | | \u251c\u2500\u2500 RemoveChangeLog.rug    | | \u2514\u2500\u2500 RemoveCodeOfConduct.rug    | \u251c\u2500\u2500 manifest.yml    | \u251c\u2500\u2500 metadata.json    | \u251c\u2500\u252c templates    | | \u251c\u2500\u2500 ApacheSoftwareLicenseV20.vm    | | \u251c\u2500\u2500 CHANGELOG.md.mustache    | | \u251c\u2500\u2500 gitignore.vm    | | \u2514\u2500\u2500 readme.vm    | \u2514\u2500\u252c tests    |   \u251c\u2500\u2500 AddApacheSoftwareLicense20.rt    |   \u251c\u2500\u2500 AddChangeLog.rt    |   \u251c\u2500\u2500 AddGitIgnore.rt    |   \u251c\u2500\u2500 AddReadme.rt    |   \u251c\u2500\u2500 ClassRenamer.rt    |   \u251c\u2500\u2500 PackageMove.rt    |   \u251c\u2500\u2500 PomParameterizer.rt    |   \u251c\u2500\u2500 RemoveApacheSoftwareLicense20.rt    |   \u251c\u2500\u2500 RemoveChangeLog.rt    |   \u2514\u2500\u2500 RemoveCodeOfConduct.rt    \u251c\u2500\u2500 .atomist.yml    \u251c\u2500\u2500 .gitignore    \u251c\u2500\u2500 CHANGELOG.md    \u251c\u2500\u2500 CODE_OF_CONDUCT.md    \u251c\u2500\u2500 LICENSE    \u251c\u2500\u252c META-INF/maven/atomist-rugs/common-editors    | \u2514\u2500\u2500 pom.xml    \u251c\u2500\u2500 README.md    \u251c\u2500\u252c src/main/java/com/atomist/springrest    | \u251c\u2500\u2500 SpringRestApplication.java    | \u2514\u2500\u2500 SpringRestConfiguration.java    \u251c\u2500\u252c src/main/resources    | \u251c\u2500\u2500 application.properties    | \u2514\u2500\u2500 logback.xml    \u2514\u2500\u252c src/test/java/com/atomist/springrest      \u251c\u2500\u2500 SpringRestApplicationTests.java      \u251c\u2500\u2500 SpringRestOutOfContainerIntegrationTests.java      \u2514\u2500\u2500 SpringRestWebIntegrationTests.java  Successfully installed archive for atomist-rugs:common-editors:0.7.0   This command packages up all of the Rugs in the  .atomist  directory\nand installs them in your local repository, typically ~/.atomist/repository .",
            "title": "Make your Rugs Available"
        },
        {
            "location": "/user-guide/interfaces/cli/developing-rugs/#list-the-installed-editors",
            "text": "Remember above when we ran that arcane  awk  command to list the\neditors?  There is a better way!  Now that we some editors installed\nlocally, we can list our local editors.  $  rug list Resolving dependencies for com.atomist:rug:0.8.0 completed  Listing local archives completed  \u2192 Local Archives    atomist-rugs:common-editors (0.7.0)  For more information on specific archive version, run:    rug describe archive ARCHIVE -a VERSION   Looks like the Rug Archive we installed is indeed installed.  That\nlast line of the output tells us how we can get more information.\nLet\u2019s try that command.  Since we only have one version available, we\ncan omit the  -a  command-line option.  When it is not provided, the\nlatest version is used.  $  rug describe archive atomist-rugs:common-editors Processing dependencies    Downloading atomist-rugs/common-editors/maven-metadata.xml \u2190 rugs (0kb) succeeded  Resolving dependencies for atomist-rugs:common-editors:latest completed  Loading atomist-rugs:common-editors:0.7.0 into runtime completed  atomist-rugs:common-editors:0.7.0  \u2192 Origin    atomist-rugs/common-editors.git#master (622ed10)  \u2192 Archive    ~/.atomist/repository/atomist-rugs/common-editors/0.7.0/common-editors-0.7.0.zip (39kb in 43 files)  \u2192 Editors    AddApacheSoftwareLicense20 (add the Apache Software License version 2.0 file)    AddChangeLog (adds a new CHANGELOG)    AddReadme (adds a project specific README)    AddScalaMavenGitIgnore (adds a .gitignore suitable for Scala Maven projects)    ClassRenamer (renames a Java class, replacing one literal pattern with another)    PackageMove (renames a Java package)    PomParameterizer (updates a Maven pom to a new group, artifact, version and description)    RemoveApacheSoftwareLicense20 (removes an Apache Software License version 2.0 file if present)    RemoveChangeLog (removes CHANGELOG file if present)    RemoveCodeOfConduct (removes CODE_OF_CONDUCT file if present)  \u2192 Requires    [0.8.0,1.0.0)  To get more information on any of the Rugs listed above, run:    rug describe editor|generator|executor|reviewer ARTIFACT   That list of editors looks familiar, we must be doing something right!\nAgain, the last line of the output tells us how we can get more\ninformation.  Let\u2019s try it.  $  rug describe editor AddApacheSoftwareLicense20 No valid ARTIFACT provided, no default artifact defined and not in local mode.  Run the following command for usage help:    rug describe --help.   Hmm, looks like something went wrong.  Fortunately the error tells us\nwe either need to define a default artifact or run in local mode.  How\ndo we run in local mode?  The above output tells us to run  rug\ndescribe --help  for usage help.  Let\u2019s do it.  $  rug describe --help Usage: rug describe [OPTION]... TYPE ARTIFACT  Print details about an archive or Rug.  Options:    -?,-h,--help          Print help information    -X,--error            Print verbose error messages    -o,--offline          Use only downloaded archives    -q,--quiet            Do not display progress messages    -r,--resolver-report  Print dependency tree    -s,--settings FILE    Use settings file FILE    -t,--timer            Print timing information    -u,--update           Update dependency resolution  Command Options:    -a,--archive-version AV  Use archive version AV    -l,--local               Use local working directory as archive  TYPE should be 'editor', 'generator', 'executor', 'reviewer' or  'archive' and ARTIFACT should be the full name of an artifact, e.g.,  \"atomist:spring-service:Spring Microservice\".  If the name of the  artifact has spaces in it, you need to put quotes around it.  Please report issues at https://github.com/atomist/rug-cli   The help output provides two pieces of information useful to us.\nFirst, it says the  ARTIFACT  should be the full name of the artifact.\nWe only provided the editor name.  Perhaps we needed to prepend the\narchive name.  Second, the  -l  or  --local  command-line option tells\nthe CLI to use the current directory as an archive.  In other words,\nit tries to find an  .atomist  directory and use the Rugs in it.\nSince we are in a directory that has the  .atomist  directory with the\neditor we want to run, that seems promising.  $  rug describe -l editor AddApacheSoftwareLicense20 Resolving dependencies for atomist-rugs:common-editors:0.7.0 \u2190 local completed  Loading atomist-rugs:common-editors:0.7.0 \u2190 local into runtime completed  AddApacheSoftwareLicense20  atomist-rugs:common-editors:0.7.0  add the Apache Software License version 2.0 file  \u2192 Tags    apache (apache)    license (license)    documentation (documentation)  \u2192 Parameters    no parameters needed  To invoke the AddApacheSoftwareLicense20 editor, run:    rug edit \"atomist-rugs:common-editors:AddApacheSoftwareLicense20\" -a 0.7.0 -l   Success!  The output from that command also tells us what the full\nname of the editor is, atomist-rugs:common-editors:AddApacheSoftwareLicense20 .  We could\nhave guessed that.  Since we previously installed the editor, we could\nhave run the following command and gotten the same result.  $  rug describe editor atomist-rugs:common-editors:AddApacheSoftwareLicense20  The  describe editor  output includes several pieces of useful\ninformation.  The description, \u201cadds the Apache Software License\nversion 2.0 file\u201d, provides a slightly more verbose description than\nthe already descriptive editor name.  We can see that this editor has\nthree tags,  license ,  apache , and  documentation , and it takes no\nparameters.  Adding the Apache license seems like a good thing to do.  The last\nline of the output once again gives us the information we need: how to\nrun this editor.  Let\u2019s try it.",
            "title": "List the installed Editors"
        },
        {
            "location": "/user-guide/interfaces/cli/developing-rugs/#run-an-editor",
            "text": "We will just run the command we were provided above.  We remove the -l  since, having installed the archive, we do not need to run it\nfrom the local directory, we can run it from the installed archive.  $  rug edit atomist-rugs:common-editors:AddApacheSoftwareLicense20 -a  0 .7.0 Resolving dependencies for atomist-rugs:common-editors:latest completed  Loading atomist-rugs:common-editors:0.7.0 into runtime completed  Running editor AddApacheSoftwareLicense20 of atomist-rugs:common-editors:0.7.0 completed  \u2192 Project    ~/develop/atomist-rugs/common-editors/ (282kb in 302 files)  \u2192 Changes    \u251c\u2500\u2500 LICENSE created 11kb    \u2514\u2500\u2500 .atomist.yml created 3kb  Successfully edited project common-editors   Looks like two files were edited in the local repository.  $  git status On branch master  Your branch is up-to-date with 'origin/master'.  Changes not staged for commit:    (use \"git add <file>...\" to update what will be committed)    (use \"git checkout -- <file>...\" to discard changes in working directory)      modified:   .atomist.yml  no changes added to commit (use \"git add\" and/or \"git commit -a\")   Hmm, git shows only one file has been modified.  Why?  Well, the\ncontents of the  LICENSE  file were set to be the Apache Software\nLicense, but that is what the contents already were.  Git is smart.\nWhat is that  atomist.yml  file?  $  cat .atomist.yml ---  kind: \"operation\"  client: \"rug-cli 0.20.0\"  editor:    name: \"atomist-rugs.common-editors.AddApacheSoftwareLicense20\"    group: \"atomist-rugs\"    artifact: \"common-editors\"    version: \"0.7.0\"    origin:      repo: \"atomist-rugs/common-editors.git\"      branch: \"master\"      sha: \"622ed10\"   Looks like it is a record of what we have done, nice!  I suppose we should have guessed the editor would act on the local\ndirectory, but we don\u2019t really want to edit the current project.\nLet\u2019s create another project to edit.  We run the same command as\nabove, except we\u2019ll remove the archive version command-line option.\nIf you do not provide the  -a  option, the CLI will use the latest\ninstalled version, 0.7.0 in our case.  $   cd  .. $  mkdir atomist-test $   cd  !$ $  git init $  rug edit atomist-rugs:common-editors:AddApacheSoftwareLicense20 $  rug edit atomist-rugs:common-editors:AddApacheSoftwareLicense20 Resolving dependencies for atomist-rugs:common-editors:latest completed  Loading atomist-rugs:common-editors:0.7.0 into runtime completed  Running editor AddApacheSoftwareLicense20 of atomist-rugs:common-editors:0.7.0 completed  \u2192 Project    ~/develop/atomist-rugs/atomist-test/ (15 kb in 16 files)  \u2192 Changes    \u251c\u2500\u2500 LICENSE created 11 kb    \u2514\u2500\u2500 .atomist.yml created 287 bytes  Successfully edited project atomist-test  $  git status On branch master  Initial commit  Untracked files:    (use \"git add <file>...\" to include in what will be committed)      .atomist.yml      LICENSE  nothing added to commit but untracked files present (use \"git add\" to track)   That\u2019s more like it!  What if we decide we do not want the Apache\nSoftware License?  There\u2019s an editor for that!  $  rug edit atomist-rugs:common-editors:RemoveApacheSoftwareLicense20 Resolving dependencies for atomist-rugs:common-editors:latest completed  Loading atomist-rugs:common-editors:0.7.0 into runtime completed  Running editor RemoveApacheSoftwareLicense20 of atomist-rugs:common-editors:0.7.0 completed  \u2192 Project    ~/develop/atomist-rugs/atomist-test/ (26 kb in 15 files)  \u2192 Changes    \u251c\u2500\u2500 LICENSE deleted 15 kb    \u2514\u2500\u2500 .atomist.yml created 577 bytes  Successfully edited project atomist-test  $  git status On branch master  Initial commit  Untracked files:    (use \"git add <file>...\" to include in what will be committed)      .atomist.yml  nothing added to commit but untracked files present (use \"git add\" to track)   We see the  LICENSE  file is gone.  If we inspect the contents of the .atomist.yml  file, we see a complete record of what Rug has done.  $  cat .atomist.yml ---  kind: \"operation\"  client: \"rug-cli 0.20.0\"  editor:    name: \"atomist-rugs.common-editors.AddApacheSoftwareLicense20\"    group: \"atomist-rugs\"    artifact: \"common-editors\"    version: \"0.7.0\"    origin:      repo: \"atomist-rugs/common-editors.git\"      branch: \"master\"      sha: \"622ed10\"  ---  kind: \"operation\"  client: \"rug-cli 0.20.0\"  editor:    name: \"atomist-rugs.common-editors.RemoveApacheSoftwareLicense20\"    group: \"atomist-rugs\"    artifact: \"common-editors\"    version: \"0.7.0\"    origin:      repo: \"atomist-rugs/common-editors.git\"      branch: \"master\"      sha: \"622ed10\"",
            "title": "Run an Editor"
        },
        {
            "location": "/reference/",
            "text": "The Atomist Reference Documentation contains detailed information on\nvarious aspects of the Atomist development system.  This is the home\nof auto-generated Atomist documentation.\n\n\n\n\nRug Reference Documentation\n\n\nRug CLI Reference Documentation",
            "title": "Overview"
        },
        {
            "location": "/reference/rug/",
            "text": "The Rug Reference Documentation provides detailed information on Rug,\nthe various types of Rugs, Rug extensions, and the deprecated Rug\nDomain Specific Language (DSL).\n\n\n\n\nRugs\n\n\nExtensions\n\n\nDSL",
            "title": "Overview"
        },
        {
            "location": "/reference/rug/rugs/",
            "text": "Each different kind of Rug provides a different way for you to\ninteract with events and code.\n\n\n\n\n\n\n\n\n\n\nEditors\n: Add, remove, and edit files\n\n\nGenerators\n: Create new repositories\n\n\n\n\n\nWhen writing Rugs, several other concepts and features of Rug will be\nuseful.\n\n\n\n\nPath Expressions\n: Select specific elements of projects, files, and code",
            "title": "Overview"
        },
        {
            "location": "/reference/rug/editors/",
            "text": "Below is information on writing Rug editors using the Rug DSL, which\nis now deprecated.\n\n\nRug DSL Editors (Deprecated)\n\u00b6\n\n\nRug editors \nwork at the level of a specific project\n, for example\nthis is typically a particular \nrepository on GitHub\n.\n\n\nRug editors can be found in the \n/.atomist/editors\n directory of\na Rug project.\n\n\nEditors also have access to template content in the same project,\npackaged under \n/.atomist/templates\n.\n\n\n\n\nNOTE: All Atomist files should be under the \n.atomist\n directory in the root of a project.\n\n\n\n\nRug editor files must have a \n.rug\n extension.  A \n.rug\n file can\ncontain one or more editors and reviewers.  A \n.rug\n file must always contain\nan editor with the same name as the source file (excluding the \n.rug\n\nextension), and may contain additional editors that are visible only within\nthe scope of the source file.\n\n\nFor reference, this convention is analogous to Java public class\npackaging.\n\n\nAny number of Rug editors can be bundled together in a Rug project. A\ngood example of this is the open\nsource \nSpring Boot Editors\n Rug project.\n\n\nParameters and Templates\n\u00b6\n\n\nRug editors are built on the same underpinnings as your usual non-Rug\neditors. They share familiar concepts:\n\n\n\n\nParameters\n: Editors and reviewers can specify any number of\n    mandatory or optional parameters with an accompanying validation\n    pattern.\n\n\nTemplates\n: Editors can be packaged in archives including\n    templates that are written\n    in \nVelocity\n\n    or \nMustache\n.\n\n\n\n\nA Quick Tour of Rug Editor Syntax\n\u00b6\n\n\nThe Rug editor syntax can be summarised as a collection of\n\nSelectors\n and then \nActions\n on what is selected.\n\n\nWhite space is not significant. However we encourage sensible\nindentation.\n\n\nBefore we go into a more systematic presentation of Rug syntax, let\u2019s\nstart by building up a simple program: a project editor that appends\nto a file:\n\n\neditor\n \nAppendToSpecificFile\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"myfile.txt\"\n\n\n  \ndo\n \nappend\n \n\"\\nAnd this is a new line\"\n\n\n\n\n\n\nThe \nwith\n statement simply says \nfor each file in the project if name\nis \u201cmyfile.txt\u201d append the given string to the end of the file.\n . The\n\nwith\n statement declared what we \nselect\n and what type it is\nexpected to be. The Rug language extension in the example above is\nthe \nCore Rug Language Extension\n\nof \nFile\n and this dictates what\nfunctions are exposed what has been selected.\n\n\nLet\u2019s make this a little more sophisticated. Perhaps we\u2019d like to\ndecide what content we should append. This would be a natural\nparameter:\n\n\neditor\n \nAppendToFile\n\n\n\nparam\n \nto_append\n:\n \n^.*$\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"myfile.txt\"\n\n\n  \ndo\n \nappend\n \nto_append\n\n\n\n\n\n\nNow we will append the value of the parameter to the end of the\nfile. Unlike our first, naive, editor, this editor can be used to\nmodify files in ways determined by the caller.\n\n\n\n\nNote:\n The parameter definition specifies a regular expression\nthat will be used to validate it before it\u2019s passed to the\neditor. So the editor\u2019s implementation can assume that it\u2019s valid\nupon execution.\n\n\n\n\nIt would be good to describe this editor so that users see information\nbeyond its name. We can do this with the \ndescription\n annotation. We\ncan also describe the parameter:\n\n\n@description\n \n\"\"\"Appends value of to_append parameter to\n\n\n     the end of files called myfile.txt\"\"\"\n\n\neditor\n \nAppendToFile\n\n\n\n@description\n \n\"Text to append to the file\"\n\n\nparam\n \nto_append\n:\n \n^.*$\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"myfile.txt\"\n\n\n  \ndo\n \nappend\n \nto_append\n\n\n\n\n\n\nNote the use of a triple-quoted string here. As in Scala,\ntriple-quoted strings may span lines and include double quotes without\nescaping.\n\n\nWe can add multiple \nwith\n blocks. So we could process another type of\nfile as follows:\n\n\neditor\n \nAppendToFile\n\n\n\nparam\n \nto_append\n:\n \n^.*$\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"myfile.txt\"\n\n\n  \ndo\n \nappend\n \nto_append\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"MyClass.java\"\n\n\n  \ndo\n \nprepend\n \n\"// Ha ha! This is a sneaky comment.\\n\"\n\n\n\n\n\n\nSometimes we need to compute additional values. We do this with the\n\nlet\n keyword as shown to populate the \nx\n value below:\n\n\neditor\n \nAppendToFile\n\n\n\nparam\n \nto_append\n:\n \n^.*$\n\n\n\nlet\n \nx\n \n=\n \n\"This is a value\"\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"myfile.txt\"\n\n\n  \nbegin\n\n\n    \ndo\n \nprepend\n \nx\n\n\n    \ndo\n \nappend\n \nto_append\n\n\n  \nend\n\n\n\n\n\n\nSuch computed values will be exposed to templates as well as the\nremainder of the Rug program itself.\n\n\nWe can also perform multiple \ndo\n steps as follows, enclosing them in\na \nbegin/end\n block:\n\n\neditor\n \nAppendToFile\n\n\n\nparam\n \nto_append\n:\n \n^.*$\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \ncontains\n \n\".txt\"\n\n\n  \nbegin\n\n\n    \ndo\n \nappend\n \nto_append\n\n\n    \ndo\n \nappend\n \n\"And now for something completely different\"\n\n\n  \nend\n\n\n\n\n\n\nWe can escape to JavaScript to compute the value of any expression, or\nperform a do manipulation. A JavaScript expression is enclosed in\ncurly braces. The following example builds the string to be appended\nusing JavaScript:\n\n\neditor\n \nAppendToFile\n\n\n\nparam\n \nto_append\n:\n \n^.*$\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"myfile.txt\"\n\n\n  \ndo\n \nappend\n { to_append + \" plus this from JavaScript\" }\n\n\n\n\n\n\nWe can also use JavaScript expressions in predicates, like this:\n\n\neditor\n \nAppendToFile\n\n\n\nwith\n \nFile\n\n\n  \nwhen\n \nname\n \ncontains\n \n\".txt\"\n \nand\n { 13 < 27 }\n\n\n    \ndo\n \nappend\n \n\"42\"\n\n\n\n\n\n\nEditor Composition\n\u00b6\n\n\nEditors can be composed. For example, executing the \nFoo\n editor in\nthe following Rug script will result in \nsome\n being replaced by \nfoo\n\nand then by \nbar\n, as the \nFoo\n editor invokes the \nBar\n editor.\n\n\neditor\n \nFoo\n\n\n\nwith\n \nFile\n \nf\n\n\n  \ndo\n \nreplaceAll\n \n\"some\" \"foo\"\n\n\nBar\n\n\n\n# ------\n\n\neditor\n \nBar\n\n\n\nwith\n \nFile\n \nf\n\n\n  \ndo\n \nreplaceAll\n \n\"foo\" \"bar\"\n\n\n\n\n\n\nIn this case, \nFoo\n and \nBar\n are in the same file, but they could be\nin separate files within the same project where we would use the \nuse\n\nstatement to bring in the editor in a different file. We can also\nrefer to editors outside the current project by introducing a\ndependency on the Rug project that those editors that we want to\nimport are located in to the \n.atomist/manifest.yml\n file.\n\n\nWhen composing by calling an editor that accepts parameters, the\nparameters are provided as a comma-separate list of\n\nparam_name=param_value\n tokens.\n\n\neditor\n \nCallerEditor\n\n\n\nCalledEditor\n \nfirst\n=\n\"some\"\n, \nsecond\n=\n\"thing\"\n\n\n\neditor\n \nCalledEditor\n\n\n\nparam\n \nfirst\n:\n \n^.*$\n\n\nparam\n \nsecond\n:\n \n^.*$\n\n\n\nwith\n \nFile\n \nf\n\n\n  \nbegin\n\n\n    \ndo\n \nappend\n \nfirst\n\n\n    \ndo\n \nappend\n \nsecond\n\n\n  \nend",
            "title": "Editors"
        },
        {
            "location": "/reference/rug/editors/#rug-dsl-editors-deprecated",
            "text": "Rug editors  work at the level of a specific project , for example\nthis is typically a particular  repository on GitHub .  Rug editors can be found in the  /.atomist/editors  directory of\na Rug project.  Editors also have access to template content in the same project,\npackaged under  /.atomist/templates .   NOTE: All Atomist files should be under the  .atomist  directory in the root of a project.   Rug editor files must have a  .rug  extension.  A  .rug  file can\ncontain one or more editors and reviewers.  A  .rug  file must always contain\nan editor with the same name as the source file (excluding the  .rug \nextension), and may contain additional editors that are visible only within\nthe scope of the source file.  For reference, this convention is analogous to Java public class\npackaging.  Any number of Rug editors can be bundled together in a Rug project. A\ngood example of this is the open\nsource  Spring Boot Editors  Rug project.",
            "title": "Rug DSL Editors (Deprecated)"
        },
        {
            "location": "/reference/rug/editors/#parameters-and-templates",
            "text": "Rug editors are built on the same underpinnings as your usual non-Rug\neditors. They share familiar concepts:   Parameters : Editors and reviewers can specify any number of\n    mandatory or optional parameters with an accompanying validation\n    pattern.  Templates : Editors can be packaged in archives including\n    templates that are written\n    in  Velocity \n    or  Mustache .",
            "title": "Parameters and Templates"
        },
        {
            "location": "/reference/rug/editors/#a-quick-tour-of-rug-editor-syntax",
            "text": "The Rug editor syntax can be summarised as a collection of Selectors  and then  Actions  on what is selected.  White space is not significant. However we encourage sensible\nindentation.  Before we go into a more systematic presentation of Rug syntax, let\u2019s\nstart by building up a simple program: a project editor that appends\nto a file:  editor   AppendToSpecificFile  with   File   f   when   name   =   \"myfile.txt\"     do   append   \"\\nAnd this is a new line\"   The  with  statement simply says  for each file in the project if name\nis \u201cmyfile.txt\u201d append the given string to the end of the file.  . The with  statement declared what we  select  and what type it is\nexpected to be. The Rug language extension in the example above is\nthe  Core Rug Language Extension \nof  File  and this dictates what\nfunctions are exposed what has been selected.  Let\u2019s make this a little more sophisticated. Perhaps we\u2019d like to\ndecide what content we should append. This would be a natural\nparameter:  editor   AppendToFile  param   to_append :   ^.*$  with   File   f   when   name   =   \"myfile.txt\"     do   append   to_append   Now we will append the value of the parameter to the end of the\nfile. Unlike our first, naive, editor, this editor can be used to\nmodify files in ways determined by the caller.   Note:  The parameter definition specifies a regular expression\nthat will be used to validate it before it\u2019s passed to the\neditor. So the editor\u2019s implementation can assume that it\u2019s valid\nupon execution.   It would be good to describe this editor so that users see information\nbeyond its name. We can do this with the  description  annotation. We\ncan also describe the parameter:  @description   \"\"\"Appends value of to_append parameter to       the end of files called myfile.txt\"\"\"  editor   AppendToFile  @description   \"Text to append to the file\"  param   to_append :   ^.*$  with   File   f   when   name   =   \"myfile.txt\"     do   append   to_append   Note the use of a triple-quoted string here. As in Scala,\ntriple-quoted strings may span lines and include double quotes without\nescaping.  We can add multiple  with  blocks. So we could process another type of\nfile as follows:  editor   AppendToFile  param   to_append :   ^.*$  with   File   f   when   name   =   \"myfile.txt\"     do   append   to_append  with   File   f   when   name   =   \"MyClass.java\"     do   prepend   \"// Ha ha! This is a sneaky comment.\\n\"   Sometimes we need to compute additional values. We do this with the let  keyword as shown to populate the  x  value below:  editor   AppendToFile  param   to_append :   ^.*$  let   x   =   \"This is a value\"  with   File   f   when   name   =   \"myfile.txt\"     begin       do   prepend   x       do   append   to_append     end   Such computed values will be exposed to templates as well as the\nremainder of the Rug program itself.  We can also perform multiple  do  steps as follows, enclosing them in\na  begin/end  block:  editor   AppendToFile  param   to_append :   ^.*$  with   File   f   when   name   contains   \".txt\"     begin       do   append   to_append       do   append   \"And now for something completely different\"     end   We can escape to JavaScript to compute the value of any expression, or\nperform a do manipulation. A JavaScript expression is enclosed in\ncurly braces. The following example builds the string to be appended\nusing JavaScript:  editor   AppendToFile  param   to_append :   ^.*$  with   File   f   when   name   =   \"myfile.txt\"     do   append  { to_append + \" plus this from JavaScript\" }   We can also use JavaScript expressions in predicates, like this:  editor   AppendToFile  with   File     when   name   contains   \".txt\"   and  { 13 < 27 }       do   append   \"42\"",
            "title": "A Quick Tour of Rug Editor Syntax"
        },
        {
            "location": "/reference/rug/editors/#editor-composition",
            "text": "Editors can be composed. For example, executing the  Foo  editor in\nthe following Rug script will result in  some  being replaced by  foo \nand then by  bar , as the  Foo  editor invokes the  Bar  editor.  editor   Foo  with   File   f     do   replaceAll   \"some\" \"foo\"  Bar  # ------  editor   Bar  with   File   f     do   replaceAll   \"foo\" \"bar\"   In this case,  Foo  and  Bar  are in the same file, but they could be\nin separate files within the same project where we would use the  use \nstatement to bring in the editor in a different file. We can also\nrefer to editors outside the current project by introducing a\ndependency on the Rug project that those editors that we want to\nimport are located in to the  .atomist/manifest.yml  file.  When composing by calling an editor that accepts parameters, the\nparameters are provided as a comma-separate list of param_name=param_value  tokens.  editor   CallerEditor  CalledEditor   first = \"some\" ,  second = \"thing\"  editor   CalledEditor  param   first :   ^.*$  param   second :   ^.*$  with   File   f     begin       do   append   first       do   append   second     end",
            "title": "Editor Composition"
        },
        {
            "location": "/reference/rug/generators/",
            "text": "Below is information on writing Rug generators using the Rug DSL,\nwhich is now deprecated.\n\n\nRug DSL Generators (Deprecated)\n\u00b6\n\n\nRug generators are used to create new projects from an existing model\nproject.  Generators are created using the \ngenerator\n keyword.\n\n\nWhen a generator creates a new project, it starts by copying all the\nfiles in the project in which it resides, excluding the \n.atomist\n\ndirectory, to the new project being created.\n\n\nTypically Rug generators do not contain logic of their own, but invoke\na number of other editors in order to manipulate the files copied from\nthe generator project.\n\n\nFor example, here is a complete \nSpring Rest Service\n\ngenerator:\n\n\n@tag\n \n\"java\"\n\n\n@tag\n \n\"spring\"\n\n\n@tag\n \n\"spring-boot\"\n\n\n@description\n \n\"Creates a new Spring Rest project\"\n\n\ngenerator\n \nNewSpringProject\n\n\n\n# Pattern to replace in old class name.\n\n\nold_class\n \n=\n \n\"SpringRest\"\n\n\n\n# Root package of the old file\n\n\nold_package\n \n=\n \n\"com.atomist.springrest\"\n\n\n\n# Now we invoke generic editors that do the actual work\n\n\nUpdateReadme\n\n\nPomParameterizer\n\n\nPackageMove\n\n\nClassRenamer\n\n\n\n\n\n\nThis generator uses four editors. The parameters from these editors\npropagate to the calling context\u2013typically an interaction with a\nuser\u2013except for \nold_class\n and \nold_package\n which are explicitly\nset.\n\n\nThis modular approach enables multiple project generators to share\ncommon functionality.",
            "title": "Generators"
        },
        {
            "location": "/reference/rug/generators/#rug-dsl-generators-deprecated",
            "text": "Rug generators are used to create new projects from an existing model\nproject.  Generators are created using the  generator  keyword.  When a generator creates a new project, it starts by copying all the\nfiles in the project in which it resides, excluding the  .atomist \ndirectory, to the new project being created.  Typically Rug generators do not contain logic of their own, but invoke\na number of other editors in order to manipulate the files copied from\nthe generator project.  For example, here is a complete  Spring Rest Service \ngenerator:  @tag   \"java\"  @tag   \"spring\"  @tag   \"spring-boot\"  @description   \"Creates a new Spring Rest project\"  generator   NewSpringProject  # Pattern to replace in old class name.  old_class   =   \"SpringRest\"  # Root package of the old file  old_package   =   \"com.atomist.springrest\"  # Now we invoke generic editors that do the actual work  UpdateReadme  PomParameterizer  PackageMove  ClassRenamer   This generator uses four editors. The parameters from these editors\npropagate to the calling context\u2013typically an interaction with a\nuser\u2013except for  old_class  and  old_package  which are explicitly\nset.  This modular approach enables multiple project generators to share\ncommon functionality.",
            "title": "Rug DSL Generators (Deprecated)"
        },
        {
            "location": "/reference/rug/path-expressions/",
            "text": "Rug Path Expression Version 0.1\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nRug Path Expressions are used to obtain tree nodes from structured\ndata, including:\n\n\n\n\nProjects\n\n\nFiles (going into AST or other internal structure if understood)\n\n\nStructured parameters, such as JSON or other file formats\n\n\nThe Atomist service model representing project data such as\n    builds, commits and chat teams\n\n\nExisting trees\n\n\n\n\nAll data sources are viewed as trees, and results are always tree\nnodes.  All tree nodes have a \nnode type\n, \nname\n, and \nobject type\n.\nUnlike XML elements, tree nodes also may have methods.  Rug tree\nexpressions add a rich set of \nobject types\n from the underlying typed\nmodel they traverse.  Types that are globally searchable\nuse \nUpperCamelCase\n.  Private types, i.e., those only accessible\nunder a global type, use \nlowerCamelCase\n.\n\n\nThe syntax is inspired by sources including \nXPath 1.0\n (the\nprimary influence) and \nJSONPath\n (which shows how the same\ncore ideas can be applied to non XML data structures).\n\n\nA path expression navigates a series of nodes and relationships in a\ngraph.  Each path element in a path element acts on results returned\nby the previous path element.  Think of it as a \u201c\nflatMap\n\u201d\noperation on a collection in a functional language: it returns a new\ncollection.\n\n\nBeause of the close relationship to XPath, the remainder of this\ndocument mirrors the organization of\nthe \nXPath Version 1.0 specification\n.\nAn \nANTLR grammar\n for XPath 1.0 is available.\n\n\nLocation Paths\n\u00b6\n\n\nRug Path Expressions are location paths consisting of one or more\nsequential \nLocation Steps\n.  A location path is one or\nmore \nlocation steps\n separated by forward slashes,\n(\n/\n).\n\n\nAll location paths should be absolute, i.e., begin with a forward\nslash (\n/\n).  The actual root context for location paths\ndiffers depending on where the path location is being used:\n\n\n\n\n\n\n\n\nRug\n\n\nRoot Context\n\n\nContext Object Type\n\n\n\n\n\n\n\n\n\n\nEditor/Reviewer\n\n\nProject\n\n\nFile\n\n\n\n\n\n\nExecutor\n\n\nService\n\n\nService\n\n\n\n\n\n\nHandler\n\n\nobject passed to Handler\n\n\nobject passed to handler type\n\n\n\n\n\n\n\n\nThis is analogous to the root context of an XPath location path being\nthe root of the document it is acting on.\n\n\nThe context object type is the implicit object type that the initial\nlocation step has.  For example, in an Editor the root context is a\nProject and the context object type of the path step under the root\ncontext is File, allowing one to traverse the project\u2019s file system\nhierarchy from the project root using directory and file names as in\n\n/src/main/java\n or \n/LICENSE\n.\n\n\nLocation Steps\n\u00b6\n\n\nA location step has three parts:\n\n\n\n\nan \naxis\n, which specifies the tree relationship between the nodes\n    selected by the location step and the context node,\n\n\na \nnode test\n, which specifies the node object type and name of\n    the nodes selected by the location step, and\n\n\nzero or more \npredicates\n, which use arbitrary expressions to\n    further refine the set of nodes selected by the location step.\n\n\n\n\nThe syntax for a location step is the axis name and node test\nseparated by a double colon, followed by zero or more expressions each\nin square brackets. For example, in \nchild::comment[position()=1]\n,\n\nchild\n is the name of the axis, \ncomment\n is the node test and\n\n[position()=1]\n is a predicate.\n\n\nThe node-set selected by the location step is the node-set that\nresults from generating an initial node-set from the axis and\nnode-test, and then filtering that node-set by each of the predicates\nin turn.\n\n\nThe initial node-set consists of the nodes having the relationship to\nthe context node specified by the axis, and having the node object\ntype and name specified by the node test.  For example, a location\nstep \nraisedBy::GitHubUserID()\n selects the GitHub user ID that has a\nraisedBy relationship with the context node: \nraisedBy\n, the axis,\nspecifies the relationship with the context node; \nGitHubUserID()\n\nspecifies that each node in the initial node-set must be an object of\ntype \nGitHubUserID\n.  The available axes are described\nin \nAxes\n. The available node tests are described\nin \nNode Tests\n. The meaning of some node tests is\ndependent on the axis.\n\n\nThe initial node-set is filtered by the first predicate to generate a\nnew node-set; this new node-set is then filtered using the second\npredicate, and so on. The final node-set is the node-set selected by\nthe location step. The axis affects how the expression in each\npredicate is evaluated and so the semantics of a predicate is defined\nwith respect to an axis. See \nPredicates\n.\n\n\nAxes\n\u00b6\n\n\nAxes define the relationship between a location step and the previous\nlocation step, i.e., its node context.  Axes available in all contexts\nare:\n\n\n\n\n\n\nthe \nchild\n axis contains the children of the context node,\n    which are all nodes with a direct relationship in the graph\n    to the context node\n\n\n\n\n\n\nthe \nproperty\n axis contains the properties of the context node;\n    the axis will be empty unless the context node is an object\n\n\n\n\n\n\nthe \nself\n axis contains just the context node itself\n\n\n\n\n\n\nthe \ndescendant\n axis contains the descendants of the context\n    node; a descendant is a child or a child of a child and so on;\n    thus the descendant axis never contains property or namespace\n    nodes\n\n\n\n\n\n\nCertain object types have relationships with other object types.  Some\nexamples are shown in the table below.  When the previous step\ncontains the type in the left column, the axis in the middle column\ncan be used prior to a node test for the type in the right column.\nThis is not an exhaustive list of relationships in the model graph.\n\n\n\n\n\n\n\n\nContext Object Type\n\n\nAxis\n\n\nNode-set Object Type\n\n\n\n\n\n\n\n\n\n\nBuild\n\n\non\n\n\nRepo\n\n\n\n\n\n\nCommit\n\n\non\n\n\nRepo\n\n\n\n\n\n\nIssue\n\n\nbelongsTo\n\n\nRepo\n\n\n\n\n\n\nPush\n\n\nhasBuild\n\n\nBuild\n\n\n\n\n\n\nPush\n\n\ncontains\n\n\nCommit\n\n\n\n\n\n\nPush\n\n\nafter\n\n\nCommit\n\n\n\n\n\n\nChatId\n\n\nmemberOf\n\n\nChatChannel\n\n\n\n\n\n\nIssue\n\n\nresolvedBy\n\n\nCommit\n\n\n\n\n\n\nCommit\n\n\nauthor\n\n\nGitHubId\n\n\n\n\n\n\nPerson\n\n\nhasChatIdentiy\n\n\nSlackId\n\n\n\n\n\n\nPerson\n\n\nhasGithubIdentiy\n\n\nGitHubId\n\n\n\n\n\n\nSlackTeam\n\n\nhasChannel\n\n\nChannel\n\n\n\n\n\n\nRepo\n\n\nchannel\n\n\nChannel\n\n\n\n\n\n\nSlackId\n\n\nmemberOf\n\n\nSlackTeam\n\n\n\n\n\n\n\n\nNode Tests\n\u00b6\n\n\nEvery axis has a principal node type, which is different than the\nnode\u2019s object type.  The node type is directly analogous to XPath node\ntypes.  If an axis can contain objects, then the principal node type\nis object; otherwise, it is the type of the nodes that the axis can\ncontain.  Thus,\n\n\n\n\nFor the property axis, the principal node type is property.\n\n\nFor other axes, the principal node type is object.\n\n\n\n\nA node test that is a \nstuff\n, called a node name test, will select\nall object nodes with the name \u201cstuff\u201d of the principal node type.\nFor example, \nchild::src\n will select the object node named \u201csrc\u201d that\nis a child of the context node.  Node name tests can only contain\nalphanumeric, underscore (\n_\n), dash (\n-\n), period (\n.\n), asterisk\n(\n*\n), and question mark (\n?\n) characters.  The asterisk and question\nmark have the same special meaning they have in shell globbing\npatterns, asterisk matches zero of more characters and question mark\nmatches any single character.  To select nodes with names having other\ncharacters, use the \n@name\n attribute in a predicate, e.g.,\n\n/*[@name='c\u00f8mP\u2113\u20ac\u00d7']\n.\n\n\nA node test \n*\n is true for any node of the principal node type. For\nexample, \nchild::*\n will select all object children of the context\nnode, and \nproperty::*\n will select all properties of the context\nnode.\n\n\nA node test of the form \nKind()\n will select all object nodes with\nthe object type \u201cKind\u201d, \neffectively switching the default node object\ntype for the current and subsequent location steps to \u201cKind\u201d\n.  For\nexample, \nbelongsTo::Issue()\n will select all object nodes of object\ntype \u201cIssue\u201d belonging to the context node.  Note that not all object\ntypes are related to all other types.  In this example, if the context\nnode is a GitHub repository, a relationship exists.  If the context\nnode is a Slack channel, there is no direct relationship to type\nIssue.\n\n\nPredicates\n\u00b6\n\n\nA predicate filters a node-set with respect to an axis to produce a\nnew node-set. For each node in the node-set to be filtered, the\nPredicateExpr is evaluated with that node as the context node, with\nthe number of nodes in the node-set as the context size, and with the\nproximity position of the node in the node-set with respect to the\naxis as the context position; if PredicateExpr evaluates to true for\nthat node, the node is included in the new node-set; otherwise, it is\nnot included.\n\n\nA predicate expression is evaluated by evaluating the expression and\nconverting the result to a boolean. If the result is a number, the\nresult will be converted to true if the number is equal to the context\nposition and will be converted to false otherwise; if the result is\nnot a number, then the result will be converted as if by a call to the\nboolean function. Thus a location path \npara[3]\n is equivalent to\n\npara[position()=3]\n.\n\n\nPredicates are optional.  If no predicate is provided, no filtering is\ndone.\n\n\nAbbreviated Syntax\n\u00b6\n\n\nHere are some examples of location paths using abbreviated syntax:\n\n\n\n\n\n\n\n\nSyntax\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsrc\n\n\nselects the \nsrc\n object children of the context node\n\n\n\n\n\n\n*[@name='c\u00f8mP\u2113\u20ac\u00d7']\n\n\nselects the \nc\u00f8mP\u2113\u20ac\u00d7\n object children of the context node\n\n\n\n\n\n\n*\n\n\nselects all object children of the context node\n\n\n\n\n\n\nPerson()\n\n\nselects all node children of object type \nPerson\n of the context node and switches the context object type to \nPerson\n\n\n\n\n\n\n@name\n\n\nselects the name property of the context node\n\n\n\n\n\n\n@*\n\n\nselects all the property of the context node\n\n\n\n\n\n\nIssue()[1]\n\n\nselects the first child of object type \nIssue\n of the context node\n\n\n\n\n\n\n//foo\n\n\nselects all \nfoo\n descendants of the context node\n\n\n\n\n\n\n//*.py\n\n\nselects all descendants of the context node whose name ends in \n.py\n\n\n\n\n\n\nFile()/src/main/resources//*.md\n\n\nselects all the files ending in \n.md\n under the \n/src/main/resources\n directory; if you are using this in an editor where \nFile()\n is implicit, you do not need the leading \nFile()\n\n\n\n\n\n\nRepo()/@name\n\n\nselects the names of all repositories\n\n\n\n\n\n\nIssue()[@state=\"open\"]/belongsTo::Repo()[@name=\"rug-cli\"]\n\n\nselects all open issues in the repository named \u201crug-cli\u201d\n\n\n\n\n\n\n\n\nExpressions\n\u00b6\n\n\nBasics\n\u00b6\n\n\nExpressions are used in predicates.  Expressions can be:\n\n\n\n\na number\n\n\na string\n\n\na boolean\n\n\na function call\n\n\nlogically \nand\ned and \nor\ned\n\n\ngrouped together by parentheses\n\n\n\n\nRug path expressions do not support variables and variable references.\n\n\nFunction Calls\n\u00b6\n\n\nA FunctionCall expression is evaluated by using the FunctionName to\nidentify a function in the expression evaluation context function\nlibrary, evaluating each of the Arguments, converting each argument to\nthe type required by the function, and finally calling the function,\npassing it the converted arguments. It is an error if the number of\narguments is wrong or if an argument cannot be converted to the\nrequired type. The result of the FunctionCall expression is the result\nreturned by the function.\n\n\nAn argument is converted to type string as if by calling the string\nfunction. An argument is converted to type number as if by calling the\nnumber function. An argument is converted to type boolean as if by\ncalling the boolean function. An argument that is not of type node-set\ncannot be converted to a node-set.\n\n\nNode-sets\n\u00b6\n\n\nA location path can be used as an expression. The expression returns\nthe set of nodes selected by the path.\n\n\nThe \n|\n operator computes the union of its operands, which must be\nnode-sets.\n\n\nPredicates are used to filter expressions in the same way that they\nare used in location paths. It is an error if the expression to be\nfiltered does not evaluate to a node-set. The Predicate filters the\nnode-set with respect to the child axis.\n\n\nBooleans\n\u00b6\n\n\nAn object of type boolean can have one of two values, true and false.\n\n\nAn \nor\n expression is evaluated by evaluating each operand and\nconverting its value to a boolean as if by a call to the boolean\nfunction. The result is true if either value is true and false\notherwise. The right operand is not evaluated if the left operand\nevaluates to true.\n\n\nAn \nand\n expression is evaluated by evaluating each operand and\nconverting its value to a boolean as if by a call to the boolean\nfunction. The result is true if both values are true and false\notherwise. The right operand is not evaluated if the left operand\nevaluates to false.\n\n\nEquality operators, \n=\n, \n!=\n, \n<=\n, \n<\n, \n>=\n, and \n>\n, are only\nsupported for string and number types.  \n=\n and \n!=\n are supported on\nboolean types.  Rug path expressions do not support comparing\nnode-sets to each other or other types.\n\n\nNumbers\n\u00b6\n\n\nA number represents a positive integer number.\n\n\nStrings\n\u00b6\n\n\nStrings consist of a sequence of zero or more Unicode characters.\n\n\nLexical Structure\n\u00b6\n\n\nWhen tokenizing, the longest possible token is always returned.\n\n\nFor readability, whitespace may be used in expressions even though not\nexplicitly allowed by the grammar\n\n\nCore Function Library\n\u00b6\n\n\nThis section describes functions that Rug path expression\nimplementations must always include in the function library that is\nused to evaluate expressions.\n\n\nEach function in the function library is specified using a function\nprototype, which gives the return type, the name of the function, and\nthe type of the arguments. If an argument type is followed by a\nquestion mark, then the argument is optional; otherwise, the argument\nis required.\n\n\nNode Set Functions\n\u00b6\n\n\nFunction:\n \nnumber\n \nlast()\n\n\nThe last function returns a number equal to the context size from the\nexpression evaluation context.\n\n\nFunction:\n \nnumber\n \nposition()\n\n\nThe position function returns a number equal to the context position\nfrom the expression evaluation context.\n\n\nFunction:\n \nnumber\n **count(\nnode-set\n)**\n\n\nThe count function returns the number of nodes in the argument\nnode-set.\n\n\nFunction:\n \nstring\n **name(\nnode-set?\n)**\n\n\nThe name function returns a string representing the name of the node\nin the argument node-set that is first in document order.\n\n\nString Functions\n\u00b6\n\n\nFunction:\n \nstring\n \nstring(\nobject?\n)\n\n\nThe string function converts an object to a string as follows:\n\n\n\n\n\n\nA node-set is converted to a string by returning the string-value\n    of the node in the node-set that is first in document order. If\n    the node-set is empty, an empty string is returned.\n\n\n\n\n\n\nA number is converted to a string as follows\n\n\n\n\n\n\nNaN is converted to the string NaN\n\n\n\n\n\n\npositive zero is converted to the string 0\n\n\n\n\n\n\nnegative zero is converted to the string 0\n\n\n\n\n\n\npositive infinity is converted to the string Infinity\n\n\n\n\n\n\nnegative infinity is converted to the string -Infinity\n\n\n\n\n\n\na number is represented in decimal form as a Number with no\n    decimal point and no leading zeros, preceded by a minus sign\n    (-) if the number is negative\n\n\n\n\n\n\n\n\n\n\nThe boolean false value is converted to the string false. The\n    boolean true value is converted to the string true.\n\n\n\n\n\n\nAn object of a type other than the four basic types is converted\n    to a string in a way that is dependent on that type.\n\n\n\n\n\n\nIf the argument is omitted, it defaults to a node-set with the context\nnode as its only member.\n\n\nFunction:\n \nstring\n **concat(\nstring, string, string*\n)**\n\n\nThe concat function returns the concatenation of its arguments.\n\n\nFunction:\n \nboolean\n \nstarts-with(\nstring, string\n)\n\n\nThe starts-with function returns true if the first argument string\nstarts with the second argument string, and otherwise returns false.\n\n\nFunction:\n \nboolean\n \ncontains(\nstring, string\n)\n\n\nThe contains function returns true if the first argument string\ncontains the second argument string, and otherwise returns false.\n\n\nFunction:\n \nstring\n \nsubstring-before(\nstring, string\n)\n\n\nThe substring-before function returns the substring of the first\nargument string that precedes the first occurrence of the second\nargument string in the first argument string, or the empty string if\nthe first argument string does not contain the second argument\nstring. For example, substring-before(\u201c1999/04/01\u201d,\u201d/\u201d) returns 1999.\n\n\nFunction:\n \nstring\n \nsubstring-after(\nstring, string\n)\n\n\nThe substring-after function returns the substring of the first\nargument string that follows the first occurrence of the second\nargument string in the first argument string, or the empty string if\nthe first argument string does not contain the second argument\nstring. For example, substring-after(\u201c1999/04/01\u201d,\u201d/\u201d) returns 04/01,\nand substring-after(\u201c1999/04/01\u201d,\u201d19\u201d) returns 99/04/01.\n\n\nFunction:\n \nstring\n \nsubstring(\nstring, number, number?\n)\n\n\nThe substring function returns the substring of the first argument\nstarting at the position specified in the second argument with length\nspecified in the third argument. For example, substring(\u201c12345\u201d,1,3)\nreturns \u201c234\u201d. If the third argument is not specified, it returns the\nsubstring starting at the position specified in the second argument\nand continuing to the end of the string. For example,\nsubstring(\u201c12345\u201d,1) returns \u201c2345\u201d.\n\n\nMore precisely, each character in the string is considered to have a\nnumeric position: the position of the first character is 0, the\nposition of the second character is 1 and so on.\n\n\nNOTE:\n This differs from XPath and is in line with Java and\nECMAScript, in which the String.substring method treats the position\nof the first character as 0.\n\n\nFunction:\n \nnumber\n \nstring-length(\nstring?\n)\n\n\nThe string-length returns the number of characters in the string. If\nthe argument is omitted, it defaults to the context node converted to\na string, in other words the string-value of the context node.\n\n\nFunction:\n \nstring\n \ntrim-space(\nstring?\n)\n\n\nThe normalize-space function returns the argument string with\nwhitespace normalized by stripping leading and trailing whitespace.\n\n\nBoolean Functions\n\u00b6\n\n\nFunction:\n \nboolean\n \nboolean(\nobject\n)\n\n\nThe boolean function converts its argument to a boolean as follows:\n\n\n\n\na number is true if and only if it is neither positive or negative\n    zero nor NaN\n\n\na node-set is true if and only if it is non-empty\n\n\na string is true if and only if its length is non-zero\n\n\nan object of a type other than the four basic types is converted\n    to a boolean in a way that is dependent on that type\n\n\n\n\nFunction:\n \nboolean\n \nnot(\nboolean\n)\n\n\nThe not function returns true if its argument is false, and false\notherwise.\n\n\nFunction:\n \nboolean\n \ntrue()\n\n\nThe true function returns true.\n\n\nFunction:\n \nboolean\n \nfalse()\n\n\nThe false function returns false.\n\n\nNumber Functions\n\u00b6\n\n\nFunction: number number(object?)\n\n\nThe number function converts its argument to a number as follows:\n\n\n\n\n\n\na string that consists of optional whitespace followed by an\n    optional minus sign followed by a Number followed by whitespace is\n    converted to the IEEE 754 number that is nearest (according to the\n    IEEE 754 round-to-nearest rule) to the mathematical value\n    represented by the string; any other string is converted to NaN\n\n\n\n\n\n\nboolean true is converted to 1; boolean false is converted to 0\n\n\n\n\n\n\na node-set is first converted to a string as if by a call to the\n    string function and then converted in the same way as a string\n    argument\n\n\n\n\n\n\nan object of a type other than the four basic types is converted\n    to a number in a way that is dependent on that type\n\n\n\n\n\n\nIf the argument is omitted, it defaults to a node-set with the context\nnode as its only member.\n\n\nObject Function\n\u00b6\n\n\nCertain object types will provide functions that can be called on them\nthat are type dependent.  Those functions that return values that can\nbe converted to boolean values can be used.  The implementation of\neach object type should document functions valid to use in Rug path\nexpressions.  These functions can be called in predicates and must be\npreceded with a dot (\n.\n).\n\n\nData Model\n\u00b6\n\n\nRug path expressions operate on objects as a tree. This section\ndescribes how Rug path expressions model objects as a tree. This model is\nconceptual only and does not mandate any particular\nimplementation.\n\n\nThe tree contains nodes.  Each node has a node type and an object\ntype.  The object types are extensible, but there are only three node\ntypes:\n\n\n\n\nroot nodes\n\n\nobject nodes\n\n\nproperty nodes\n\n\n\n\nFor every type of node, there is a way of determining a string-value\nfor a node of that type. For some types of node, the string-value is\npart of the node; for other types of node, the string-value is\ncomputed from the string-value of descendant nodes.\n\n\nThere is an ordering of nodes, dependent on the type of node.  File\nnodes are lexically ordered, Issue nodes are ordered by issue number,\netc.  The property nodes of an object occur before the children of\nthe object.  The relative order of property nodes is\nimplementation-dependent.  Reverse object order is the reverse of\nobject order.\n\n\nRoot nodes and object nodes have an ordered list of child nodes.\nSince Rug path expressions navigate a graph of relationships, it is\npossible to visit a node on the graph multiple times and therefore\nreceives the same objects at multiple depths.\n\n\nRoot Node\n\u00b6\n\n\nThe root node is the root of the tree. A root node does not occur\nexcept as the root of the tree.  The type of a root node is dependent\non the context in which the path expression is evaluated.\n\n\nObject Nodes\n\u00b6\n\n\nThere is an object node for every object in the graph.\n\n\nThe children of an object node are the object nodes with a direct\nrelationship to it.\n\n\nProperty Nodes\n\u00b6\n\n\nEach object node has an associated set of property nodes; the\nobject is the parent of each of these property nodes; however, an\nproperty node is not a child of its parent object.\n\n\nObjects never share property nodes: if one object node is not the\nsame node as another object node, then none of the property nodes of\nthe one object node will be the same node as the property nodes of\nanother object node.\n\n\nAll object nodes will have an property named \nname\n that provides\nthe name of the object node.\n\n\nNamespace Nodes\n\u00b6\n\n\nNamespaces are not supported.\n\n\nProcessing Instruction Nodes\n\u00b6\n\n\nProcessing instruction nodes are not supported.\n\n\nComment Nodes\n\u00b6\n\n\nComment nodes are not supported.\n\n\nText Nodes\n\u00b6\n\n\nText nodes are not supported.\n\n\nConformance\n\u00b6\n\n\nNo conformance information.\n\n\n\n\nAppendix\n\u00b6\n\n\nDifferences with XPath\n\u00b6\n\n\nBelow is a brief summary of differences between Rug path expressions\nand XPath aimed at getting those who know XPath a fast track to using\nRug path expressions.\n\n\n\n\n\n\nRug path expressions distinguish between a node type, which are\n    analogous to XPath node types (e.g., root, element, and\n    attribute), and the node\u2019s object type, which map to the types of\n    objects in the model being traversed (e.g., Project, File, Issue,\n    and Repo).\n\n\n\n\n\n\nRug path expressions have a different set of axis specifiers,\n    eschewing ancestor-related axes, simplifying self/descendant axes,\n    and introducing relationship axes between nodes in the graph.\n\n\n\n\n\n\nString indices start with zero (0).\n\n\n\n\n\n\nRug path expressions do not support comparison of node sets.\n\n\n\n\n\n\nTree nodes have an expanded set of type-specific functions that\n    can be called in predicates.\n\n\n\n\n\n\nNamespaces are not supported.\n\n\n\n\n\n\nProcessing instructions are not relevant.\n\n\n\n\n\n\nLegacy Content\n\u00b6\n\n\nExposure in TypeScript\n\u00b6\n\n\nTreeNode hierarchy\n\n\nPossible Futures\n\u00b6\n\n\nXPath things we may add in future",
            "title": "Path Expressions"
        },
        {
            "location": "/reference/rug/path-expressions/#rug-path-expression-version-01",
            "text": "",
            "title": "Rug Path Expression Version 0.1"
        },
        {
            "location": "/reference/rug/path-expressions/#introduction",
            "text": "Rug Path Expressions are used to obtain tree nodes from structured\ndata, including:   Projects  Files (going into AST or other internal structure if understood)  Structured parameters, such as JSON or other file formats  The Atomist service model representing project data such as\n    builds, commits and chat teams  Existing trees   All data sources are viewed as trees, and results are always tree\nnodes.  All tree nodes have a  node type ,  name , and  object type .\nUnlike XML elements, tree nodes also may have methods.  Rug tree\nexpressions add a rich set of  object types  from the underlying typed\nmodel they traverse.  Types that are globally searchable\nuse  UpperCamelCase .  Private types, i.e., those only accessible\nunder a global type, use  lowerCamelCase .  The syntax is inspired by sources including  XPath 1.0  (the\nprimary influence) and  JSONPath  (which shows how the same\ncore ideas can be applied to non XML data structures).  A path expression navigates a series of nodes and relationships in a\ngraph.  Each path element in a path element acts on results returned\nby the previous path element.  Think of it as a \u201c flatMap \u201d\noperation on a collection in a functional language: it returns a new\ncollection.  Beause of the close relationship to XPath, the remainder of this\ndocument mirrors the organization of\nthe  XPath Version 1.0 specification .\nAn  ANTLR grammar  for XPath 1.0 is available.",
            "title": "Introduction"
        },
        {
            "location": "/reference/rug/path-expressions/#location-paths",
            "text": "Rug Path Expressions are location paths consisting of one or more\nsequential  Location Steps .  A location path is one or\nmore  location steps  separated by forward slashes,\n( / ).  All location paths should be absolute, i.e., begin with a forward\nslash ( / ).  The actual root context for location paths\ndiffers depending on where the path location is being used:     Rug  Root Context  Context Object Type      Editor/Reviewer  Project  File    Executor  Service  Service    Handler  object passed to Handler  object passed to handler type     This is analogous to the root context of an XPath location path being\nthe root of the document it is acting on.  The context object type is the implicit object type that the initial\nlocation step has.  For example, in an Editor the root context is a\nProject and the context object type of the path step under the root\ncontext is File, allowing one to traverse the project\u2019s file system\nhierarchy from the project root using directory and file names as in /src/main/java  or  /LICENSE .",
            "title": "Location Paths"
        },
        {
            "location": "/reference/rug/path-expressions/#location-steps",
            "text": "A location step has three parts:   an  axis , which specifies the tree relationship between the nodes\n    selected by the location step and the context node,  a  node test , which specifies the node object type and name of\n    the nodes selected by the location step, and  zero or more  predicates , which use arbitrary expressions to\n    further refine the set of nodes selected by the location step.   The syntax for a location step is the axis name and node test\nseparated by a double colon, followed by zero or more expressions each\nin square brackets. For example, in  child::comment[position()=1] , child  is the name of the axis,  comment  is the node test and [position()=1]  is a predicate.  The node-set selected by the location step is the node-set that\nresults from generating an initial node-set from the axis and\nnode-test, and then filtering that node-set by each of the predicates\nin turn.  The initial node-set consists of the nodes having the relationship to\nthe context node specified by the axis, and having the node object\ntype and name specified by the node test.  For example, a location\nstep  raisedBy::GitHubUserID()  selects the GitHub user ID that has a\nraisedBy relationship with the context node:  raisedBy , the axis,\nspecifies the relationship with the context node;  GitHubUserID() \nspecifies that each node in the initial node-set must be an object of\ntype  GitHubUserID .  The available axes are described\nin  Axes . The available node tests are described\nin  Node Tests . The meaning of some node tests is\ndependent on the axis.  The initial node-set is filtered by the first predicate to generate a\nnew node-set; this new node-set is then filtered using the second\npredicate, and so on. The final node-set is the node-set selected by\nthe location step. The axis affects how the expression in each\npredicate is evaluated and so the semantics of a predicate is defined\nwith respect to an axis. See  Predicates .",
            "title": "Location Steps"
        },
        {
            "location": "/reference/rug/path-expressions/#axes",
            "text": "Axes define the relationship between a location step and the previous\nlocation step, i.e., its node context.  Axes available in all contexts\nare:    the  child  axis contains the children of the context node,\n    which are all nodes with a direct relationship in the graph\n    to the context node    the  property  axis contains the properties of the context node;\n    the axis will be empty unless the context node is an object    the  self  axis contains just the context node itself    the  descendant  axis contains the descendants of the context\n    node; a descendant is a child or a child of a child and so on;\n    thus the descendant axis never contains property or namespace\n    nodes    Certain object types have relationships with other object types.  Some\nexamples are shown in the table below.  When the previous step\ncontains the type in the left column, the axis in the middle column\ncan be used prior to a node test for the type in the right column.\nThis is not an exhaustive list of relationships in the model graph.     Context Object Type  Axis  Node-set Object Type      Build  on  Repo    Commit  on  Repo    Issue  belongsTo  Repo    Push  hasBuild  Build    Push  contains  Commit    Push  after  Commit    ChatId  memberOf  ChatChannel    Issue  resolvedBy  Commit    Commit  author  GitHubId    Person  hasChatIdentiy  SlackId    Person  hasGithubIdentiy  GitHubId    SlackTeam  hasChannel  Channel    Repo  channel  Channel    SlackId  memberOf  SlackTeam",
            "title": "Axes"
        },
        {
            "location": "/reference/rug/path-expressions/#node-tests",
            "text": "Every axis has a principal node type, which is different than the\nnode\u2019s object type.  The node type is directly analogous to XPath node\ntypes.  If an axis can contain objects, then the principal node type\nis object; otherwise, it is the type of the nodes that the axis can\ncontain.  Thus,   For the property axis, the principal node type is property.  For other axes, the principal node type is object.   A node test that is a  stuff , called a node name test, will select\nall object nodes with the name \u201cstuff\u201d of the principal node type.\nFor example,  child::src  will select the object node named \u201csrc\u201d that\nis a child of the context node.  Node name tests can only contain\nalphanumeric, underscore ( _ ), dash ( - ), period ( . ), asterisk\n( * ), and question mark ( ? ) characters.  The asterisk and question\nmark have the same special meaning they have in shell globbing\npatterns, asterisk matches zero of more characters and question mark\nmatches any single character.  To select nodes with names having other\ncharacters, use the  @name  attribute in a predicate, e.g., /*[@name='c\u00f8mP\u2113\u20ac\u00d7'] .  A node test  *  is true for any node of the principal node type. For\nexample,  child::*  will select all object children of the context\nnode, and  property::*  will select all properties of the context\nnode.  A node test of the form  Kind()  will select all object nodes with\nthe object type \u201cKind\u201d,  effectively switching the default node object\ntype for the current and subsequent location steps to \u201cKind\u201d .  For\nexample,  belongsTo::Issue()  will select all object nodes of object\ntype \u201cIssue\u201d belonging to the context node.  Note that not all object\ntypes are related to all other types.  In this example, if the context\nnode is a GitHub repository, a relationship exists.  If the context\nnode is a Slack channel, there is no direct relationship to type\nIssue.",
            "title": "Node Tests"
        },
        {
            "location": "/reference/rug/path-expressions/#predicates",
            "text": "A predicate filters a node-set with respect to an axis to produce a\nnew node-set. For each node in the node-set to be filtered, the\nPredicateExpr is evaluated with that node as the context node, with\nthe number of nodes in the node-set as the context size, and with the\nproximity position of the node in the node-set with respect to the\naxis as the context position; if PredicateExpr evaluates to true for\nthat node, the node is included in the new node-set; otherwise, it is\nnot included.  A predicate expression is evaluated by evaluating the expression and\nconverting the result to a boolean. If the result is a number, the\nresult will be converted to true if the number is equal to the context\nposition and will be converted to false otherwise; if the result is\nnot a number, then the result will be converted as if by a call to the\nboolean function. Thus a location path  para[3]  is equivalent to para[position()=3] .  Predicates are optional.  If no predicate is provided, no filtering is\ndone.",
            "title": "Predicates"
        },
        {
            "location": "/reference/rug/path-expressions/#abbreviated-syntax",
            "text": "Here are some examples of location paths using abbreviated syntax:     Syntax  Description      src  selects the  src  object children of the context node    *[@name='c\u00f8mP\u2113\u20ac\u00d7']  selects the  c\u00f8mP\u2113\u20ac\u00d7  object children of the context node    *  selects all object children of the context node    Person()  selects all node children of object type  Person  of the context node and switches the context object type to  Person    @name  selects the name property of the context node    @*  selects all the property of the context node    Issue()[1]  selects the first child of object type  Issue  of the context node    //foo  selects all  foo  descendants of the context node    //*.py  selects all descendants of the context node whose name ends in  .py    File()/src/main/resources//*.md  selects all the files ending in  .md  under the  /src/main/resources  directory; if you are using this in an editor where  File()  is implicit, you do not need the leading  File()    Repo()/@name  selects the names of all repositories    Issue()[@state=\"open\"]/belongsTo::Repo()[@name=\"rug-cli\"]  selects all open issues in the repository named \u201crug-cli\u201d",
            "title": "Abbreviated Syntax"
        },
        {
            "location": "/reference/rug/path-expressions/#expressions",
            "text": "",
            "title": "Expressions"
        },
        {
            "location": "/reference/rug/path-expressions/#basics",
            "text": "Expressions are used in predicates.  Expressions can be:   a number  a string  a boolean  a function call  logically  and ed and  or ed  grouped together by parentheses   Rug path expressions do not support variables and variable references.",
            "title": "Basics"
        },
        {
            "location": "/reference/rug/path-expressions/#function-calls",
            "text": "A FunctionCall expression is evaluated by using the FunctionName to\nidentify a function in the expression evaluation context function\nlibrary, evaluating each of the Arguments, converting each argument to\nthe type required by the function, and finally calling the function,\npassing it the converted arguments. It is an error if the number of\narguments is wrong or if an argument cannot be converted to the\nrequired type. The result of the FunctionCall expression is the result\nreturned by the function.  An argument is converted to type string as if by calling the string\nfunction. An argument is converted to type number as if by calling the\nnumber function. An argument is converted to type boolean as if by\ncalling the boolean function. An argument that is not of type node-set\ncannot be converted to a node-set.",
            "title": "Function Calls"
        },
        {
            "location": "/reference/rug/path-expressions/#node-sets",
            "text": "A location path can be used as an expression. The expression returns\nthe set of nodes selected by the path.  The  |  operator computes the union of its operands, which must be\nnode-sets.  Predicates are used to filter expressions in the same way that they\nare used in location paths. It is an error if the expression to be\nfiltered does not evaluate to a node-set. The Predicate filters the\nnode-set with respect to the child axis.",
            "title": "Node-sets"
        },
        {
            "location": "/reference/rug/path-expressions/#booleans",
            "text": "An object of type boolean can have one of two values, true and false.  An  or  expression is evaluated by evaluating each operand and\nconverting its value to a boolean as if by a call to the boolean\nfunction. The result is true if either value is true and false\notherwise. The right operand is not evaluated if the left operand\nevaluates to true.  An  and  expression is evaluated by evaluating each operand and\nconverting its value to a boolean as if by a call to the boolean\nfunction. The result is true if both values are true and false\notherwise. The right operand is not evaluated if the left operand\nevaluates to false.  Equality operators,  = ,  != ,  <= ,  < ,  >= , and  > , are only\nsupported for string and number types.   =  and  !=  are supported on\nboolean types.  Rug path expressions do not support comparing\nnode-sets to each other or other types.",
            "title": "Booleans"
        },
        {
            "location": "/reference/rug/path-expressions/#numbers",
            "text": "A number represents a positive integer number.",
            "title": "Numbers"
        },
        {
            "location": "/reference/rug/path-expressions/#strings",
            "text": "Strings consist of a sequence of zero or more Unicode characters.",
            "title": "Strings"
        },
        {
            "location": "/reference/rug/path-expressions/#lexical-structure",
            "text": "When tokenizing, the longest possible token is always returned.  For readability, whitespace may be used in expressions even though not\nexplicitly allowed by the grammar",
            "title": "Lexical Structure"
        },
        {
            "location": "/reference/rug/path-expressions/#core-function-library",
            "text": "This section describes functions that Rug path expression\nimplementations must always include in the function library that is\nused to evaluate expressions.  Each function in the function library is specified using a function\nprototype, which gives the return type, the name of the function, and\nthe type of the arguments. If an argument type is followed by a\nquestion mark, then the argument is optional; otherwise, the argument\nis required.",
            "title": "Core Function Library"
        },
        {
            "location": "/reference/rug/path-expressions/#node-set-functions",
            "text": "Function:   number   last()  The last function returns a number equal to the context size from the\nexpression evaluation context.  Function:   number   position()  The position function returns a number equal to the context position\nfrom the expression evaluation context.  Function:   number  **count( node-set )**  The count function returns the number of nodes in the argument\nnode-set.  Function:   string  **name( node-set? )**  The name function returns a string representing the name of the node\nin the argument node-set that is first in document order.",
            "title": "Node Set Functions"
        },
        {
            "location": "/reference/rug/path-expressions/#string-functions",
            "text": "Function:   string   string( object? )  The string function converts an object to a string as follows:    A node-set is converted to a string by returning the string-value\n    of the node in the node-set that is first in document order. If\n    the node-set is empty, an empty string is returned.    A number is converted to a string as follows    NaN is converted to the string NaN    positive zero is converted to the string 0    negative zero is converted to the string 0    positive infinity is converted to the string Infinity    negative infinity is converted to the string -Infinity    a number is represented in decimal form as a Number with no\n    decimal point and no leading zeros, preceded by a minus sign\n    (-) if the number is negative      The boolean false value is converted to the string false. The\n    boolean true value is converted to the string true.    An object of a type other than the four basic types is converted\n    to a string in a way that is dependent on that type.    If the argument is omitted, it defaults to a node-set with the context\nnode as its only member.  Function:   string  **concat( string, string, string* )**  The concat function returns the concatenation of its arguments.  Function:   boolean   starts-with( string, string )  The starts-with function returns true if the first argument string\nstarts with the second argument string, and otherwise returns false.  Function:   boolean   contains( string, string )  The contains function returns true if the first argument string\ncontains the second argument string, and otherwise returns false.  Function:   string   substring-before( string, string )  The substring-before function returns the substring of the first\nargument string that precedes the first occurrence of the second\nargument string in the first argument string, or the empty string if\nthe first argument string does not contain the second argument\nstring. For example, substring-before(\u201c1999/04/01\u201d,\u201d/\u201d) returns 1999.  Function:   string   substring-after( string, string )  The substring-after function returns the substring of the first\nargument string that follows the first occurrence of the second\nargument string in the first argument string, or the empty string if\nthe first argument string does not contain the second argument\nstring. For example, substring-after(\u201c1999/04/01\u201d,\u201d/\u201d) returns 04/01,\nand substring-after(\u201c1999/04/01\u201d,\u201d19\u201d) returns 99/04/01.  Function:   string   substring( string, number, number? )  The substring function returns the substring of the first argument\nstarting at the position specified in the second argument with length\nspecified in the third argument. For example, substring(\u201c12345\u201d,1,3)\nreturns \u201c234\u201d. If the third argument is not specified, it returns the\nsubstring starting at the position specified in the second argument\nand continuing to the end of the string. For example,\nsubstring(\u201c12345\u201d,1) returns \u201c2345\u201d.  More precisely, each character in the string is considered to have a\nnumeric position: the position of the first character is 0, the\nposition of the second character is 1 and so on.  NOTE:  This differs from XPath and is in line with Java and\nECMAScript, in which the String.substring method treats the position\nof the first character as 0.  Function:   number   string-length( string? )  The string-length returns the number of characters in the string. If\nthe argument is omitted, it defaults to the context node converted to\na string, in other words the string-value of the context node.  Function:   string   trim-space( string? )  The normalize-space function returns the argument string with\nwhitespace normalized by stripping leading and trailing whitespace.",
            "title": "String Functions"
        },
        {
            "location": "/reference/rug/path-expressions/#boolean-functions",
            "text": "Function:   boolean   boolean( object )  The boolean function converts its argument to a boolean as follows:   a number is true if and only if it is neither positive or negative\n    zero nor NaN  a node-set is true if and only if it is non-empty  a string is true if and only if its length is non-zero  an object of a type other than the four basic types is converted\n    to a boolean in a way that is dependent on that type   Function:   boolean   not( boolean )  The not function returns true if its argument is false, and false\notherwise.  Function:   boolean   true()  The true function returns true.  Function:   boolean   false()  The false function returns false.",
            "title": "Boolean Functions"
        },
        {
            "location": "/reference/rug/path-expressions/#number-functions",
            "text": "Function: number number(object?)  The number function converts its argument to a number as follows:    a string that consists of optional whitespace followed by an\n    optional minus sign followed by a Number followed by whitespace is\n    converted to the IEEE 754 number that is nearest (according to the\n    IEEE 754 round-to-nearest rule) to the mathematical value\n    represented by the string; any other string is converted to NaN    boolean true is converted to 1; boolean false is converted to 0    a node-set is first converted to a string as if by a call to the\n    string function and then converted in the same way as a string\n    argument    an object of a type other than the four basic types is converted\n    to a number in a way that is dependent on that type    If the argument is omitted, it defaults to a node-set with the context\nnode as its only member.",
            "title": "Number Functions"
        },
        {
            "location": "/reference/rug/path-expressions/#object-function",
            "text": "Certain object types will provide functions that can be called on them\nthat are type dependent.  Those functions that return values that can\nbe converted to boolean values can be used.  The implementation of\neach object type should document functions valid to use in Rug path\nexpressions.  These functions can be called in predicates and must be\npreceded with a dot ( . ).",
            "title": "Object Function"
        },
        {
            "location": "/reference/rug/path-expressions/#data-model",
            "text": "Rug path expressions operate on objects as a tree. This section\ndescribes how Rug path expressions model objects as a tree. This model is\nconceptual only and does not mandate any particular\nimplementation.  The tree contains nodes.  Each node has a node type and an object\ntype.  The object types are extensible, but there are only three node\ntypes:   root nodes  object nodes  property nodes   For every type of node, there is a way of determining a string-value\nfor a node of that type. For some types of node, the string-value is\npart of the node; for other types of node, the string-value is\ncomputed from the string-value of descendant nodes.  There is an ordering of nodes, dependent on the type of node.  File\nnodes are lexically ordered, Issue nodes are ordered by issue number,\netc.  The property nodes of an object occur before the children of\nthe object.  The relative order of property nodes is\nimplementation-dependent.  Reverse object order is the reverse of\nobject order.  Root nodes and object nodes have an ordered list of child nodes.\nSince Rug path expressions navigate a graph of relationships, it is\npossible to visit a node on the graph multiple times and therefore\nreceives the same objects at multiple depths.",
            "title": "Data Model"
        },
        {
            "location": "/reference/rug/path-expressions/#root-node",
            "text": "The root node is the root of the tree. A root node does not occur\nexcept as the root of the tree.  The type of a root node is dependent\non the context in which the path expression is evaluated.",
            "title": "Root Node"
        },
        {
            "location": "/reference/rug/path-expressions/#object-nodes",
            "text": "There is an object node for every object in the graph.  The children of an object node are the object nodes with a direct\nrelationship to it.",
            "title": "Object Nodes"
        },
        {
            "location": "/reference/rug/path-expressions/#property-nodes",
            "text": "Each object node has an associated set of property nodes; the\nobject is the parent of each of these property nodes; however, an\nproperty node is not a child of its parent object.  Objects never share property nodes: if one object node is not the\nsame node as another object node, then none of the property nodes of\nthe one object node will be the same node as the property nodes of\nanother object node.  All object nodes will have an property named  name  that provides\nthe name of the object node.",
            "title": "Property Nodes"
        },
        {
            "location": "/reference/rug/path-expressions/#namespace-nodes",
            "text": "Namespaces are not supported.",
            "title": "Namespace Nodes"
        },
        {
            "location": "/reference/rug/path-expressions/#processing-instruction-nodes",
            "text": "Processing instruction nodes are not supported.",
            "title": "Processing Instruction Nodes"
        },
        {
            "location": "/reference/rug/path-expressions/#comment-nodes",
            "text": "Comment nodes are not supported.",
            "title": "Comment Nodes"
        },
        {
            "location": "/reference/rug/path-expressions/#text-nodes",
            "text": "Text nodes are not supported.",
            "title": "Text Nodes"
        },
        {
            "location": "/reference/rug/path-expressions/#conformance",
            "text": "No conformance information.",
            "title": "Conformance"
        },
        {
            "location": "/reference/rug/path-expressions/#appendix",
            "text": "",
            "title": "Appendix"
        },
        {
            "location": "/reference/rug/path-expressions/#differences-with-xpath",
            "text": "Below is a brief summary of differences between Rug path expressions\nand XPath aimed at getting those who know XPath a fast track to using\nRug path expressions.    Rug path expressions distinguish between a node type, which are\n    analogous to XPath node types (e.g., root, element, and\n    attribute), and the node\u2019s object type, which map to the types of\n    objects in the model being traversed (e.g., Project, File, Issue,\n    and Repo).    Rug path expressions have a different set of axis specifiers,\n    eschewing ancestor-related axes, simplifying self/descendant axes,\n    and introducing relationship axes between nodes in the graph.    String indices start with zero (0).    Rug path expressions do not support comparison of node sets.    Tree nodes have an expanded set of type-specific functions that\n    can be called in predicates.    Namespaces are not supported.    Processing instructions are not relevant.",
            "title": "Differences with XPath"
        },
        {
            "location": "/reference/rug/path-expressions/#legacy-content",
            "text": "",
            "title": "Legacy Content"
        },
        {
            "location": "/reference/rug/path-expressions/#exposure-in-typescript",
            "text": "TreeNode hierarchy",
            "title": "Exposure in TypeScript"
        },
        {
            "location": "/reference/rug/path-expressions/#possible-futures",
            "text": "XPath things we may add in future",
            "title": "Possible Futures"
        },
        {
            "location": "/reference/rug/extensions/",
            "text": "Rug extensions represent different types of source code, events, and\nsystems which Rug can understand and interact with.  Each Rug\nextension defines a set of operations you can use to get and\nmodify the system or language it represents.\n\n\nRug has a number of in-built language extensions that understand\nproject concepts and make it \nmuch\n simpler to write your Rugs.\n\n\nThe following core Rug extensions are natively supported by Rug:\n\n\n\n\nCljProject\n - Clojure projects\n\n\nCSharpFile\n - C# files\n\n\nDockerFile\n - Dockerfiles\n\n\nElmModule\n - Elm Modules\n\n\nEveryPom\n - all Maven POM files in a project\n\n\nFile\n - manipulate simple text files\n\n\nJavaProject\n - Java projects\n\n\nJavaSource\n - Java source files\n\n\nJavaType\n - Java classes\n\n\nJson\n - JSON files\n\n\nLine\n - manipulate specific lines in a project\u2019s files\n\n\nPom\n - projects containing Maven POM files\n\n\nProject\n - execute operations across a project\n\n\nProperties\n - Java properties files\n\n\nPythonFile\n - Python source files\n\n\nPythonRequirementsTxt\n - Python \nrequirements.txt\n files\n\n\nRugArchiveProject\n - Rug projects\n\n\nRugFile\n - Rug DSL files\n\n\nScalaFile\n - Scala files\n\n\nServices\n - \u201cservices\u201d, used by executors\n\n\nSpringBootProject\n - Spring Boot projects\n\n\nXml\n - XML files\n\n\nYml\n - YAML files\n\n\n\n\nYou can also write your own Rug extensions.",
            "title": "Overview"
        },
        {
            "location": "/reference/rug/extensions/clj-project/",
            "text": "Type: \nclj.project\n\u00b6\n\n\nClojure project\n\n\nclj.project\n Operations\n\u00b6\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ninterface com.atomist.rug.runtime.FunctionInvocationContext\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\n\n\n\nParameters\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nOperate on this. Use when you want to operate on an object in an embedded language such as JavaScript or Clojure\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\n\n\n\nParameters\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\n\n\n\nParameters\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ninterface com.atomist.rug.runtime.FunctionInvocationContext\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ninterface com.atomist.rug.runtime.FunctionInvocationContext\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\n\n\n\nParameters\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nsetProjectName\n\u00b6\n\n\nSet the project name to the given value\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from",
            "title": "CljProject"
        },
        {
            "location": "/reference/rug/extensions/clj-project/#type-cljproject",
            "text": "Clojure project",
            "title": "Type: clj.project"
        },
        {
            "location": "/reference/rug/extensions/clj-project/#cljproject-operations",
            "text": "",
            "title": "clj.project Operations"
        },
        {
            "location": "/reference/rug/extensions/clj-project/#operation-blockingproblem",
            "text": "Report a severe, blocking problem  Parameters     Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  interface com.atomist.rug.runtime.FunctionInvocationContext  **",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/clj-project/#operation-content",
            "text": "Return file content  Parameters  None",
            "title": "Operation: content"
        },
        {
            "location": "/reference/rug/extensions/clj-project/#operation-eval",
            "text": "Operate on this. Use when you want to operate on an object in an embedded language such as JavaScript or Clojure  Parameters     Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/clj-project/#operation-fail",
            "text": "Cause the operation to fail with a fatal error  Parameters     Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/clj-project/#operation-filename",
            "text": "Return file name, excluding path  Parameters  None",
            "title": "Operation: filename"
        },
        {
            "location": "/reference/rug/extensions/clj-project/#operation-linecount",
            "text": "Return the number of lines in the file  Parameters  None",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference/rug/extensions/clj-project/#operation-majorproblem",
            "text": "Report a major problem  Parameters     Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  interface com.atomist.rug.runtime.FunctionInvocationContext  **",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/clj-project/#operation-minorproblem",
            "text": "Report a minor problem  Parameters     Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  interface com.atomist.rug.runtime.FunctionInvocationContext  **",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/clj-project/#operation-path",
            "text": "Return file path, with forward slashes  Parameters  None",
            "title": "Operation: path"
        },
        {
            "location": "/reference/rug/extensions/clj-project/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.  Parameters     Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/clj-project/#operation-setprojectname",
            "text": "Set the project name to the given value  Parameters     Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Operation: setProjectName"
        },
        {
            "location": "/reference/rug/extensions/clj-project/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /  Parameters     Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/",
            "text": "Type: \nCSharpFile\n\u00b6\n\n\nC# file\n\n\nCSharpFile\n Operations\n\u00b6\n\n\nOperation: \naddUsing\n\u00b6\n\n\nAdd a using if it isn\u2019t already present\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewUsing\n\n\nclass java.lang.String\n\n\nNew using (just the package)\n\n\n\n\n\n\n\n\nOperation: \nappend\n\u00b6\n\n\nAppend\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nformatInfo\n\u00b6\n\n\nReturn the format info for the start of this structure in the file or null if not available\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nset\n\u00b6\n\n\nSet the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe match key whose content you want\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nThe new value\n\n\n\n\n\n\n\n\nOperation: \nupdate\n\u00b6\n\n\nUpdate the whole value\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nvalue\n\u00b6\n\n\nValue\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nvalueOf\n\u00b6\n\n\nReturn the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe match key whose content you want",
            "title": "CSharpFile"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#type-csharpfile",
            "text": "C# file",
            "title": "Type: CSharpFile"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#csharpfile-operations",
            "text": "",
            "title": "CSharpFile Operations"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-addusing",
            "text": "Add a using if it isn\u2019t already present",
            "title": "Operation: addUsing"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters",
            "text": "Name  Type  Description      newUsing  class java.lang.String  New using (just the package)",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-append",
            "text": "Append",
            "title": "Operation: append"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters_1",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters_2",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters_3",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters_4",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters_5",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-formatinfo",
            "text": "Return the format info for the start of this structure in the file or null if not available",
            "title": "Operation: formatInfo"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters_7",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters_8",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters_10",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters_11",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-set",
            "text": "Set the value of the given key",
            "title": "Operation: set"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters_12",
            "text": "Name  Type  Description      key  class java.lang.String  The match key whose content you want    value  class java.lang.String  The new value",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-update",
            "text": "Update the whole value",
            "title": "Operation: update"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters_13",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-value",
            "text": "Value",
            "title": "Operation: value"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters_14",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#operation-valueof",
            "text": "Return the value of the given key",
            "title": "Operation: valueOf"
        },
        {
            "location": "/reference/rug/extensions/c-sharp-file/#parameters_15",
            "text": "Name  Type  Description      name  class java.lang.String  The match key whose content you want",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/",
            "text": "Type: \nDockerFile\n\u00b6\n\n\nDocker file type\n\n\nDockerFile\n Operations\n\u00b6\n\n\nOperation: \naddAdd\n\u00b6\n\n\nAdd ADD directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naddContents\n\n\nclass java.lang.String\n\n\nThe contents of the ADD directive\n\n\n\n\n\n\n\n\nOperation: \naddCopy\n\u00b6\n\n\nAdd COPY directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncopyContents\n\n\nclass java.lang.String\n\n\nThe contents of the COPY directive\n\n\n\n\n\n\n\n\nOperation: \naddEnv\n\u00b6\n\n\nAdd Env directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nenvContents\n\n\nclass java.lang.String\n\n\nThe contents of the Env directive\n\n\n\n\n\n\n\n\nOperation: \naddExpose\n\u00b6\n\n\nAdd EXPOSE directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nexposeContents\n\n\nclass java.lang.String\n\n\nThe contents of the EXPOSE directive\n\n\n\n\n\n\n\n\nOperation: \naddLabel\n\u00b6\n\n\nAdd LABEL directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabelContents\n\n\nclass java.lang.String\n\n\nThe contents of the LABEL directive\n\n\n\n\n\n\n\n\nOperation: \naddMaintainer\n\u00b6\n\n\nAdd MAINTAINER directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaintainerName\n\n\nclass java.lang.String\n\n\nThe name of the MAINTAINER directive\n\n\n\n\n\n\nmaintainerEmail\n\n\nclass java.lang.String\n\n\nThe email of the MAINTAINER directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateCmd\n\u00b6\n\n\nAdd or update CMD directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncmdContents\n\n\nclass java.lang.String\n\n\nThe contents of the CMD directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateEntryPoint\n\u00b6\n\n\nAdd or update ENTRYPOINT directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nentrypointContent\n\n\nclass java.lang.String\n\n\nThe contents of the ENTRYPOINT directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateExpose\n\u00b6\n\n\nAdd or update EXPOSE directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nexposeContents\n\n\nclass java.lang.String\n\n\nThe contents of the EXPOSE directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateFrom\n\u00b6\n\n\nAdd or update FROM directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfromContents\n\n\nclass java.lang.String\n\n\nThe contents of the FROM directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateHealthcheck\n\u00b6\n\n\nAdd or update HEALTHCHECK directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhealthcheckContent\n\n\nclass java.lang.String\n\n\nThe contents of the HEALTHCHECK directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateLabel\n\u00b6\n\n\nAdd or update LABEL directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabelContents\n\n\nclass java.lang.String\n\n\nThe contents of the LABEL directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateMaintainer\n\u00b6\n\n\nAdd or update MAINTAINER directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmaintainerName\n\n\nclass java.lang.String\n\n\nThe name of the MAINTAINER directive\n\n\n\n\n\n\nmaintainerEmail\n\n\nclass java.lang.String\n\n\nThe email of the MAINTAINER directive\n\n\n\n\n\n\n\n\nOperation: \naddOrUpdateWorkdir\n\u00b6\n\n\nAdd or update WORKDIR directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nworkdirContents\n\n\nclass java.lang.String\n\n\nThe contents of the WORKDIR directive\n\n\n\n\n\n\n\n\nOperation: \naddRun\n\u00b6\n\n\nAdd RUN directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrunContents\n\n\nclass java.lang.String\n\n\nThe contents of the RUN directive\n\n\n\n\n\n\n\n\nOperation: \naddVolume\n\u00b6\n\n\nAdd VOLUME directive\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvolumeContents\n\n\nclass java.lang.String\n\n\nThe contents of the VOLUME directive\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ngetExposedPorts\n\u00b6\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file\u2019s permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from",
            "title": "DockerFile"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#type-dockerfile",
            "text": "Docker file type",
            "title": "Type: DockerFile"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#dockerfile-operations",
            "text": "",
            "title": "DockerFile Operations"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addadd",
            "text": "Add ADD directive",
            "title": "Operation: addAdd"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters",
            "text": "Name  Type  Description      addContents  class java.lang.String  The contents of the ADD directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addcopy",
            "text": "Add COPY directive",
            "title": "Operation: addCopy"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_1",
            "text": "Name  Type  Description      copyContents  class java.lang.String  The contents of the COPY directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addenv",
            "text": "Add Env directive",
            "title": "Operation: addEnv"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_2",
            "text": "Name  Type  Description      envContents  class java.lang.String  The contents of the Env directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addexpose",
            "text": "Add EXPOSE directive",
            "title": "Operation: addExpose"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_3",
            "text": "Name  Type  Description      exposeContents  class java.lang.String  The contents of the EXPOSE directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addlabel",
            "text": "Add LABEL directive",
            "title": "Operation: addLabel"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_4",
            "text": "Name  Type  Description      labelContents  class java.lang.String  The contents of the LABEL directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addmaintainer",
            "text": "Add MAINTAINER directive",
            "title": "Operation: addMaintainer"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_5",
            "text": "Name  Type  Description      maintainerName  class java.lang.String  The name of the MAINTAINER directive    maintainerEmail  class java.lang.String  The email of the MAINTAINER directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addorupdatecmd",
            "text": "Add or update CMD directive",
            "title": "Operation: addOrUpdateCmd"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_6",
            "text": "Name  Type  Description      cmdContents  class java.lang.String  The contents of the CMD directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addorupdateentrypoint",
            "text": "Add or update ENTRYPOINT directive",
            "title": "Operation: addOrUpdateEntryPoint"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_7",
            "text": "Name  Type  Description      entrypointContent  class java.lang.String  The contents of the ENTRYPOINT directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addorupdateexpose",
            "text": "Add or update EXPOSE directive",
            "title": "Operation: addOrUpdateExpose"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_8",
            "text": "Name  Type  Description      exposeContents  class java.lang.String  The contents of the EXPOSE directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addorupdatefrom",
            "text": "Add or update FROM directive",
            "title": "Operation: addOrUpdateFrom"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_9",
            "text": "Name  Type  Description      fromContents  class java.lang.String  The contents of the FROM directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addorupdatehealthcheck",
            "text": "Add or update HEALTHCHECK directive",
            "title": "Operation: addOrUpdateHealthcheck"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_10",
            "text": "Name  Type  Description      healthcheckContent  class java.lang.String  The contents of the HEALTHCHECK directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addorupdatelabel",
            "text": "Add or update LABEL directive",
            "title": "Operation: addOrUpdateLabel"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_11",
            "text": "Name  Type  Description      labelContents  class java.lang.String  The contents of the LABEL directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addorupdatemaintainer",
            "text": "Add or update MAINTAINER directive",
            "title": "Operation: addOrUpdateMaintainer"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_12",
            "text": "Name  Type  Description      maintainerName  class java.lang.String  The name of the MAINTAINER directive    maintainerEmail  class java.lang.String  The email of the MAINTAINER directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addorupdateworkdir",
            "text": "Add or update WORKDIR directive",
            "title": "Operation: addOrUpdateWorkdir"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_13",
            "text": "Name  Type  Description      workdirContents  class java.lang.String  The contents of the WORKDIR directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addrun",
            "text": "Add RUN directive",
            "title": "Operation: addRun"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_14",
            "text": "Name  Type  Description      runContents  class java.lang.String  The contents of the RUN directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-addvolume",
            "text": "Add VOLUME directive",
            "title": "Operation: addVolume"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_15",
            "text": "Name  Type  Description      volumeContents  class java.lang.String  The contents of the VOLUME directive",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_16",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_17",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_18",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_19",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_20",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_21",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-getexposedports",
            "text": "",
            "title": "Operation: getExposedPorts"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_22",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_23",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_24",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_25",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_26",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_27",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_28",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_29",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_30",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-permissions",
            "text": "Return the file\u2019s permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_31",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_32",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference/rug/extensions/docker-file/#parameters_33",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/",
            "text": "Type: \nElmModule\n\u00b6\n\n\nElm module\n\n\nElmModule\n Operations\n\u00b6\n\n\nOperation: \naddFunction\n\u00b6\n\n\nAdd a function with the given declaration\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbody\n\n\nclass java.lang.String\n\n\nBody for the function\n\n\n\n\n\n\n\n\nOperation: \naddImportStatement\n\u00b6\n\n\nUpdate the given module import\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nimportStatement\n\n\nclass java.lang.String\n\n\nThe complete import statement\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nexposes\n\u00b6\n\n\nDoes the module expose this?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nA function or type that might be exposed\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nimports\n\u00b6\n\n\nDoes the module import the given module?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmoduleName\n\n\nclass java.lang.String\n\n\nThe module name to check\n\n\n\n\n\n\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the name of the module\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file\u2019s permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nremoveFunction\n\u00b6\n\n\nRemove a function with the given name\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nName of the function to remove\n\n\n\n\n\n\n\n\nOperation: \nrename\n\u00b6\n\n\nChange the name of the module\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewName\n\n\nclass java.lang.String\n\n\nThe module name to change to\n\n\n\n\n\n\n\n\nOperation: \nreplaceExposing\n\u00b6\n\n\nReplace the exposing\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewExposing\n\n\nclass java.lang.String\n\n\nNew content of exposing. Does not include exposing keyword. Will be either a CSV list or ..\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from\n\n\n\n\n\n\n\n\nOperation: \nupdateImport\n\u00b6\n\n\nUpdate the given module import\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noldModuleName\n\n\nclass java.lang.String\n\n\nThe old module import name\n\n\n\n\n\n\nnewName\n\n\nclass java.lang.String\n\n\nThe module name to change to",
            "title": "ElmModule"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#type-elmmodule",
            "text": "Elm module",
            "title": "Type: ElmModule"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#elmmodule-operations",
            "text": "",
            "title": "ElmModule Operations"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-addfunction",
            "text": "Add a function with the given declaration",
            "title": "Operation: addFunction"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters",
            "text": "Name  Type  Description      body  class java.lang.String  Body for the function",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-addimportstatement",
            "text": "Update the given module import",
            "title": "Operation: addImportStatement"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_1",
            "text": "Name  Type  Description      importStatement  class java.lang.String  The complete import statement",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_2",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_3",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_4",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_5",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-exposes",
            "text": "Does the module expose this?",
            "title": "Operation: exposes"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_6",
            "text": "Name  Type  Description      name  class java.lang.String  A function or type that might be exposed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_7",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-imports",
            "text": "Does the module import the given module?",
            "title": "Operation: imports"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_9",
            "text": "Name  Type  Description      moduleName  class java.lang.String  The module name to check",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_10",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_12",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_14",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-name",
            "text": "Return the name of the module",
            "title": "Operation: name"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_15",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_16",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_17",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_18",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-permissions",
            "text": "Return the file\u2019s permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_19",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_20",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-removefunction",
            "text": "Remove a function with the given name",
            "title": "Operation: removeFunction"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_21",
            "text": "Name  Type  Description      name  class java.lang.String  Name of the function to remove",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-rename",
            "text": "Change the name of the module",
            "title": "Operation: rename"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_22",
            "text": "Name  Type  Description      newName  class java.lang.String  The module name to change to",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-replaceexposing",
            "text": "Replace the exposing",
            "title": "Operation: replaceExposing"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_23",
            "text": "Name  Type  Description      newExposing  class java.lang.String  New content of exposing. Does not include exposing keyword. Will be either a CSV list or ..",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_24",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#operation-updateimport",
            "text": "Update the given module import",
            "title": "Operation: updateImport"
        },
        {
            "location": "/reference/rug/extensions/elm-module/#parameters_25",
            "text": "Name  Type  Description      oldModuleName  class java.lang.String  The old module import name    newName  class java.lang.String  The module name to change to",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/",
            "text": "Type: \nEveryPom\n\u00b6\n\n\nPOM XML file\n\n\nEveryPom\n Operations\n\u00b6\n\n\nOperation: \naddChildNode\n\u00b6\n\n\nAdd the specified content under the indicated xpath-selected node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath selector for the node to add the content under\n\n\n\n\n\n\nnewNode\n\n\nclass java.lang.String\n\n\nThe new node name to be added as a child\n\n\n\n\n\n\nnodeContent\n\n\nclass java.lang.String\n\n\nXML document to be added under the indicated node\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceBuildPlugin\n\u00b6\n\n\nAdds or replaces a build plugin\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the build plugin\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the build plugin\u2019s artifactId\n\n\n\n\n\n\npluginContent\n\n\nclass java.lang.String\n\n\nThe XML content for the plugin\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependency\n\u00b6\n\n\nAdd or replace a dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\nscope\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s scope\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependency\n\u00b6\n\n\nAdd or replace a dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyManagementDependency\n\u00b6\n\n\nAdds or replaces a dependency management dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\ndependencyContent\n\n\nclass java.lang.String\n\n\nThe XML content for the dependency\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyOfVersion\n\u00b6\n\n\nAdd or replace a dependency, providing version and scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s version to be set\n\n\n\n\n\n\nscope\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s scope to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyOfVersion\n\u00b6\n\n\nAdd or replace a dependency, providing version and scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s version to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyScope\n\u00b6\n\n\nAdd or replace a dependency\u2019s scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\nnewScope\n\n\nclass java.lang.String\n\n\nThe new value of the dependency\u2019s scope to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyVersion\n\u00b6\n\n\nAdd or replace a dependency\u2019s version\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s version to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceNode\n\u00b6\n\n\nAdds or replaces a node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nparentNodeXPath\n\n\nclass java.lang.String\n\n\nThe XPath selector for the parent node\n\n\n\n\n\n\nxPathOfNodeToReplace\n\n\nclass java.lang.String\n\n\nThe XPath selector for the node to replace\n\n\n\n\n\n\nnewNode\n\n\nclass java.lang.String\n\n\nThe name of the node being placed\n\n\n\n\n\n\nnodeContent\n\n\nclass java.lang.String\n\n\nThe content of the node being placed\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceProperty\n\u00b6\n\n\nAdd or replace a property\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npropertyName\n\n\nclass java.lang.String\n\n\nThe name of the property being set\n\n\n\n\n\n\npropertyValue\n\n\nclass java.lang.String\n\n\nThe value of the property being set\n\n\n\n\n\n\n\n\nOperation: \nartifactId\n\u00b6\n\n\nReturn the content of the artifactId element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontains\n\u00b6\n\n\nTests whether a node matching the given xpath expression is present\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to test against for the presence of a node\n\n\n\n\n\n\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ndeleteNode\n\u00b6\n\n\nDeletes the specified node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to the node to delete\n\n\n\n\n\n\n\n\nOperation: \ndependencyScope\n\u00b6\n\n\nReturn the value of a dependency\u2019s scope as specified by artifactId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency you are looking to inspect\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency you are looking to inspect\n\n\n\n\n\n\n\n\nOperation: \ndependencyVersion\n\u00b6\n\n\nReturn the value of a dependency\u2019s version as specified by artifactId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency you are looking to inspect\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency you are looking to inspect\n\n\n\n\n\n\n\n\nOperation: \ndescription\n\u00b6\n\n\nReturn the content of the description element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ngetTextContentFor\n\u00b6\n\n\nGet the text content for a specific xpath expression\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to use to retrieve the test content\n\n\n\n\n\n\n\n\nOperation: \ngroupId\n\u00b6\n\n\nReturn the content of the groupId element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisBuildPluginPresent\n\u00b6\n\n\nReturn whether a build plugin is present as specified by artifactId and groupId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the build plugin you are looking to test the presence of\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the build plugin you are looking to test the presence of\n\n\n\n\n\n\n\n\nOperation: \nisDependencyManagementDependencyPresent\n\u00b6\n\n\nReturn whether a dependency management dependency is present as specified by artifactId and groupId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency management dependency you are looking to test the presence of\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency management dependency you are looking to test the presence of\n\n\n\n\n\n\n\n\nOperation: \nisDependencyPresent\n\u00b6\n\n\nReturn whether a dependency is present as specified by artifactId and groupId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency you are looking to test the presence of\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency you are looking to test the presence of\n\n\n\n\n\n\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the content of the name element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npackaging\n\u00b6\n\n\nReturn the content of the packaging element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nparentArtifactId\n\u00b6\n\n\nReturn the content of the parent artifactId\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nparentGroupId\n\u00b6\n\n\nReturn the content of the parent groupId\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nparentVersion\n\u00b6\n\n\nReturn the content of the parent version\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file\u2019s permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nproperty\n\u00b6\n\n\nReturn the value of a project property\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nprojectPropertyName\n\n\nclass java.lang.String\n\n\nThe project property you are looking to inspect\n\n\n\n\n\n\n\n\nOperation: \nremoveDependency\n\u00b6\n\n\nRemoves a dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\n\n\nOperation: \nremoveDependencyScope\n\u00b6\n\n\nRemove a dependency\u2019s scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\n\n\nOperation: \nremoveDependencyVersion\n\u00b6\n\n\nRemove a dependency\u2019s version\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\n\n\nOperation: \nremoveProperty\n\u00b6\n\n\nRemove a property\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npropertyName\n\n\nclass java.lang.String\n\n\nThe name of the project property being deleted\n\n\n\n\n\n\n\n\nOperation: \nreplaceParent\n\u00b6\n\n\nSet the content of the parent block\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentBlock\n\n\nclass java.lang.String\n\n\nThe parent block that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetArtifactId\n\u00b6\n\n\nSet the content of the artifactId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewArtifactId\n\n\nclass java.lang.String\n\n\nThe artifactId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetDescription\n\u00b6\n\n\nSet the content of the description element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewDescription\n\n\nclass java.lang.String\n\n\nThe description that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetGroupId\n\u00b6\n\n\nSet the content of the groupId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewGroupId\n\n\nclass java.lang.String\n\n\nThe groupId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetPackaging\n\u00b6\n\n\nSet the content of the packaging element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewPackaging\n\n\nclass java.lang.String\n\n\nThe packaging that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetParentArtifactId\n\u00b6\n\n\nSet the content of the parent artifactId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentArtifactId\n\n\nclass java.lang.String\n\n\nThe parent artifactId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetParentGroupId\n\u00b6\n\n\nSet the content of the parent groupId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentGroupId\n\n\nclass java.lang.String\n\n\nThe parent groupId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetParentVersion\n\u00b6\n\n\nSet the content of the parent version element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentVersion\n\n\nclass java.lang.String\n\n\nThe parent version that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetProjectName\n\u00b6\n\n\nAdd or replace project name\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewName\n\n\nclass java.lang.String\n\n\nThe name being set\n\n\n\n\n\n\n\n\nOperation: \nsetTextContentFor\n\u00b6\n\n\nSet the text content for a specific xpath expression\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to use to set the test content\n\n\n\n\n\n\nnewContent\n\n\nclass java.lang.String\n\n\nNew text content for the XPath\n\n\n\n\n\n\n\n\nOperation: \nsetVersion\n\u00b6\n\n\nSet the content of the version element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe version that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from\n\n\n\n\n\n\n\n\nOperation: \nversion\n\u00b6\n\n\nReturn the content of the version element\n\n\nParameters\n\u00b6\n\n\nNone",
            "title": "EveryPom"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#type-everypom",
            "text": "POM XML file",
            "title": "Type: EveryPom"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#everypom-operations",
            "text": "",
            "title": "EveryPom Operations"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-addchildnode",
            "text": "Add the specified content under the indicated xpath-selected node",
            "title": "Operation: addChildNode"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath selector for the node to add the content under    newNode  class java.lang.String  The new node name to be added as a child    nodeContent  class java.lang.String  XML document to be added under the indicated node",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-addorreplacebuildplugin",
            "text": "Adds or replaces a build plugin",
            "title": "Operation: addOrReplaceBuildPlugin"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_1",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the build plugin\u2019s groupId    artifactId  class java.lang.String  The value of the build plugin\u2019s artifactId    pluginContent  class java.lang.String  The XML content for the plugin",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-addorreplacedependency",
            "text": "Add or replace a dependency",
            "title": "Operation: addOrReplaceDependency"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_2",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId    scope  class java.lang.String  The value of the dependency\u2019s scope",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-addorreplacedependency_1",
            "text": "Add or replace a dependency",
            "title": "Operation: addOrReplaceDependency"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_3",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-addorreplacedependencymanagementdependency",
            "text": "Adds or replaces a dependency management dependency",
            "title": "Operation: addOrReplaceDependencyManagementDependency"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_4",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId    dependencyContent  class java.lang.String  The XML content for the dependency",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-addorreplacedependencyofversion",
            "text": "Add or replace a dependency, providing version and scope",
            "title": "Operation: addOrReplaceDependencyOfVersion"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_5",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId    newVersion  class java.lang.String  The value of the dependency\u2019s version to be set    scope  class java.lang.String  The value of the dependency\u2019s scope to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-addorreplacedependencyofversion_1",
            "text": "Add or replace a dependency, providing version and scope",
            "title": "Operation: addOrReplaceDependencyOfVersion"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_6",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId    newVersion  class java.lang.String  The value of the dependency\u2019s version to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-addorreplacedependencyscope",
            "text": "Add or replace a dependency\u2019s scope",
            "title": "Operation: addOrReplaceDependencyScope"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_7",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId    newScope  class java.lang.String  The new value of the dependency\u2019s scope to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-addorreplacedependencyversion",
            "text": "Add or replace a dependency\u2019s version",
            "title": "Operation: addOrReplaceDependencyVersion"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_8",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId    newVersion  class java.lang.String  The value of the dependency\u2019s version to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-addorreplacenode",
            "text": "Adds or replaces a node",
            "title": "Operation: addOrReplaceNode"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_9",
            "text": "Name  Type  Description      parentNodeXPath  class java.lang.String  The XPath selector for the parent node    xPathOfNodeToReplace  class java.lang.String  The XPath selector for the node to replace    newNode  class java.lang.String  The name of the node being placed    nodeContent  class java.lang.String  The content of the node being placed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-addorreplaceproperty",
            "text": "Add or replace a property",
            "title": "Operation: addOrReplaceProperty"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_10",
            "text": "Name  Type  Description      propertyName  class java.lang.String  The name of the property being set    propertyValue  class java.lang.String  The value of the property being set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-artifactid",
            "text": "Return the content of the artifactId element",
            "title": "Operation: artifactId"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_12",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-contains",
            "text": "Tests whether a node matching the given xpath expression is present",
            "title": "Operation: contains"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_14",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to test against for the presence of a node",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_15",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-deletenode",
            "text": "Deletes the specified node",
            "title": "Operation: deleteNode"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_16",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to the node to delete",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-dependencyscope",
            "text": "Return the value of a dependency\u2019s scope as specified by artifactId",
            "title": "Operation: dependencyScope"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_17",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency you are looking to inspect    artifactId  class java.lang.String  The artifactId of the dependency you are looking to inspect",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-dependencyversion",
            "text": "Return the value of a dependency\u2019s version as specified by artifactId",
            "title": "Operation: dependencyVersion"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_18",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency you are looking to inspect    artifactId  class java.lang.String  The artifactId of the dependency you are looking to inspect",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-description",
            "text": "Return the content of the description element",
            "title": "Operation: description"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_19",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_20",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_21",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_22",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-gettextcontentfor",
            "text": "Get the text content for a specific xpath expression",
            "title": "Operation: getTextContentFor"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_23",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to use to retrieve the test content",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-groupid",
            "text": "Return the content of the groupId element",
            "title": "Operation: groupId"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_24",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-isbuildpluginpresent",
            "text": "Return whether a build plugin is present as specified by artifactId and groupId",
            "title": "Operation: isBuildPluginPresent"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_25",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the build plugin you are looking to test the presence of    artifactId  class java.lang.String  The artifactId of the build plugin you are looking to test the presence of",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-isdependencymanagementdependencypresent",
            "text": "Return whether a dependency management dependency is present as specified by artifactId and groupId",
            "title": "Operation: isDependencyManagementDependencyPresent"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_26",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency management dependency you are looking to test the presence of    artifactId  class java.lang.String  The artifactId of the dependency management dependency you are looking to test the presence of",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-isdependencypresent",
            "text": "Return whether a dependency is present as specified by artifactId and groupId",
            "title": "Operation: isDependencyPresent"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_27",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency you are looking to test the presence of    artifactId  class java.lang.String  The artifactId of the dependency you are looking to test the presence of",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_28",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_29",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_30",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_31",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_32",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-name",
            "text": "Return the content of the name element",
            "title": "Operation: name"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_33",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_34",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_35",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-packaging",
            "text": "Return the content of the packaging element",
            "title": "Operation: packaging"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_36",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-parentartifactid",
            "text": "Return the content of the parent artifactId",
            "title": "Operation: parentArtifactId"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_37",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-parentgroupid",
            "text": "Return the content of the parent groupId",
            "title": "Operation: parentGroupId"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_38",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-parentversion",
            "text": "Return the content of the parent version",
            "title": "Operation: parentVersion"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_39",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_40",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-permissions",
            "text": "Return the file\u2019s permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_41",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_42",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-property",
            "text": "Return the value of a project property",
            "title": "Operation: property"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_43",
            "text": "Name  Type  Description      projectPropertyName  class java.lang.String  The project property you are looking to inspect",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-removedependency",
            "text": "Removes a dependency",
            "title": "Operation: removeDependency"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_44",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-removedependencyscope",
            "text": "Remove a dependency\u2019s scope",
            "title": "Operation: removeDependencyScope"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_45",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-removedependencyversion",
            "text": "Remove a dependency\u2019s version",
            "title": "Operation: removeDependencyVersion"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_46",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-removeproperty",
            "text": "Remove a property",
            "title": "Operation: removeProperty"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_47",
            "text": "Name  Type  Description      propertyName  class java.lang.String  The name of the project property being deleted",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-replaceparent",
            "text": "Set the content of the parent block",
            "title": "Operation: replaceParent"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_48",
            "text": "Name  Type  Description      newParentBlock  class java.lang.String  The parent block that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-setartifactid",
            "text": "Set the content of the artifactId element",
            "title": "Operation: setArtifactId"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_49",
            "text": "Name  Type  Description      newArtifactId  class java.lang.String  The artifactId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-setdescription",
            "text": "Set the content of the description element",
            "title": "Operation: setDescription"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_50",
            "text": "Name  Type  Description      newDescription  class java.lang.String  The description that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-setgroupid",
            "text": "Set the content of the groupId element",
            "title": "Operation: setGroupId"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_51",
            "text": "Name  Type  Description      newGroupId  class java.lang.String  The groupId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-setpackaging",
            "text": "Set the content of the packaging element",
            "title": "Operation: setPackaging"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_52",
            "text": "Name  Type  Description      newPackaging  class java.lang.String  The packaging that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-setparentartifactid",
            "text": "Set the content of the parent artifactId element",
            "title": "Operation: setParentArtifactId"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_53",
            "text": "Name  Type  Description      newParentArtifactId  class java.lang.String  The parent artifactId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-setparentgroupid",
            "text": "Set the content of the parent groupId element",
            "title": "Operation: setParentGroupId"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_54",
            "text": "Name  Type  Description      newParentGroupId  class java.lang.String  The parent groupId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-setparentversion",
            "text": "Set the content of the parent version element",
            "title": "Operation: setParentVersion"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_55",
            "text": "Name  Type  Description      newParentVersion  class java.lang.String  The parent version that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-setprojectname",
            "text": "Add or replace project name",
            "title": "Operation: setProjectName"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_56",
            "text": "Name  Type  Description      newName  class java.lang.String  The name being set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-settextcontentfor",
            "text": "Set the text content for a specific xpath expression",
            "title": "Operation: setTextContentFor"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_57",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to use to set the test content    newContent  class java.lang.String  New text content for the XPath",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-setversion",
            "text": "Set the content of the version element",
            "title": "Operation: setVersion"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_58",
            "text": "Name  Type  Description      newVersion  class java.lang.String  The version that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_59",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#operation-version",
            "text": "Return the content of the version element",
            "title": "Operation: version"
        },
        {
            "location": "/reference/rug/extensions/every-pom/#parameters_60",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/",
            "text": "Type: \nFile\n\u00b6\n\n\nType for a file within a project.\n\n\nFile\n Operations\n\u00b6\n\n\nOperation: \nappend\n\u00b6\n\n\nAppend the given content to the file\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to append\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontains\n\u00b6\n\n\nDoes the file content contain the given string?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwhat\n\n\nclass java.lang.String\n\n\nThe string to use when looking for it in the file\n\n\n\n\n\n\n\n\nOperation: \ncontainsMatch\n\u00b6\n\n\nDoes the file content contain a match for the given regex\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to look for in the file\u2019s content\n\n\n\n\n\n\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfindMatches\n\u00b6\n\n\nReturn all matches for the given regexp in this file\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to search for\n\n\n\n\n\n\n\n\nOperation: \nfirstMatch\n\u00b6\n\n\nReturn the first match for the given regex, or the empty string if not found. Call containsMatch first to check presence.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to search for\n\n\n\n\n\n\n\n\nOperation: \nisJava\n\u00b6\n\n\nIs this a Java file?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmustContain\n\u00b6\n\n\nIf the file already contains the specified text, does nothing. Otherwise appends it to the file\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content that the file will contain\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nName of the file, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnameContains\n\u00b6\n\n\nDoes the file name (not path) contain the given string?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwhat\n\n\nclass java.lang.String\n\n\nThe string to use when looking for it in the file name or path\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file\u2019s permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprepend\n\u00b6\n\n\nPrepend the given content to the file\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to prepend to the file\n\n\n\n\n\n\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nregexpReplace\n\u00b6\n\n\nReplace all occurrences of the given regexp in this file\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to search for\n\n\n\n\n\n\nreplaceWith\n\n\nclass java.lang.String\n\n\nThe string to replace matching expressions with\n\n\n\n\n\n\n\n\nOperation: \nreplace\n\u00b6\n\n\nReplace all instances of the given literal string in this file\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to search for\n\n\n\n\n\n\nreplaceWith\n\n\nclass java.lang.String\n\n\nThe string to replace the matches with\n\n\n\n\n\n\n\n\nOperation: \nsetContent\n\u00b6\n\n\nSet entire file content to new string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewContent\n\n\nclass java.lang.String\n\n\nThe content to set the file to\n\n\n\n\n\n\n\n\nOperation: \nsetName\n\u00b6\n\n\nSet the file name, not path, to the given value\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe name to set the file to\n\n\n\n\n\n\n\n\nOperation: \nsetPath\n\u00b6\n\n\nChange the path to the given value. Path should use forward slashes to denote directories\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewPath\n\n\nclass java.lang.String\n\n\nThe path to change the file to\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from",
            "title": "File"
        },
        {
            "location": "/reference/rug/extensions/file/#type-file",
            "text": "Type for a file within a project.",
            "title": "Type: File"
        },
        {
            "location": "/reference/rug/extensions/file/#file-operations",
            "text": "",
            "title": "File Operations"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-append",
            "text": "Append the given content to the file",
            "title": "Operation: append"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to append",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_1",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-contains",
            "text": "Does the file content contain the given string?",
            "title": "Operation: contains"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_3",
            "text": "Name  Type  Description      what  class java.lang.String  The string to use when looking for it in the file",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-containsmatch",
            "text": "Does the file content contain a match for the given regex",
            "title": "Operation: containsMatch"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_4",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to look for in the file\u2019s content",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_6",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_7",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-findmatches",
            "text": "Return all matches for the given regexp in this file",
            "title": "Operation: findMatches"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_9",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to search for",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-firstmatch",
            "text": "Return the first match for the given regex, or the empty string if not found. Call containsMatch first to check presence.",
            "title": "Operation: firstMatch"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_10",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to search for",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-isjava",
            "text": "Is this a Java file?",
            "title": "Operation: isJava"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_12",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_14",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_15",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_16",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-mustcontain",
            "text": "If the file already contains the specified text, does nothing. Otherwise appends it to the file",
            "title": "Operation: mustContain"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_17",
            "text": "Name  Type  Description      content  class java.lang.String  The content that the file will contain",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-name",
            "text": "Name of the file, excluding path",
            "title": "Operation: name"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_18",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-namecontains",
            "text": "Does the file name (not path) contain the given string?",
            "title": "Operation: nameContains"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_19",
            "text": "Name  Type  Description      what  class java.lang.String  The string to use when looking for it in the file name or path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_20",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_21",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_22",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-permissions",
            "text": "Return the file\u2019s permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_23",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-prepend",
            "text": "Prepend the given content to the file",
            "title": "Operation: prepend"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_24",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to prepend to the file",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_25",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-regexpreplace",
            "text": "Replace all occurrences of the given regexp in this file",
            "title": "Operation: regexpReplace"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_26",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to search for    replaceWith  class java.lang.String  The string to replace matching expressions with",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-replace",
            "text": "Replace all instances of the given literal string in this file",
            "title": "Operation: replace"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_27",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to search for    replaceWith  class java.lang.String  The string to replace the matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-setcontent",
            "text": "Set entire file content to new string",
            "title": "Operation: setContent"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_28",
            "text": "Name  Type  Description      newContent  class java.lang.String  The content to set the file to",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-setname",
            "text": "Set the file name, not path, to the given value",
            "title": "Operation: setName"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_29",
            "text": "Name  Type  Description      name  class java.lang.String  The name to set the file to",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-setpath",
            "text": "Change the path to the given value. Path should use forward slashes to denote directories",
            "title": "Operation: setPath"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_30",
            "text": "Name  Type  Description      newPath  class java.lang.String  The path to change the file to",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/file/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference/rug/extensions/file/#parameters_31",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/",
            "text": "Type: \nJavaProject\n\u00b6\n\n\nJava project\n\n\nJavaProject\n Operations\n\u00b6\n\n\nOperation: \naddDirectory\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe name of the directory being added\n\n\n\n\n\n\nparentPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory should be created\n\n\n\n\n\n\n\n\nOperation: \naddDirectoryAndIntermediates\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndirectoryPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory and any missing intermediate directories will be created\n\n\n\n\n\n\n\n\nOperation: \naddExecutableFile\n\u00b6\n\n\nAdd the given executable file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \naddFile\n\u00b6\n\n\nAdd the given file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \nbackingArchiveProject\n\u00b6\n\n\nReturn a new Project View based on the original backing object (normally the .atomist/ directory)\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontext\n\u00b6\n\n\nProvides access additional context, such as the PathExpressionEngine\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor\u2019s backing archive to the same path in project being edited. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesOrFail\n\u00b6\n\n\nCopy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesPreservingPath\n\u00b6\n\n\nCopy the given files from the editor\u2019s backing archive under the given directory into the same directory in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesWithNewRelativePath\n\u00b6\n\n\nCopy the given files from the editor\u2019s backing archive under the given path. Take the relative paths and place under new destination path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFile\n\u00b6\n\n\nCopy the given file in the target project. It is not an error if it doesn\u2019t exist\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFileOrFail\n\u00b6\n\n\nCopy the given file in the target project. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncountFilesInDirectory\n\u00b6\n\n\nThe number of files directly in this directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteDirectory\n\u00b6\n\n\nDeletes a directory with the given path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteFile\n\u00b6\n\n\nDelete the given file from the project. Path can contain /s.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndescribeChange\n\u00b6\n\n\nDescribe a change we made to this object\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \ndirectoryExists\n\u00b6\n\n\nDoes a directory with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \neditWith\n\u00b6\n\n\nEdit with the given editor\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neditorName\n\n\nclass java.lang.String\n\n\nName of the editor to invoke\n\n\n\n\n\n\nparams\n\n\nclass java.lang.Object\n\n\nParameters to pass to the editor\n\n\n\n\n\n\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfileContains\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check\n\n\n\n\n\n\n\n\nOperation: \nfileCount\n\u00b6\n\n\nReturn the number of files in this project\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfileExists\n\u00b6\n\n\nDoes a file with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \nfileHasContent\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check against the given file\n\n\n\n\n\n\n\n\nOperation: \nfiles\n\u00b6\n\n\nFiles in this archive\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfindFile\n\u00b6\n\n\nFind file with the given path. Return null if not found.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nPath of the file we want\n\n\n\n\n\n\n\n\nOperation: \nisMaven\n\u00b6\n\n\nIs this a Maven project?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisSpring\n\u00b6\n\n\nIs this a Spring project?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisSpringBoot\n\u00b6\n\n\nIs this a Spring Boot project?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \njavaFileCount\n\u00b6\n\n\nReturn the number of Java files in this module\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmerge\n\u00b6\n\n\nMerge the given template to the given output path.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplate\n\n\nclass java.lang.String\n\n\nThe name of the template within the backing Rug archive, under /.atomist / templates\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path that will be the merged path within the output project.\n\n\n\n\n\n\nparameters\n\n\nclass java.lang.Object\n\n\nParameters\n\n\n\n\n\n\n\n\nOperation: \nmergeTemplates\n\u00b6\n\n\nMerge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplatesPath\n\n\nclass java.lang.String\n\n\nSource template path where content will be used to merge into target project\n\n\n\n\n\n\noutputPath\n\n\nclass java.lang.String\n\n\nThe destination path within the destination project\n\n\n\n\n\n\nic\n\n\nclass java.lang.Object\n\n\nParameters to the template\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmoveUnder\n\u00b6\n\n\nMove the contents of this project under the given path, preserving its present path under that\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe root path to move the file to\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the name of the project. If it\u2019s in GitHub, it will be the repo name. If it\u2019s on the local filesystem it will be the directory name\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npackages\n\u00b6\n\n\nList the packages in this project\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nprojects\n\u00b6\n\n\nDon\u2019t use. Merely intended to simplify the life of the Rug to TypeScript transpiler.\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nregexpReplace\n\u00b6\n\n\nReplace all occurrences of the given regular expression in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nrenamePackage\n\u00b6\n\n\nRename the given package. All package under it will also be renamed\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noldPackage\n\n\nclass java.lang.String\n\n\nOld package name\n\n\n\n\n\n\nnewPackage\n\n\nclass java.lang.String\n\n\nThe new package name\n\n\n\n\n\n\n\n\nOperation: \nreplace\n\u00b6\n\n\nReplace all occurrences of the given string literal in this project. Use with care!\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to look for\n\n\n\n\n\n\nreplaceWith\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nreplaceInPath\n\u00b6\n\n\nGlobally replace all occurrences of the given string literal in file paths in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace in the paths if found",
            "title": "JavaProject"
        },
        {
            "location": "/reference/rug/extensions/java-project/#type-javaproject",
            "text": "Java project",
            "title": "Type: JavaProject"
        },
        {
            "location": "/reference/rug/extensions/java-project/#javaproject-operations",
            "text": "",
            "title": "JavaProject Operations"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-adddirectory",
            "text": "Create a directory",
            "title": "Operation: addDirectory"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters",
            "text": "Name  Type  Description      name  class java.lang.String  The name of the directory being added    parentPath  class java.lang.String  The path under which the directory should be created",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-adddirectoryandintermediates",
            "text": "Create a directory",
            "title": "Operation: addDirectoryAndIntermediates"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_1",
            "text": "Name  Type  Description      directoryPath  class java.lang.String  The path under which the directory and any missing intermediate directories will be created",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-addexecutablefile",
            "text": "Add the given executable file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addExecutableFile"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_2",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-addfile",
            "text": "Add the given file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addFile"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_3",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-backingarchiveproject",
            "text": "Return a new Project View based on the original backing object (normally the .atomist/ directory)",
            "title": "Operation: backingArchiveProject"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_4",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_5",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-context",
            "text": "Provides access additional context, such as the PathExpressionEngine",
            "title": "Operation: context"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-copyeditorbackingfileorfail",
            "text": "Copy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_8",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-copyeditorbackingfileorfail_1",
            "text": "Copy the given file from the editor\u2019s backing archive to the same path in project being edited. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_9",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-copyeditorbackingfilesorfail",
            "text": "Copy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyEditorBackingFilesOrFail"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_10",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-copyeditorbackingfilespreservingpath",
            "text": "Copy the given files from the editor\u2019s backing archive under the given directory into the same directory in the project being edited.",
            "title": "Operation: copyEditorBackingFilesPreservingPath"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_11",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-copyeditorbackingfileswithnewrelativepath",
            "text": "Copy the given files from the editor\u2019s backing archive under the given path. Take the relative paths and place under new destination path",
            "title": "Operation: copyEditorBackingFilesWithNewRelativePath"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_12",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-copyfile",
            "text": "Copy the given file in the target project. It is not an error if it doesn\u2019t exist",
            "title": "Operation: copyFile"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_13",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-copyfileorfail",
            "text": "Copy the given file in the target project. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyFileOrFail"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_14",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-countfilesindirectory",
            "text": "The number of files directly in this directory",
            "title": "Operation: countFilesInDirectory"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_15",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-deletedirectory",
            "text": "Deletes a directory with the given path",
            "title": "Operation: deleteDirectory"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_16",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-deletefile",
            "text": "Delete the given file from the project. Path can contain /s.",
            "title": "Operation: deleteFile"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_17",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-describechange",
            "text": "Describe a change we made to this object",
            "title": "Operation: describeChange"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_18",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-directoryexists",
            "text": "Does a directory with the given path exist?",
            "title": "Operation: directoryExists"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_19",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-editwith",
            "text": "Edit with the given editor",
            "title": "Operation: editWith"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_20",
            "text": "Name  Type  Description      editorName  class java.lang.String  Name of the editor to invoke    params  class java.lang.Object  Parameters to pass to the editor",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_21",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_22",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-filecontains",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileContains"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_23",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-filecount",
            "text": "Return the number of files in this project",
            "title": "Operation: fileCount"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_24",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-fileexists",
            "text": "Does a file with the given path exist?",
            "title": "Operation: fileExists"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_25",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-filehascontent",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileHasContent"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_26",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check against the given file",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-files",
            "text": "Files in this archive",
            "title": "Operation: files"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_27",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-findfile",
            "text": "Find file with the given path. Return null if not found.",
            "title": "Operation: findFile"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_28",
            "text": "Name  Type  Description      path  class java.lang.String  Path of the file we want",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-ismaven",
            "text": "Is this a Maven project?",
            "title": "Operation: isMaven"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_29",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-isspring",
            "text": "Is this a Spring project?",
            "title": "Operation: isSpring"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_30",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-isspringboot",
            "text": "Is this a Spring Boot project?",
            "title": "Operation: isSpringBoot"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_31",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-javafilecount",
            "text": "Return the number of Java files in this module",
            "title": "Operation: javaFileCount"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_32",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_33",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-merge",
            "text": "Merge the given template to the given output path.",
            "title": "Operation: merge"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_34",
            "text": "Name  Type  Description      template  class java.lang.String  The name of the template within the backing Rug archive, under /.atomist / templates    path  class java.lang.String  The path that will be the merged path within the output project.    parameters  class java.lang.Object  Parameters",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-mergetemplates",
            "text": "Merge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.",
            "title": "Operation: mergeTemplates"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_35",
            "text": "Name  Type  Description      templatesPath  class java.lang.String  Source template path where content will be used to merge into target project    outputPath  class java.lang.String  The destination path within the destination project    ic  class java.lang.Object  Parameters to the template",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_36",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-moveunder",
            "text": "Move the contents of this project under the given path, preserving its present path under that",
            "title": "Operation: moveUnder"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_37",
            "text": "Name  Type  Description      path  class java.lang.String  The root path to move the file to",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-name",
            "text": "Return the name of the project. If it\u2019s in GitHub, it will be the repo name. If it\u2019s on the local filesystem it will be the directory name",
            "title": "Operation: name"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_38",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_39",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_40",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-packages",
            "text": "List the packages in this project",
            "title": "Operation: packages"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_41",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_42",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-projects",
            "text": "Don\u2019t use. Merely intended to simplify the life of the Rug to TypeScript transpiler.",
            "title": "Operation: projects"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_43",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-regexpreplace",
            "text": "Replace all occurrences of the given regular expression in this project",
            "title": "Operation: regexpReplace"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_44",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to search for    replacement  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-renamepackage",
            "text": "Rename the given package. All package under it will also be renamed",
            "title": "Operation: renamePackage"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_45",
            "text": "Name  Type  Description      oldPackage  class java.lang.String  Old package name    newPackage  class java.lang.String  The new package name",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-replace",
            "text": "Replace all occurrences of the given string literal in this project. Use with care!",
            "title": "Operation: replace"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_46",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to look for    replaceWith  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-project/#operation-replaceinpath",
            "text": "Globally replace all occurrences of the given string literal in file paths in this project",
            "title": "Operation: replaceInPath"
        },
        {
            "location": "/reference/rug/extensions/java-project/#parameters_47",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to search for    replacement  class java.lang.String  The string to replace in the paths if found",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/",
            "text": "Type: \nJavaSource\n\u00b6\n\n\nJava source file\n\n\nJavaSource\n Operations\n\u00b6\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmovePackage\n\u00b6\n\n\nMove the source file to the given package\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewPackage\n\n\nclass java.lang.String\n\n\nThe package to move the source file to\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file\u2019s permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npkg\n\u00b6\n\n\nReturn the package name\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \ntypeCount\n\u00b6\n\n\nCount the types in this source file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from",
            "title": "JavaSource"
        },
        {
            "location": "/reference/rug/extensions/java-source/#type-javasource",
            "text": "Java source file",
            "title": "Type: JavaSource"
        },
        {
            "location": "/reference/rug/extensions/java-source/#javasource-operations",
            "text": "",
            "title": "JavaSource Operations"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_1",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_8",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-movepackage",
            "text": "Move the source file to the given package",
            "title": "Operation: movePackage"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_11",
            "text": "Name  Type  Description      newPackage  class java.lang.String  The package to move the source file to",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_12",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_14",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-permissions",
            "text": "Return the file\u2019s permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_15",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-pkg",
            "text": "Return the package name",
            "title": "Operation: pkg"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_16",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_17",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-typecount",
            "text": "Count the types in this source file",
            "title": "Operation: typeCount"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_18",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-source/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference/rug/extensions/java-source/#parameters_19",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/",
            "text": "Type: \nJavaType\n\u00b6\n\n\nJava class\n\n\nJavaType\n Operations\n\u00b6\n\n\nOperation: \naddAnnotation\n\u00b6\n\n\nAnnotate the element with the given annotation\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npkg\n\n\nclass java.lang.String\n\n\nPackage where the annotation is sourced\n\n\n\n\n\n\nannotation\n\n\nclass java.lang.String\n\n\nThe annotation to add\n\n\n\n\n\n\n\n\nOperation: \naddImport\n\u00b6\n\n\nAdd an import to the containing Java source\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfqn\n\n\nclass java.lang.String\n\n\nThe fully qualified name of the import\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nhasAnnotation\n\u00b6\n\n\nDoes the element have the given annotation?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nannotation\n\n\nclass java.lang.String\n\n\nThe string name of the annotation to look for\n\n\n\n\n\n\n\n\nOperation: \ninheritsFrom\n\u00b6\n\n\nDoes this type extend the given type?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsimpleName\n\n\nclass java.lang.String\n\n\nSimple name of the ancestor class we\u2019re looking for\n\n\n\n\n\n\n\n\nOperation: \nisAbstract\n\u00b6\n\n\nIs this abstract?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisInterface\n\u00b6\n\n\nIs this an interface?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nLine count\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmovePackage\n\u00b6\n\n\nMove the type to the given package\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewPackage\n\n\nclass java.lang.String\n\n\nThe package to move the type to\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the name of the type\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npkg\n\u00b6\n\n\nReturn the package\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nremoveAnnotation\n\u00b6\n\n\nRemove annotation from the element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npkg\n\n\nclass java.lang.String\n\n\nPackage where the annotation is sourced\n\n\n\n\n\n\nannotation\n\n\nclass java.lang.String\n\n\nThe annotation to remove\n\n\n\n\n\n\n\n\nOperation: \nremoveImport\n\u00b6\n\n\nRemove an import from the containing Java source\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfqn\n\n\nclass java.lang.String\n\n\nThe fully qualified name of the import\n\n\n\n\n\n\n\n\nOperation: \nrename\n\u00b6\n\n\nRename the type\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewName\n\n\nclass java.lang.String\n\n\nThe new name of the type\n\n\n\n\n\n\n\n\nOperation: \nrenameByReplace\n\u00b6\n\n\nRename the type by replacing a pattern in the name\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget\n\n\nclass java.lang.String\n\n\nThe name of the type to replace\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe replacement pattern\n\n\n\n\n\n\n\n\nOperation: \nsetHeaderComment\n\u00b6\n\n\nAdd or replace header comment for this type\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncomment\n\n\nclass java.lang.String\n\n\nNew header comment to set",
            "title": "JavaType"
        },
        {
            "location": "/reference/rug/extensions/java-type/#type-javatype",
            "text": "Java class",
            "title": "Type: JavaType"
        },
        {
            "location": "/reference/rug/extensions/java-type/#javatype-operations",
            "text": "",
            "title": "JavaType Operations"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-addannotation",
            "text": "Annotate the element with the given annotation",
            "title": "Operation: addAnnotation"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters",
            "text": "Name  Type  Description      pkg  class java.lang.String  Package where the annotation is sourced    annotation  class java.lang.String  The annotation to add",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-addimport",
            "text": "Add an import to the containing Java source",
            "title": "Operation: addImport"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_1",
            "text": "Name  Type  Description      fqn  class java.lang.String  The fully qualified name of the import",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_2",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_3",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_4",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_5",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-hasannotation",
            "text": "Does the element have the given annotation?",
            "title": "Operation: hasAnnotation"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_6",
            "text": "Name  Type  Description      annotation  class java.lang.String  The string name of the annotation to look for",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-inheritsfrom",
            "text": "Does this type extend the given type?",
            "title": "Operation: inheritsFrom"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_7",
            "text": "Name  Type  Description      simpleName  class java.lang.String  Simple name of the ancestor class we\u2019re looking for",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-isabstract",
            "text": "Is this abstract?",
            "title": "Operation: isAbstract"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-isinterface",
            "text": "Is this an interface?",
            "title": "Operation: isInterface"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-linecount",
            "text": "Line count",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_10",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_11",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_12",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-movepackage",
            "text": "Move the type to the given package",
            "title": "Operation: movePackage"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_13",
            "text": "Name  Type  Description      newPackage  class java.lang.String  The package to move the type to",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-name",
            "text": "Return the name of the type",
            "title": "Operation: name"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_14",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_15",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_16",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-pkg",
            "text": "Return the package",
            "title": "Operation: pkg"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_17",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_18",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-removeannotation",
            "text": "Remove annotation from the element",
            "title": "Operation: removeAnnotation"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_19",
            "text": "Name  Type  Description      pkg  class java.lang.String  Package where the annotation is sourced    annotation  class java.lang.String  The annotation to remove",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-removeimport",
            "text": "Remove an import from the containing Java source",
            "title": "Operation: removeImport"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_20",
            "text": "Name  Type  Description      fqn  class java.lang.String  The fully qualified name of the import",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-rename",
            "text": "Rename the type",
            "title": "Operation: rename"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_21",
            "text": "Name  Type  Description      newName  class java.lang.String  The new name of the type",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-renamebyreplace",
            "text": "Rename the type by replacing a pattern in the name",
            "title": "Operation: renameByReplace"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_22",
            "text": "Name  Type  Description      target  class java.lang.String  The name of the type to replace    replacement  class java.lang.String  The replacement pattern",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/java-type/#operation-setheadercomment",
            "text": "Add or replace header comment for this type",
            "title": "Operation: setHeaderComment"
        },
        {
            "location": "/reference/rug/extensions/java-type/#parameters_23",
            "text": "Name  Type  Description      comment  class java.lang.String  New header comment to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/",
            "text": "Type: \nJson\n\u00b6\n\n\nJSON file\n\n\nJson\n Operations\n\u00b6\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file\u2019s permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from",
            "title": "Json"
        },
        {
            "location": "/reference/rug/extensions/json/#type-json",
            "text": "JSON file",
            "title": "Type: Json"
        },
        {
            "location": "/reference/rug/extensions/json/#json-operations",
            "text": "",
            "title": "Json Operations"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_1",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_8",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_12",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-permissions",
            "text": "Return the file\u2019s permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_14",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_15",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/json/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference/rug/extensions/json/#parameters_16",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/line/",
            "text": "Type: \nLine\n\u00b6\n\n\nRepresents a line within a text file\n\n\nLine\n Operations\n\u00b6\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn this line\u2019s content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnum\n\u00b6\n\n\nLine number\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nupdate\n\u00b6\n\n\nUpdate this line\u2019s content\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ns2\n\n\nclass java.lang.String\n\n\nThe content to update this line to",
            "title": "Line"
        },
        {
            "location": "/reference/rug/extensions/line/#type-line",
            "text": "Represents a line within a text file",
            "title": "Type: Line"
        },
        {
            "location": "/reference/rug/extensions/line/#line-operations",
            "text": "",
            "title": "Line Operations"
        },
        {
            "location": "/reference/rug/extensions/line/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/line/#parameters",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/line/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/line/#parameters_1",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/line/#operation-content",
            "text": "Return this line\u2019s content",
            "title": "Operation: content"
        },
        {
            "location": "/reference/rug/extensions/line/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/line/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/line/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/line/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/line/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/line/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/line/#parameters_5",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/line/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/line/#parameters_6",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/line/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/line/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/line/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/line/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/line/#operation-num",
            "text": "Line number",
            "title": "Operation: num"
        },
        {
            "location": "/reference/rug/extensions/line/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/line/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/line/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/line/#operation-update",
            "text": "Update this line\u2019s content",
            "title": "Operation: update"
        },
        {
            "location": "/reference/rug/extensions/line/#parameters_11",
            "text": "Name  Type  Description      s2  class java.lang.String  The content to update this line to",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/",
            "text": "Type: \nPom\n\u00b6\n\n\nPOM XML file\n\n\nPom\n Operations\n\u00b6\n\n\nOperation: \naddChildNode\n\u00b6\n\n\nAdd the specified content under the indicated xpath-selected node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath selector for the node to add the content under\n\n\n\n\n\n\nnewNode\n\n\nclass java.lang.String\n\n\nThe new node name to be added as a child\n\n\n\n\n\n\nnodeContent\n\n\nclass java.lang.String\n\n\nXML document to be added under the indicated node\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceBuildPlugin\n\u00b6\n\n\nAdds or replaces a build plugin\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the build plugin\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the build plugin\u2019s artifactId\n\n\n\n\n\n\npluginContent\n\n\nclass java.lang.String\n\n\nThe XML content for the plugin\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependency\n\u00b6\n\n\nAdd or replace a dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\nscope\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s scope\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependency\n\u00b6\n\n\nAdd or replace a dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyManagementDependency\n\u00b6\n\n\nAdds or replaces a dependency management dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\ndependencyContent\n\n\nclass java.lang.String\n\n\nThe XML content for the dependency\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyOfVersion\n\u00b6\n\n\nAdd or replace a dependency, providing version and scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s version to be set\n\n\n\n\n\n\nscope\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s scope to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyOfVersion\n\u00b6\n\n\nAdd or replace a dependency, providing version and scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s version to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyScope\n\u00b6\n\n\nAdd or replace a dependency\u2019s scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\nnewScope\n\n\nclass java.lang.String\n\n\nThe new value of the dependency\u2019s scope to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceDependencyVersion\n\u00b6\n\n\nAdd or replace a dependency\u2019s version\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s version to be set\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceNode\n\u00b6\n\n\nAdds or replaces a node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nparentNodeXPath\n\n\nclass java.lang.String\n\n\nThe XPath selector for the parent node\n\n\n\n\n\n\nxPathOfNodeToReplace\n\n\nclass java.lang.String\n\n\nThe XPath selector for the node to replace\n\n\n\n\n\n\nnewNode\n\n\nclass java.lang.String\n\n\nThe name of the node being placed\n\n\n\n\n\n\nnodeContent\n\n\nclass java.lang.String\n\n\nThe content of the node being placed\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceProperty\n\u00b6\n\n\nAdd or replace a property\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npropertyName\n\n\nclass java.lang.String\n\n\nThe name of the property being set\n\n\n\n\n\n\npropertyValue\n\n\nclass java.lang.String\n\n\nThe value of the property being set\n\n\n\n\n\n\n\n\nOperation: \nartifactId\n\u00b6\n\n\nReturn the content of the artifactId element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontains\n\u00b6\n\n\nTests whether a node matching the given xpath expression is present\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to test against for the presence of a node\n\n\n\n\n\n\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ndeleteNode\n\u00b6\n\n\nDeletes the specified node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to the node to delete\n\n\n\n\n\n\n\n\nOperation: \ndependencyScope\n\u00b6\n\n\nReturn the value of a dependency\u2019s scope as specified by artifactId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency you are looking to inspect\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency you are looking to inspect\n\n\n\n\n\n\n\n\nOperation: \ndependencyVersion\n\u00b6\n\n\nReturn the value of a dependency\u2019s version as specified by artifactId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency you are looking to inspect\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency you are looking to inspect\n\n\n\n\n\n\n\n\nOperation: \ndescription\n\u00b6\n\n\nReturn the content of the description element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ngetTextContentFor\n\u00b6\n\n\nGet the text content for a specific xpath expression\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to use to retrieve the test content\n\n\n\n\n\n\n\n\nOperation: \ngroupId\n\u00b6\n\n\nReturn the content of the groupId element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisBuildPluginPresent\n\u00b6\n\n\nReturn whether a build plugin is present as specified by artifactId and groupId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the build plugin you are looking to test the presence of\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the build plugin you are looking to test the presence of\n\n\n\n\n\n\n\n\nOperation: \nisDependencyManagementDependencyPresent\n\u00b6\n\n\nReturn whether a dependency management dependency is present as specified by artifactId and groupId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency management dependency you are looking to test the presence of\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency management dependency you are looking to test the presence of\n\n\n\n\n\n\n\n\nOperation: \nisDependencyPresent\n\u00b6\n\n\nReturn whether a dependency is present as specified by artifactId and groupId\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe groupId of the dependency you are looking to test the presence of\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe artifactId of the dependency you are looking to test the presence of\n\n\n\n\n\n\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the content of the name element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npackaging\n\u00b6\n\n\nReturn the content of the packaging element\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nparentArtifactId\n\u00b6\n\n\nReturn the content of the parent artifactId\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nparentGroupId\n\u00b6\n\n\nReturn the content of the parent groupId\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nparentVersion\n\u00b6\n\n\nReturn the content of the parent version\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file\u2019s permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nproperty\n\u00b6\n\n\nReturn the value of a project property\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nprojectPropertyName\n\n\nclass java.lang.String\n\n\nThe project property you are looking to inspect\n\n\n\n\n\n\n\n\nOperation: \nremoveDependency\n\u00b6\n\n\nRemoves a dependency\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\n\n\nOperation: \nremoveDependencyScope\n\u00b6\n\n\nRemove a dependency\u2019s scope\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\n\n\nOperation: \nremoveDependencyVersion\n\u00b6\n\n\nRemove a dependency\u2019s version\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngroupId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s groupId\n\n\n\n\n\n\nartifactId\n\n\nclass java.lang.String\n\n\nThe value of the dependency\u2019s artifactId\n\n\n\n\n\n\n\n\nOperation: \nremoveProperty\n\u00b6\n\n\nRemove a property\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npropertyName\n\n\nclass java.lang.String\n\n\nThe name of the project property being deleted\n\n\n\n\n\n\n\n\nOperation: \nreplaceParent\n\u00b6\n\n\nSet the content of the parent block\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentBlock\n\n\nclass java.lang.String\n\n\nThe parent block that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetArtifactId\n\u00b6\n\n\nSet the content of the artifactId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewArtifactId\n\n\nclass java.lang.String\n\n\nThe artifactId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetDescription\n\u00b6\n\n\nSet the content of the description element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewDescription\n\n\nclass java.lang.String\n\n\nThe description that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetGroupId\n\u00b6\n\n\nSet the content of the groupId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewGroupId\n\n\nclass java.lang.String\n\n\nThe groupId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetPackaging\n\u00b6\n\n\nSet the content of the packaging element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewPackaging\n\n\nclass java.lang.String\n\n\nThe packaging that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetParentArtifactId\n\u00b6\n\n\nSet the content of the parent artifactId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentArtifactId\n\n\nclass java.lang.String\n\n\nThe parent artifactId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetParentGroupId\n\u00b6\n\n\nSet the content of the parent groupId element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentGroupId\n\n\nclass java.lang.String\n\n\nThe parent groupId that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetParentVersion\n\u00b6\n\n\nSet the content of the parent version element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewParentVersion\n\n\nclass java.lang.String\n\n\nThe parent version that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nsetProjectName\n\u00b6\n\n\nAdd or replace project name\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewName\n\n\nclass java.lang.String\n\n\nThe name being set\n\n\n\n\n\n\n\n\nOperation: \nsetTextContentFor\n\u00b6\n\n\nSet the text content for a specific xpath expression\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to use to set the test content\n\n\n\n\n\n\nnewContent\n\n\nclass java.lang.String\n\n\nNew text content for the XPath\n\n\n\n\n\n\n\n\nOperation: \nsetVersion\n\u00b6\n\n\nSet the content of the version element\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnewVersion\n\n\nclass java.lang.String\n\n\nThe version that you are trying to set\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from\n\n\n\n\n\n\n\n\nOperation: \nversion\n\u00b6\n\n\nReturn the content of the version element\n\n\nParameters\n\u00b6\n\n\nNone",
            "title": "Pom"
        },
        {
            "location": "/reference/rug/extensions/pom/#type-pom",
            "text": "POM XML file",
            "title": "Type: Pom"
        },
        {
            "location": "/reference/rug/extensions/pom/#pom-operations",
            "text": "",
            "title": "Pom Operations"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-addchildnode",
            "text": "Add the specified content under the indicated xpath-selected node",
            "title": "Operation: addChildNode"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath selector for the node to add the content under    newNode  class java.lang.String  The new node name to be added as a child    nodeContent  class java.lang.String  XML document to be added under the indicated node",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-addorreplacebuildplugin",
            "text": "Adds or replaces a build plugin",
            "title": "Operation: addOrReplaceBuildPlugin"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_1",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the build plugin\u2019s groupId    artifactId  class java.lang.String  The value of the build plugin\u2019s artifactId    pluginContent  class java.lang.String  The XML content for the plugin",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-addorreplacedependency",
            "text": "Add or replace a dependency",
            "title": "Operation: addOrReplaceDependency"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_2",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId    scope  class java.lang.String  The value of the dependency\u2019s scope",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-addorreplacedependency_1",
            "text": "Add or replace a dependency",
            "title": "Operation: addOrReplaceDependency"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_3",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-addorreplacedependencymanagementdependency",
            "text": "Adds or replaces a dependency management dependency",
            "title": "Operation: addOrReplaceDependencyManagementDependency"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_4",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId    dependencyContent  class java.lang.String  The XML content for the dependency",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-addorreplacedependencyofversion",
            "text": "Add or replace a dependency, providing version and scope",
            "title": "Operation: addOrReplaceDependencyOfVersion"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_5",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId    newVersion  class java.lang.String  The value of the dependency\u2019s version to be set    scope  class java.lang.String  The value of the dependency\u2019s scope to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-addorreplacedependencyofversion_1",
            "text": "Add or replace a dependency, providing version and scope",
            "title": "Operation: addOrReplaceDependencyOfVersion"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_6",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId    newVersion  class java.lang.String  The value of the dependency\u2019s version to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-addorreplacedependencyscope",
            "text": "Add or replace a dependency\u2019s scope",
            "title": "Operation: addOrReplaceDependencyScope"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_7",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId    newScope  class java.lang.String  The new value of the dependency\u2019s scope to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-addorreplacedependencyversion",
            "text": "Add or replace a dependency\u2019s version",
            "title": "Operation: addOrReplaceDependencyVersion"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_8",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId    newVersion  class java.lang.String  The value of the dependency\u2019s version to be set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-addorreplacenode",
            "text": "Adds or replaces a node",
            "title": "Operation: addOrReplaceNode"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_9",
            "text": "Name  Type  Description      parentNodeXPath  class java.lang.String  The XPath selector for the parent node    xPathOfNodeToReplace  class java.lang.String  The XPath selector for the node to replace    newNode  class java.lang.String  The name of the node being placed    nodeContent  class java.lang.String  The content of the node being placed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-addorreplaceproperty",
            "text": "Add or replace a property",
            "title": "Operation: addOrReplaceProperty"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_10",
            "text": "Name  Type  Description      propertyName  class java.lang.String  The name of the property being set    propertyValue  class java.lang.String  The value of the property being set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-artifactid",
            "text": "Return the content of the artifactId element",
            "title": "Operation: artifactId"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_12",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-contains",
            "text": "Tests whether a node matching the given xpath expression is present",
            "title": "Operation: contains"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_14",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to test against for the presence of a node",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_15",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-deletenode",
            "text": "Deletes the specified node",
            "title": "Operation: deleteNode"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_16",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to the node to delete",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-dependencyscope",
            "text": "Return the value of a dependency\u2019s scope as specified by artifactId",
            "title": "Operation: dependencyScope"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_17",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency you are looking to inspect    artifactId  class java.lang.String  The artifactId of the dependency you are looking to inspect",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-dependencyversion",
            "text": "Return the value of a dependency\u2019s version as specified by artifactId",
            "title": "Operation: dependencyVersion"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_18",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency you are looking to inspect    artifactId  class java.lang.String  The artifactId of the dependency you are looking to inspect",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-description",
            "text": "Return the content of the description element",
            "title": "Operation: description"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_19",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_20",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_21",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_22",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-gettextcontentfor",
            "text": "Get the text content for a specific xpath expression",
            "title": "Operation: getTextContentFor"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_23",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to use to retrieve the test content",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-groupid",
            "text": "Return the content of the groupId element",
            "title": "Operation: groupId"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_24",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-isbuildpluginpresent",
            "text": "Return whether a build plugin is present as specified by artifactId and groupId",
            "title": "Operation: isBuildPluginPresent"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_25",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the build plugin you are looking to test the presence of    artifactId  class java.lang.String  The artifactId of the build plugin you are looking to test the presence of",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-isdependencymanagementdependencypresent",
            "text": "Return whether a dependency management dependency is present as specified by artifactId and groupId",
            "title": "Operation: isDependencyManagementDependencyPresent"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_26",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency management dependency you are looking to test the presence of    artifactId  class java.lang.String  The artifactId of the dependency management dependency you are looking to test the presence of",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-isdependencypresent",
            "text": "Return whether a dependency is present as specified by artifactId and groupId",
            "title": "Operation: isDependencyPresent"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_27",
            "text": "Name  Type  Description      groupId  class java.lang.String  The groupId of the dependency you are looking to test the presence of    artifactId  class java.lang.String  The artifactId of the dependency you are looking to test the presence of",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_28",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_29",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_30",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_31",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_32",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-name",
            "text": "Return the content of the name element",
            "title": "Operation: name"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_33",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_34",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_35",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-packaging",
            "text": "Return the content of the packaging element",
            "title": "Operation: packaging"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_36",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-parentartifactid",
            "text": "Return the content of the parent artifactId",
            "title": "Operation: parentArtifactId"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_37",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-parentgroupid",
            "text": "Return the content of the parent groupId",
            "title": "Operation: parentGroupId"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_38",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-parentversion",
            "text": "Return the content of the parent version",
            "title": "Operation: parentVersion"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_39",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_40",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-permissions",
            "text": "Return the file\u2019s permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_41",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_42",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-property",
            "text": "Return the value of a project property",
            "title": "Operation: property"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_43",
            "text": "Name  Type  Description      projectPropertyName  class java.lang.String  The project property you are looking to inspect",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-removedependency",
            "text": "Removes a dependency",
            "title": "Operation: removeDependency"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_44",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-removedependencyscope",
            "text": "Remove a dependency\u2019s scope",
            "title": "Operation: removeDependencyScope"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_45",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-removedependencyversion",
            "text": "Remove a dependency\u2019s version",
            "title": "Operation: removeDependencyVersion"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_46",
            "text": "Name  Type  Description      groupId  class java.lang.String  The value of the dependency\u2019s groupId    artifactId  class java.lang.String  The value of the dependency\u2019s artifactId",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-removeproperty",
            "text": "Remove a property",
            "title": "Operation: removeProperty"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_47",
            "text": "Name  Type  Description      propertyName  class java.lang.String  The name of the project property being deleted",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-replaceparent",
            "text": "Set the content of the parent block",
            "title": "Operation: replaceParent"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_48",
            "text": "Name  Type  Description      newParentBlock  class java.lang.String  The parent block that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-setartifactid",
            "text": "Set the content of the artifactId element",
            "title": "Operation: setArtifactId"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_49",
            "text": "Name  Type  Description      newArtifactId  class java.lang.String  The artifactId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-setdescription",
            "text": "Set the content of the description element",
            "title": "Operation: setDescription"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_50",
            "text": "Name  Type  Description      newDescription  class java.lang.String  The description that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-setgroupid",
            "text": "Set the content of the groupId element",
            "title": "Operation: setGroupId"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_51",
            "text": "Name  Type  Description      newGroupId  class java.lang.String  The groupId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-setpackaging",
            "text": "Set the content of the packaging element",
            "title": "Operation: setPackaging"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_52",
            "text": "Name  Type  Description      newPackaging  class java.lang.String  The packaging that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-setparentartifactid",
            "text": "Set the content of the parent artifactId element",
            "title": "Operation: setParentArtifactId"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_53",
            "text": "Name  Type  Description      newParentArtifactId  class java.lang.String  The parent artifactId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-setparentgroupid",
            "text": "Set the content of the parent groupId element",
            "title": "Operation: setParentGroupId"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_54",
            "text": "Name  Type  Description      newParentGroupId  class java.lang.String  The parent groupId that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-setparentversion",
            "text": "Set the content of the parent version element",
            "title": "Operation: setParentVersion"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_55",
            "text": "Name  Type  Description      newParentVersion  class java.lang.String  The parent version that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-setprojectname",
            "text": "Add or replace project name",
            "title": "Operation: setProjectName"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_56",
            "text": "Name  Type  Description      newName  class java.lang.String  The name being set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-settextcontentfor",
            "text": "Set the text content for a specific xpath expression",
            "title": "Operation: setTextContentFor"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_57",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to use to set the test content    newContent  class java.lang.String  New text content for the XPath",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-setversion",
            "text": "Set the content of the version element",
            "title": "Operation: setVersion"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_58",
            "text": "Name  Type  Description      newVersion  class java.lang.String  The version that you are trying to set",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_59",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/pom/#operation-version",
            "text": "Return the content of the version element",
            "title": "Operation: version"
        },
        {
            "location": "/reference/rug/extensions/pom/#parameters_60",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/",
            "text": "Type: \nProject\n\u00b6\n\n\nType for a project. Supports global operations. Consider using file and other lower types by preference as projectoperations can be inefficient.\n\n\nProject\n Operations\n\u00b6\n\n\nOperation: \naddDirectory\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe name of the directory being added\n\n\n\n\n\n\nparentPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory should be created\n\n\n\n\n\n\n\n\nOperation: \naddDirectoryAndIntermediates\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndirectoryPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory and any missing intermediate directories will be created\n\n\n\n\n\n\n\n\nOperation: \naddExecutableFile\n\u00b6\n\n\nAdd the given executable file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \naddFile\n\u00b6\n\n\nAdd the given file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \nbackingArchiveProject\n\u00b6\n\n\nReturn a new Project View based on the original backing object (normally the .atomist/ directory)\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontext\n\u00b6\n\n\nProvides access additional context, such as the PathExpressionEngine\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor\u2019s backing archive to the same path in project being edited. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesOrFail\n\u00b6\n\n\nCopy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesPreservingPath\n\u00b6\n\n\nCopy the given files from the editor\u2019s backing archive under the given directory into the same directory in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesWithNewRelativePath\n\u00b6\n\n\nCopy the given files from the editor\u2019s backing archive under the given path. Take the relative paths and place under new destination path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFile\n\u00b6\n\n\nCopy the given file in the target project. It is not an error if it doesn\u2019t exist\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFileOrFail\n\u00b6\n\n\nCopy the given file in the target project. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncountFilesInDirectory\n\u00b6\n\n\nThe number of files directly in this directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteDirectory\n\u00b6\n\n\nDeletes a directory with the given path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteFile\n\u00b6\n\n\nDelete the given file from the project. Path can contain /s.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndescribeChange\n\u00b6\n\n\nDescribe a change we made to this object\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \ndirectoryExists\n\u00b6\n\n\nDoes a directory with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \neditWith\n\u00b6\n\n\nEdit with the given editor\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neditorName\n\n\nclass java.lang.String\n\n\nName of the editor to invoke\n\n\n\n\n\n\nparams\n\n\nclass java.lang.Object\n\n\nParameters to pass to the editor\n\n\n\n\n\n\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfileContains\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check\n\n\n\n\n\n\n\n\nOperation: \nfileCount\n\u00b6\n\n\nReturn the number of files in this project\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfileExists\n\u00b6\n\n\nDoes a file with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \nfileHasContent\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check against the given file\n\n\n\n\n\n\n\n\nOperation: \nfiles\n\u00b6\n\n\nFiles in this archive\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfindFile\n\u00b6\n\n\nFind file with the given path. Return null if not found.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nPath of the file we want\n\n\n\n\n\n\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmerge\n\u00b6\n\n\nMerge the given template to the given output path.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplate\n\n\nclass java.lang.String\n\n\nThe name of the template within the backing Rug archive, under /.atomist / templates\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path that will be the merged path within the output project.\n\n\n\n\n\n\nparameters\n\n\nclass java.lang.Object\n\n\nParameters\n\n\n\n\n\n\n\n\nOperation: \nmergeTemplates\n\u00b6\n\n\nMerge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplatesPath\n\n\nclass java.lang.String\n\n\nSource template path where content will be used to merge into target project\n\n\n\n\n\n\noutputPath\n\n\nclass java.lang.String\n\n\nThe destination path within the destination project\n\n\n\n\n\n\nic\n\n\nclass java.lang.Object\n\n\nParameters to the template\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmoveUnder\n\u00b6\n\n\nMove the contents of this project under the given path, preserving its present path under that\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe root path to move the file to\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the name of the project. If it\u2019s in GitHub, it will be the repo name. If it\u2019s on the local filesystem it will be the directory name\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nprojects\n\u00b6\n\n\nDon\u2019t use. Merely intended to simplify the life of the Rug to TypeScript transpiler.\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nregexpReplace\n\u00b6\n\n\nReplace all occurrences of the given regular expression in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nreplace\n\u00b6\n\n\nReplace all occurrences of the given string literal in this project. Use with care!\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to look for\n\n\n\n\n\n\nreplaceWith\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nreplaceInPath\n\u00b6\n\n\nGlobally replace all occurrences of the given string literal in file paths in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace in the paths if found",
            "title": "Project"
        },
        {
            "location": "/reference/rug/extensions/project/#type-project",
            "text": "Type for a project. Supports global operations. Consider using file and other lower types by preference as projectoperations can be inefficient.",
            "title": "Type: Project"
        },
        {
            "location": "/reference/rug/extensions/project/#project-operations",
            "text": "",
            "title": "Project Operations"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-adddirectory",
            "text": "Create a directory",
            "title": "Operation: addDirectory"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters",
            "text": "Name  Type  Description      name  class java.lang.String  The name of the directory being added    parentPath  class java.lang.String  The path under which the directory should be created",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-adddirectoryandintermediates",
            "text": "Create a directory",
            "title": "Operation: addDirectoryAndIntermediates"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_1",
            "text": "Name  Type  Description      directoryPath  class java.lang.String  The path under which the directory and any missing intermediate directories will be created",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-addexecutablefile",
            "text": "Add the given executable file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addExecutableFile"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_2",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-addfile",
            "text": "Add the given file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addFile"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_3",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-backingarchiveproject",
            "text": "Return a new Project View based on the original backing object (normally the .atomist/ directory)",
            "title": "Operation: backingArchiveProject"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_4",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_5",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-context",
            "text": "Provides access additional context, such as the PathExpressionEngine",
            "title": "Operation: context"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-copyeditorbackingfileorfail",
            "text": "Copy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_8",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-copyeditorbackingfileorfail_1",
            "text": "Copy the given file from the editor\u2019s backing archive to the same path in project being edited. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_9",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-copyeditorbackingfilesorfail",
            "text": "Copy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyEditorBackingFilesOrFail"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_10",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-copyeditorbackingfilespreservingpath",
            "text": "Copy the given files from the editor\u2019s backing archive under the given directory into the same directory in the project being edited.",
            "title": "Operation: copyEditorBackingFilesPreservingPath"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_11",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-copyeditorbackingfileswithnewrelativepath",
            "text": "Copy the given files from the editor\u2019s backing archive under the given path. Take the relative paths and place under new destination path",
            "title": "Operation: copyEditorBackingFilesWithNewRelativePath"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_12",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-copyfile",
            "text": "Copy the given file in the target project. It is not an error if it doesn\u2019t exist",
            "title": "Operation: copyFile"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_13",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-copyfileorfail",
            "text": "Copy the given file in the target project. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyFileOrFail"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_14",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-countfilesindirectory",
            "text": "The number of files directly in this directory",
            "title": "Operation: countFilesInDirectory"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_15",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-deletedirectory",
            "text": "Deletes a directory with the given path",
            "title": "Operation: deleteDirectory"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_16",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-deletefile",
            "text": "Delete the given file from the project. Path can contain /s.",
            "title": "Operation: deleteFile"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_17",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-describechange",
            "text": "Describe a change we made to this object",
            "title": "Operation: describeChange"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_18",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-directoryexists",
            "text": "Does a directory with the given path exist?",
            "title": "Operation: directoryExists"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_19",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-editwith",
            "text": "Edit with the given editor",
            "title": "Operation: editWith"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_20",
            "text": "Name  Type  Description      editorName  class java.lang.String  Name of the editor to invoke    params  class java.lang.Object  Parameters to pass to the editor",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_21",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_22",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-filecontains",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileContains"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_23",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-filecount",
            "text": "Return the number of files in this project",
            "title": "Operation: fileCount"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_24",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-fileexists",
            "text": "Does a file with the given path exist?",
            "title": "Operation: fileExists"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_25",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-filehascontent",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileHasContent"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_26",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check against the given file",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-files",
            "text": "Files in this archive",
            "title": "Operation: files"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_27",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-findfile",
            "text": "Find file with the given path. Return null if not found.",
            "title": "Operation: findFile"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_28",
            "text": "Name  Type  Description      path  class java.lang.String  Path of the file we want",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_29",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-merge",
            "text": "Merge the given template to the given output path.",
            "title": "Operation: merge"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_30",
            "text": "Name  Type  Description      template  class java.lang.String  The name of the template within the backing Rug archive, under /.atomist / templates    path  class java.lang.String  The path that will be the merged path within the output project.    parameters  class java.lang.Object  Parameters",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-mergetemplates",
            "text": "Merge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.",
            "title": "Operation: mergeTemplates"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_31",
            "text": "Name  Type  Description      templatesPath  class java.lang.String  Source template path where content will be used to merge into target project    outputPath  class java.lang.String  The destination path within the destination project    ic  class java.lang.Object  Parameters to the template",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_32",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-moveunder",
            "text": "Move the contents of this project under the given path, preserving its present path under that",
            "title": "Operation: moveUnder"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_33",
            "text": "Name  Type  Description      path  class java.lang.String  The root path to move the file to",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-name",
            "text": "Return the name of the project. If it\u2019s in GitHub, it will be the repo name. If it\u2019s on the local filesystem it will be the directory name",
            "title": "Operation: name"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_34",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_35",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_36",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_37",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-projects",
            "text": "Don\u2019t use. Merely intended to simplify the life of the Rug to TypeScript transpiler.",
            "title": "Operation: projects"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_38",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-regexpreplace",
            "text": "Replace all occurrences of the given regular expression in this project",
            "title": "Operation: regexpReplace"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_39",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to search for    replacement  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-replace",
            "text": "Replace all occurrences of the given string literal in this project. Use with care!",
            "title": "Operation: replace"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_40",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to look for    replaceWith  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/project/#operation-replaceinpath",
            "text": "Globally replace all occurrences of the given string literal in file paths in this project",
            "title": "Operation: replaceInPath"
        },
        {
            "location": "/reference/rug/extensions/project/#parameters_41",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to search for    replacement  class java.lang.String  The string to replace in the paths if found",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/",
            "text": "Type: \nProperties\n\u00b6\n\n\nJava properties file\n\n\nProperties\n Operations\n\u00b6\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontainsKey\n\u00b6\n\n\nReturn whether a property key exists in this file or not\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe key of the property being searched for\n\n\n\n\n\n\n\n\nOperation: \ncontainsValue\n\u00b6\n\n\nReturn whether a property value exists in this file or not\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nThe value being searched for\n\n\n\n\n\n\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ngetValue\n\u00b6\n\n\nReturn the content of this property\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe name of the simple node\n\n\n\n\n\n\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nkeys\n\u00b6\n\n\nReturn a list of the supported keys\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file\u2019s permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nsetProperty\n\u00b6\n\n\nSet the value of the specified property, creating a property if not present\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe key of the property being set\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nThe value of the property\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from",
            "title": "Properties"
        },
        {
            "location": "/reference/rug/extensions/properties/#type-properties",
            "text": "Java properties file",
            "title": "Type: Properties"
        },
        {
            "location": "/reference/rug/extensions/properties/#properties-operations",
            "text": "",
            "title": "Properties Operations"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_1",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-containskey",
            "text": "Return whether a property key exists in this file or not",
            "title": "Operation: containsKey"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_2",
            "text": "Name  Type  Description      key  class java.lang.String  The key of the property being searched for",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-containsvalue",
            "text": "Return whether a property value exists in this file or not",
            "title": "Operation: containsValue"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_3",
            "text": "Name  Type  Description      value  class java.lang.String  The value being searched for",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_4",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_5",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_6",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-getvalue",
            "text": "Return the content of this property",
            "title": "Operation: getValue"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_8",
            "text": "Name  Type  Description      key  class java.lang.String  The name of the simple node",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-keys",
            "text": "Return a list of the supported keys",
            "title": "Operation: keys"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_10",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_12",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_14",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_15",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_16",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_17",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-permissions",
            "text": "Return the file\u2019s permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_18",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_19",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-setproperty",
            "text": "Set the value of the specified property, creating a property if not present",
            "title": "Operation: setProperty"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_20",
            "text": "Name  Type  Description      key  class java.lang.String  The key of the property being set    value  class java.lang.String  The value of the property",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/properties/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference/rug/extensions/properties/#parameters_21",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-file/",
            "text": "Type: \nPythonFile\n\u00b6\n\n\nPython file\n\n\nPythonFile\n Operations\n\u00b6\n\n\nOperation: \nappend\n\u00b6\n\n\nAppend\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nformatInfo\n\u00b6\n\n\nReturn the format info for the start of this structure in the file or null if not available\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nset\n\u00b6\n\n\nSet the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe match key whose content you want\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nThe new value\n\n\n\n\n\n\n\n\nOperation: \nupdate\n\u00b6\n\n\nUpdate the whole value\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nvalue\n\u00b6\n\n\nValue\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nvalueOf\n\u00b6\n\n\nReturn the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe match key whose content you want",
            "title": "PythonFile"
        },
        {
            "location": "/reference/rug/extensions/python-file/#type-pythonfile",
            "text": "Python file",
            "title": "Type: PythonFile"
        },
        {
            "location": "/reference/rug/extensions/python-file/#pythonfile-operations",
            "text": "",
            "title": "PythonFile Operations"
        },
        {
            "location": "/reference/rug/extensions/python-file/#operation-append",
            "text": "Append",
            "title": "Operation: append"
        },
        {
            "location": "/reference/rug/extensions/python-file/#parameters",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-file/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/python-file/#parameters_1",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-file/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/python-file/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-file/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/python-file/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-file/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/python-file/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-file/#operation-formatinfo",
            "text": "Return the format info for the start of this structure in the file or null if not available",
            "title": "Operation: formatInfo"
        },
        {
            "location": "/reference/rug/extensions/python-file/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-file/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/python-file/#parameters_6",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-file/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/python-file/#parameters_7",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-file/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/python-file/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-file/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/python-file/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-file/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/python-file/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-file/#operation-set",
            "text": "Set the value of the given key",
            "title": "Operation: set"
        },
        {
            "location": "/reference/rug/extensions/python-file/#parameters_11",
            "text": "Name  Type  Description      key  class java.lang.String  The match key whose content you want    value  class java.lang.String  The new value",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-file/#operation-update",
            "text": "Update the whole value",
            "title": "Operation: update"
        },
        {
            "location": "/reference/rug/extensions/python-file/#parameters_12",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-file/#operation-value",
            "text": "Value",
            "title": "Operation: value"
        },
        {
            "location": "/reference/rug/extensions/python-file/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-file/#operation-valueof",
            "text": "Return the value of the given key",
            "title": "Operation: valueOf"
        },
        {
            "location": "/reference/rug/extensions/python-file/#parameters_14",
            "text": "Name  Type  Description      name  class java.lang.String  The match key whose content you want",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/",
            "text": "Type: \nPythonRequirementsTxt\n\u00b6\n\n\nPython requirements text file\n\n\nPythonRequirementsTxt\n Operations\n\u00b6\n\n\nOperation: \nappend\n\u00b6\n\n\nAppend\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nformatInfo\n\u00b6\n\n\nReturn the format info for the start of this structure in the file or null if not available\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nset\n\u00b6\n\n\nSet the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe match key whose content you want\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nThe new value\n\n\n\n\n\n\n\n\nOperation: \nupdate\n\u00b6\n\n\nUpdate the whole value\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nvalue\n\u00b6\n\n\nValue\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nvalueOf\n\u00b6\n\n\nReturn the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe match key whose content you want",
            "title": "PythonRequirementsTxt"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#type-pythonrequirementstxt",
            "text": "Python requirements text file",
            "title": "Type: PythonRequirementsTxt"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#pythonrequirementstxt-operations",
            "text": "",
            "title": "PythonRequirementsTxt Operations"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#operation-append",
            "text": "Append",
            "title": "Operation: append"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#parameters",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#parameters_1",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#operation-formatinfo",
            "text": "Return the format info for the start of this structure in the file or null if not available",
            "title": "Operation: formatInfo"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#parameters_6",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#parameters_7",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#operation-set",
            "text": "Set the value of the given key",
            "title": "Operation: set"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#parameters_11",
            "text": "Name  Type  Description      key  class java.lang.String  The match key whose content you want    value  class java.lang.String  The new value",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#operation-update",
            "text": "Update the whole value",
            "title": "Operation: update"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#parameters_12",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#operation-value",
            "text": "Value",
            "title": "Operation: value"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#operation-valueof",
            "text": "Return the value of the given key",
            "title": "Operation: valueOf"
        },
        {
            "location": "/reference/rug/extensions/python-requirements-txt/#parameters_14",
            "text": "Name  Type  Description      name  class java.lang.String  The match key whose content you want",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/",
            "text": "Type: \nRugArchiveProject\n\u00b6\n\n\nRug archive\n\n\nRugArchiveProject\n Operations\n\u00b6\n\n\nOperation: \naddDirectory\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe name of the directory being added\n\n\n\n\n\n\nparentPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory should be created\n\n\n\n\n\n\n\n\nOperation: \naddDirectoryAndIntermediates\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndirectoryPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory and any missing intermediate directories will be created\n\n\n\n\n\n\n\n\nOperation: \naddExecutableFile\n\u00b6\n\n\nAdd the given executable file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \naddFile\n\u00b6\n\n\nAdd the given file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \nbackingArchiveProject\n\u00b6\n\n\nReturn a new Project View based on the original backing object (normally the .atomist/ directory)\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontext\n\u00b6\n\n\nProvides access additional context, such as the PathExpressionEngine\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor\u2019s backing archive to the same path in project being edited. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesOrFail\n\u00b6\n\n\nCopy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesPreservingPath\n\u00b6\n\n\nCopy the given files from the editor\u2019s backing archive under the given directory into the same directory in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesWithNewRelativePath\n\u00b6\n\n\nCopy the given files from the editor\u2019s backing archive under the given path. Take the relative paths and place under new destination path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFile\n\u00b6\n\n\nCopy the given file in the target project. It is not an error if it doesn\u2019t exist\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFileOrFail\n\u00b6\n\n\nCopy the given file in the target project. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncountFilesInDirectory\n\u00b6\n\n\nThe number of files directly in this directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteDirectory\n\u00b6\n\n\nDeletes a directory with the given path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteFile\n\u00b6\n\n\nDelete the given file from the project. Path can contain /s.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndescribeChange\n\u00b6\n\n\nDescribe a change we made to this object\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \ndirectoryExists\n\u00b6\n\n\nDoes a directory with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \neditWith\n\u00b6\n\n\nEdit with the given editor\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neditorName\n\n\nclass java.lang.String\n\n\nName of the editor to invoke\n\n\n\n\n\n\nparams\n\n\nclass java.lang.Object\n\n\nParameters to pass to the editor\n\n\n\n\n\n\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfileContains\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check\n\n\n\n\n\n\n\n\nOperation: \nfileCount\n\u00b6\n\n\nReturn the number of files in this project\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfileExists\n\u00b6\n\n\nDoes a file with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \nfileHasContent\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check against the given file\n\n\n\n\n\n\n\n\nOperation: \nfiles\n\u00b6\n\n\nFiles in this archive\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfindFile\n\u00b6\n\n\nFind file with the given path. Return null if not found.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nPath of the file we want\n\n\n\n\n\n\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmerge\n\u00b6\n\n\nMerge the given template to the given output path.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplate\n\n\nclass java.lang.String\n\n\nThe name of the template within the backing Rug archive, under /.atomist / templates\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path that will be the merged path within the output project.\n\n\n\n\n\n\nparameters\n\n\nclass java.lang.Object\n\n\nParameters\n\n\n\n\n\n\n\n\nOperation: \nmergeTemplates\n\u00b6\n\n\nMerge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplatesPath\n\n\nclass java.lang.String\n\n\nSource template path where content will be used to merge into target project\n\n\n\n\n\n\noutputPath\n\n\nclass java.lang.String\n\n\nThe destination path within the destination project\n\n\n\n\n\n\nic\n\n\nclass java.lang.Object\n\n\nParameters to the template\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmoveUnder\n\u00b6\n\n\nMove the contents of this project under the given path, preserving its present path under that\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe root path to move the file to\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the name of the project. If it\u2019s in GitHub, it will be the repo name. If it\u2019s on the local filesystem it will be the directory name\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nprojects\n\u00b6\n\n\nDon\u2019t use. Merely intended to simplify the life of the Rug to TypeScript transpiler.\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nregexpReplace\n\u00b6\n\n\nReplace all occurrences of the given regular expression in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nreplace\n\u00b6\n\n\nReplace all occurrences of the given string literal in this project. Use with care!\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to look for\n\n\n\n\n\n\nreplaceWith\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nreplaceInPath\n\u00b6\n\n\nGlobally replace all occurrences of the given string literal in file paths in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace in the paths if found",
            "title": "RugArchiveProject"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#type-rugarchiveproject",
            "text": "Rug archive",
            "title": "Type: RugArchiveProject"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#rugarchiveproject-operations",
            "text": "",
            "title": "RugArchiveProject Operations"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-adddirectory",
            "text": "Create a directory",
            "title": "Operation: addDirectory"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters",
            "text": "Name  Type  Description      name  class java.lang.String  The name of the directory being added    parentPath  class java.lang.String  The path under which the directory should be created",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-adddirectoryandintermediates",
            "text": "Create a directory",
            "title": "Operation: addDirectoryAndIntermediates"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_1",
            "text": "Name  Type  Description      directoryPath  class java.lang.String  The path under which the directory and any missing intermediate directories will be created",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-addexecutablefile",
            "text": "Add the given executable file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addExecutableFile"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_2",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-addfile",
            "text": "Add the given file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addFile"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_3",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-backingarchiveproject",
            "text": "Return a new Project View based on the original backing object (normally the .atomist/ directory)",
            "title": "Operation: backingArchiveProject"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_4",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_5",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-context",
            "text": "Provides access additional context, such as the PathExpressionEngine",
            "title": "Operation: context"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-copyeditorbackingfileorfail",
            "text": "Copy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_8",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-copyeditorbackingfileorfail_1",
            "text": "Copy the given file from the editor\u2019s backing archive to the same path in project being edited. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_9",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-copyeditorbackingfilesorfail",
            "text": "Copy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyEditorBackingFilesOrFail"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_10",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-copyeditorbackingfilespreservingpath",
            "text": "Copy the given files from the editor\u2019s backing archive under the given directory into the same directory in the project being edited.",
            "title": "Operation: copyEditorBackingFilesPreservingPath"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_11",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-copyeditorbackingfileswithnewrelativepath",
            "text": "Copy the given files from the editor\u2019s backing archive under the given path. Take the relative paths and place under new destination path",
            "title": "Operation: copyEditorBackingFilesWithNewRelativePath"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_12",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-copyfile",
            "text": "Copy the given file in the target project. It is not an error if it doesn\u2019t exist",
            "title": "Operation: copyFile"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_13",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-copyfileorfail",
            "text": "Copy the given file in the target project. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyFileOrFail"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_14",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-countfilesindirectory",
            "text": "The number of files directly in this directory",
            "title": "Operation: countFilesInDirectory"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_15",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-deletedirectory",
            "text": "Deletes a directory with the given path",
            "title": "Operation: deleteDirectory"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_16",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-deletefile",
            "text": "Delete the given file from the project. Path can contain /s.",
            "title": "Operation: deleteFile"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_17",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-describechange",
            "text": "Describe a change we made to this object",
            "title": "Operation: describeChange"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_18",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-directoryexists",
            "text": "Does a directory with the given path exist?",
            "title": "Operation: directoryExists"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_19",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-editwith",
            "text": "Edit with the given editor",
            "title": "Operation: editWith"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_20",
            "text": "Name  Type  Description      editorName  class java.lang.String  Name of the editor to invoke    params  class java.lang.Object  Parameters to pass to the editor",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_21",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_22",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-filecontains",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileContains"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_23",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-filecount",
            "text": "Return the number of files in this project",
            "title": "Operation: fileCount"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_24",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-fileexists",
            "text": "Does a file with the given path exist?",
            "title": "Operation: fileExists"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_25",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-filehascontent",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileHasContent"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_26",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check against the given file",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-files",
            "text": "Files in this archive",
            "title": "Operation: files"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_27",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-findfile",
            "text": "Find file with the given path. Return null if not found.",
            "title": "Operation: findFile"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_28",
            "text": "Name  Type  Description      path  class java.lang.String  Path of the file we want",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_29",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-merge",
            "text": "Merge the given template to the given output path.",
            "title": "Operation: merge"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_30",
            "text": "Name  Type  Description      template  class java.lang.String  The name of the template within the backing Rug archive, under /.atomist / templates    path  class java.lang.String  The path that will be the merged path within the output project.    parameters  class java.lang.Object  Parameters",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-mergetemplates",
            "text": "Merge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.",
            "title": "Operation: mergeTemplates"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_31",
            "text": "Name  Type  Description      templatesPath  class java.lang.String  Source template path where content will be used to merge into target project    outputPath  class java.lang.String  The destination path within the destination project    ic  class java.lang.Object  Parameters to the template",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_32",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-moveunder",
            "text": "Move the contents of this project under the given path, preserving its present path under that",
            "title": "Operation: moveUnder"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_33",
            "text": "Name  Type  Description      path  class java.lang.String  The root path to move the file to",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-name",
            "text": "Return the name of the project. If it\u2019s in GitHub, it will be the repo name. If it\u2019s on the local filesystem it will be the directory name",
            "title": "Operation: name"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_34",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_35",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_36",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_37",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-projects",
            "text": "Don\u2019t use. Merely intended to simplify the life of the Rug to TypeScript transpiler.",
            "title": "Operation: projects"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_38",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-regexpreplace",
            "text": "Replace all occurrences of the given regular expression in this project",
            "title": "Operation: regexpReplace"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_39",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to search for    replacement  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-replace",
            "text": "Replace all occurrences of the given string literal in this project. Use with care!",
            "title": "Operation: replace"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_40",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to look for    replaceWith  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#operation-replaceinpath",
            "text": "Globally replace all occurrences of the given string literal in file paths in this project",
            "title": "Operation: replaceInPath"
        },
        {
            "location": "/reference/rug/extensions/rug-archive-project/#parameters_41",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to search for    replacement  class java.lang.String  The string to replace in the paths if found",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-file/",
            "text": "Type: \nRugFile\n\u00b6\n\n\nRug DSL file\n\n\nRugFile\n Operations\n\u00b6\n\n\nOperation: \nappend\n\u00b6\n\n\nAppend\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nformatInfo\n\u00b6\n\n\nReturn the format info for the start of this structure in the file or null if not available\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nset\n\u00b6\n\n\nSet the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe match key whose content you want\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nThe new value\n\n\n\n\n\n\n\n\nOperation: \nupdate\n\u00b6\n\n\nUpdate the whole value\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nvalue\n\u00b6\n\n\nValue\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nvalueOf\n\u00b6\n\n\nReturn the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe match key whose content you want",
            "title": "RugFile"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#type-rugfile",
            "text": "Rug DSL file",
            "title": "Type: RugFile"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#rugfile-operations",
            "text": "",
            "title": "RugFile Operations"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#operation-append",
            "text": "Append",
            "title": "Operation: append"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#parameters",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#parameters_1",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#operation-formatinfo",
            "text": "Return the format info for the start of this structure in the file or null if not available",
            "title": "Operation: formatInfo"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#parameters_6",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#parameters_7",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#operation-set",
            "text": "Set the value of the given key",
            "title": "Operation: set"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#parameters_11",
            "text": "Name  Type  Description      key  class java.lang.String  The match key whose content you want    value  class java.lang.String  The new value",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#operation-update",
            "text": "Update the whole value",
            "title": "Operation: update"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#parameters_12",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#operation-value",
            "text": "Value",
            "title": "Operation: value"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#operation-valueof",
            "text": "Return the value of the given key",
            "title": "Operation: valueOf"
        },
        {
            "location": "/reference/rug/extensions/rug-file/#parameters_14",
            "text": "Name  Type  Description      name  class java.lang.String  The match key whose content you want",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/scala-file/",
            "text": "Type: \nScalaFile\n\u00b6\n\n\nScala file\n\n\nScalaFile\n Operations\n\u00b6\n\n\nOperation: \nappend\n\u00b6\n\n\nAppend\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nformatInfo\n\u00b6\n\n\nReturn the format info for the start of this structure in the file or null if not available\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nset\n\u00b6\n\n\nSet the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nclass java.lang.String\n\n\nThe match key whose content you want\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nThe new value\n\n\n\n\n\n\n\n\nOperation: \nupdate\n\u00b6\n\n\nUpdate the whole value\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nvalue\n\u00b6\n\n\nValue\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nvalueOf\n\u00b6\n\n\nReturn the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe match key whose content you want",
            "title": "ScalaFile"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#type-scalafile",
            "text": "Scala file",
            "title": "Type: ScalaFile"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#scalafile-operations",
            "text": "",
            "title": "ScalaFile Operations"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#operation-append",
            "text": "Append",
            "title": "Operation: append"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#parameters",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#parameters_1",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#operation-formatinfo",
            "text": "Return the format info for the start of this structure in the file or null if not available",
            "title": "Operation: formatInfo"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#parameters_6",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#parameters_7",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#operation-set",
            "text": "Set the value of the given key",
            "title": "Operation: set"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#parameters_11",
            "text": "Name  Type  Description      key  class java.lang.String  The match key whose content you want    value  class java.lang.String  The new value",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#operation-update",
            "text": "Update the whole value",
            "title": "Operation: update"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#parameters_12",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#operation-value",
            "text": "Value",
            "title": "Operation: value"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#operation-valueof",
            "text": "Return the value of the given key",
            "title": "Operation: valueOf"
        },
        {
            "location": "/reference/rug/extensions/scala-file/#parameters_14",
            "text": "Name  Type  Description      name  class java.lang.String  The match key whose content you want",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/services/",
            "text": "Type: \nServices\n\u00b6\n\n\nType for services. Used in executors\n\n\nServices\n Operations\n\u00b6\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npathExpressionEngine\n\u00b6\n\n\nUse to execute path expression\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nservices\n\u00b6\n\n\nServices\n\n\nParameters\n\u00b6\n\n\nNone",
            "title": "Services"
        },
        {
            "location": "/reference/rug/extensions/services/#type-services",
            "text": "Type for services. Used in executors",
            "title": "Type: Services"
        },
        {
            "location": "/reference/rug/extensions/services/#services-operations",
            "text": "",
            "title": "Services Operations"
        },
        {
            "location": "/reference/rug/extensions/services/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/services/#parameters",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/services/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/services/#parameters_1",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/services/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/services/#parameters_2",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/services/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/services/#parameters_3",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/services/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/services/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/services/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/services/#parameters_5",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/services/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/services/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/services/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/services/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/services/#operation-pathexpressionengine",
            "text": "Use to execute path expression",
            "title": "Operation: pathExpressionEngine"
        },
        {
            "location": "/reference/rug/extensions/services/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/services/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/services/#parameters_9",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/services/#operation-services",
            "text": "Services",
            "title": "Operation: services"
        },
        {
            "location": "/reference/rug/extensions/services/#parameters_10",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/",
            "text": "Type: \nSpringBootProject\n\u00b6\n\n\nSpring Boot project\n\n\nSpringBootProject\n Operations\n\u00b6\n\n\nOperation: \naddDirectory\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe name of the directory being added\n\n\n\n\n\n\nparentPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory should be created\n\n\n\n\n\n\n\n\nOperation: \naddDirectoryAndIntermediates\n\u00b6\n\n\nCreate a directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndirectoryPath\n\n\nclass java.lang.String\n\n\nThe path under which the directory and any missing intermediate directories will be created\n\n\n\n\n\n\n\n\nOperation: \naddExecutableFile\n\u00b6\n\n\nAdd the given executable file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \naddFile\n\u00b6\n\n\nAdd the given file to the project. Path can contain /s. Content is a literal string\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to be placed in the new file\n\n\n\n\n\n\n\n\nOperation: \nannotateBootApplication\n\u00b6\n\n\nAdd the given annotation to the Spring Boot application class\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npkg\n\n\nclass java.lang.String\n\n\nThe package of the annotation\n\n\n\n\n\n\nannotationName\n\n\nclass java.lang.String\n\n\nThe annotation to add\n\n\n\n\n\n\n\n\nOperation: \napplicationClassFQN\n\u00b6\n\n\nThe FQN of the Spring Boot Application class\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \napplicationClassPackage\n\u00b6\n\n\nThe package the Spring Boot Application class is in\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \napplicationClassSimpleName\n\u00b6\n\n\nThe simple name of the Spring Boot Application class\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nbackingArchiveProject\n\u00b6\n\n\nReturn a new Project View based on the original backing object (normally the .atomist/ directory)\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontext\n\u00b6\n\n\nProvides access additional context, such as the PathExpressionEngine\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFileOrFail\n\u00b6\n\n\nCopy the given file from the editor\u2019s backing archive to the same path in project being edited. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesOrFail\n\u00b6\n\n\nCopy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesPreservingPath\n\u00b6\n\n\nCopy the given files from the editor\u2019s backing archive under the given directory into the same directory in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\n\n\nOperation: \ncopyEditorBackingFilesWithNewRelativePath\n\u00b6\n\n\nCopy the given files from the editor\u2019s backing archive under the given path. Take the relative paths and place under new destination path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource directory\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFile\n\u00b6\n\n\nCopy the given file in the target project. It is not an error if it doesn\u2019t exist\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncopyFileOrFail\n\u00b6\n\n\nCopy the given file in the target project. Fail the editor if it isn\u2019t found or if the destination already exists\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsourcePath\n\n\nclass java.lang.String\n\n\nSource path\n\n\n\n\n\n\ndestinationPath\n\n\nclass java.lang.String\n\n\nDestination path\n\n\n\n\n\n\n\n\nOperation: \ncountFilesInDirectory\n\u00b6\n\n\nThe number of files directly in this directory\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteDirectory\n\u00b6\n\n\nDeletes a directory with the given path\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndeleteFile\n\u00b6\n\n\nDelete the given file from the project. Path can contain /s.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \ndescribeChange\n\u00b6\n\n\nDescribe a change we made to this object\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.String\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \ndirectoryExists\n\u00b6\n\n\nDoes a directory with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \neditWith\n\u00b6\n\n\nEdit with the given editor\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neditorName\n\n\nclass java.lang.String\n\n\nName of the editor to invoke\n\n\n\n\n\n\nparams\n\n\nclass java.lang.Object\n\n\nParameters to pass to the editor\n\n\n\n\n\n\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfileContains\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check\n\n\n\n\n\n\n\n\nOperation: \nfileCount\n\u00b6\n\n\nReturn the number of files in this project\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfileExists\n\u00b6\n\n\nDoes a file with the given path exist?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\n\n\nOperation: \nfileHasContent\n\u00b6\n\n\nDoes a file with the given path exist and have the expected content?\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path to use\n\n\n\n\n\n\ncontent\n\n\nclass java.lang.String\n\n\nThe content to check against the given file\n\n\n\n\n\n\n\n\nOperation: \nfiles\n\u00b6\n\n\nFiles in this archive\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nfindFile\n\u00b6\n\n\nFind file with the given path. Return null if not found.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nPath of the file we want\n\n\n\n\n\n\n\n\nOperation: \nisMaven\n\u00b6\n\n\nIs this a Maven project?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisSpring\n\u00b6\n\n\nIs this a Spring project?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisSpringBoot\n\u00b6\n\n\nIs this a Spring Boot project?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \njavaFileCount\n\u00b6\n\n\nReturn the number of Java files in this module\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmerge\n\u00b6\n\n\nMerge the given template to the given output path.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplate\n\n\nclass java.lang.String\n\n\nThe name of the template within the backing Rug archive, under /.atomist / templates\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe path that will be the merged path within the output project.\n\n\n\n\n\n\nparameters\n\n\nclass java.lang.Object\n\n\nParameters\n\n\n\n\n\n\n\n\nOperation: \nmergeTemplates\n\u00b6\n\n\nMerge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntemplatesPath\n\n\nclass java.lang.String\n\n\nSource template path where content will be used to merge into target project\n\n\n\n\n\n\noutputPath\n\n\nclass java.lang.String\n\n\nThe destination path within the destination project\n\n\n\n\n\n\nic\n\n\nclass java.lang.Object\n\n\nParameters to the template\n\n\n\n\n\n\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmoveUnder\n\u00b6\n\n\nMove the contents of this project under the given path, preserving its present path under that\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nclass java.lang.String\n\n\nThe root path to move the file to\n\n\n\n\n\n\n\n\nOperation: \nname\n\u00b6\n\n\nReturn the name of the project. If it\u2019s in GitHub, it will be the repo name. If it\u2019s on the local filesystem it will be the directory name\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npackages\n\u00b6\n\n\nList the packages in this project\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nprojects\n\u00b6\n\n\nDon\u2019t use. Merely intended to simplify the life of the Rug to TypeScript transpiler.\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nregexpReplace\n\u00b6\n\n\nReplace all occurrences of the given regular expression in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nregexp\n\n\nclass java.lang.String\n\n\nThe regular expression to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nrenamePackage\n\u00b6\n\n\nRename the given package. All package under it will also be renamed\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noldPackage\n\n\nclass java.lang.String\n\n\nOld package name\n\n\n\n\n\n\nnewPackage\n\n\nclass java.lang.String\n\n\nThe new package name\n\n\n\n\n\n\n\n\nOperation: \nreplace\n\u00b6\n\n\nReplace all occurrences of the given string literal in this project. Use with care!\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to look for\n\n\n\n\n\n\nreplaceWith\n\n\nclass java.lang.String\n\n\nThe string to replace matches with\n\n\n\n\n\n\n\n\nOperation: \nreplaceInPath\n\u00b6\n\n\nGlobally replace all occurrences of the given string literal in file paths in this project\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nliteral\n\n\nclass java.lang.String\n\n\nThe string to search for\n\n\n\n\n\n\nreplacement\n\n\nclass java.lang.String\n\n\nThe string to replace in the paths if found",
            "title": "SpringBootProject"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#type-springbootproject",
            "text": "Spring Boot project",
            "title": "Type: SpringBootProject"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#springbootproject-operations",
            "text": "",
            "title": "SpringBootProject Operations"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-adddirectory",
            "text": "Create a directory",
            "title": "Operation: addDirectory"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters",
            "text": "Name  Type  Description      name  class java.lang.String  The name of the directory being added    parentPath  class java.lang.String  The path under which the directory should be created",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-adddirectoryandintermediates",
            "text": "Create a directory",
            "title": "Operation: addDirectoryAndIntermediates"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_1",
            "text": "Name  Type  Description      directoryPath  class java.lang.String  The path under which the directory and any missing intermediate directories will be created",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-addexecutablefile",
            "text": "Add the given executable file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addExecutableFile"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_2",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-addfile",
            "text": "Add the given file to the project. Path can contain /s. Content is a literal string",
            "title": "Operation: addFile"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_3",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to be placed in the new file",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-annotatebootapplication",
            "text": "Add the given annotation to the Spring Boot application class",
            "title": "Operation: annotateBootApplication"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_4",
            "text": "Name  Type  Description      pkg  class java.lang.String  The package of the annotation    annotationName  class java.lang.String  The annotation to add",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-applicationclassfqn",
            "text": "The FQN of the Spring Boot Application class",
            "title": "Operation: applicationClassFQN"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-applicationclasspackage",
            "text": "The package the Spring Boot Application class is in",
            "title": "Operation: applicationClassPackage"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-applicationclasssimplename",
            "text": "The simple name of the Spring Boot Application class",
            "title": "Operation: applicationClassSimpleName"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-backingarchiveproject",
            "text": "Return a new Project View based on the original backing object (normally the .atomist/ directory)",
            "title": "Operation: backingArchiveProject"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_8",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_9",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_10",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-context",
            "text": "Provides access additional context, such as the PathExpressionEngine",
            "title": "Operation: context"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-copyeditorbackingfileorfail",
            "text": "Copy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_12",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-copyeditorbackingfileorfail_1",
            "text": "Copy the given file from the editor\u2019s backing archive to the same path in project being edited. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyEditorBackingFileOrFail"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_13",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-copyeditorbackingfilesorfail",
            "text": "Copy the given file from the editor\u2019s backing archive. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyEditorBackingFilesOrFail"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_14",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-copyeditorbackingfilespreservingpath",
            "text": "Copy the given files from the editor\u2019s backing archive under the given directory into the same directory in the project being edited.",
            "title": "Operation: copyEditorBackingFilesPreservingPath"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_15",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-copyeditorbackingfileswithnewrelativepath",
            "text": "Copy the given files from the editor\u2019s backing archive under the given path. Take the relative paths and place under new destination path",
            "title": "Operation: copyEditorBackingFilesWithNewRelativePath"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_16",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source directory    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-copyfile",
            "text": "Copy the given file in the target project. It is not an error if it doesn\u2019t exist",
            "title": "Operation: copyFile"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_17",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-copyfileorfail",
            "text": "Copy the given file in the target project. Fail the editor if it isn\u2019t found or if the destination already exists",
            "title": "Operation: copyFileOrFail"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_18",
            "text": "Name  Type  Description      sourcePath  class java.lang.String  Source path    destinationPath  class java.lang.String  Destination path",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-countfilesindirectory",
            "text": "The number of files directly in this directory",
            "title": "Operation: countFilesInDirectory"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_19",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-deletedirectory",
            "text": "Deletes a directory with the given path",
            "title": "Operation: deleteDirectory"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_20",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-deletefile",
            "text": "Delete the given file from the project. Path can contain /s.",
            "title": "Operation: deleteFile"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_21",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-describechange",
            "text": "Describe a change we made to this object",
            "title": "Operation: describeChange"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_22",
            "text": "Name  Type  Description      arg0  class java.lang.String  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-directoryexists",
            "text": "Does a directory with the given path exist?",
            "title": "Operation: directoryExists"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_23",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-editwith",
            "text": "Edit with the given editor",
            "title": "Operation: editWith"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_24",
            "text": "Name  Type  Description      editorName  class java.lang.String  Name of the editor to invoke    params  class java.lang.Object  Parameters to pass to the editor",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_25",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_26",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-filecontains",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileContains"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_27",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-filecount",
            "text": "Return the number of files in this project",
            "title": "Operation: fileCount"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_28",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-fileexists",
            "text": "Does a file with the given path exist?",
            "title": "Operation: fileExists"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_29",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-filehascontent",
            "text": "Does a file with the given path exist and have the expected content?",
            "title": "Operation: fileHasContent"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_30",
            "text": "Name  Type  Description      path  class java.lang.String  The path to use    content  class java.lang.String  The content to check against the given file",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-files",
            "text": "Files in this archive",
            "title": "Operation: files"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_31",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-findfile",
            "text": "Find file with the given path. Return null if not found.",
            "title": "Operation: findFile"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_32",
            "text": "Name  Type  Description      path  class java.lang.String  Path of the file we want",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-ismaven",
            "text": "Is this a Maven project?",
            "title": "Operation: isMaven"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_33",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-isspring",
            "text": "Is this a Spring project?",
            "title": "Operation: isSpring"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_34",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-isspringboot",
            "text": "Is this a Spring Boot project?",
            "title": "Operation: isSpringBoot"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_35",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-javafilecount",
            "text": "Return the number of Java files in this module",
            "title": "Operation: javaFileCount"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_36",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_37",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-merge",
            "text": "Merge the given template to the given output path.",
            "title": "Operation: merge"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_38",
            "text": "Name  Type  Description      template  class java.lang.String  The name of the template within the backing Rug archive, under /.atomist / templates    path  class java.lang.String  The path that will be the merged path within the output project.    parameters  class java.lang.Object  Parameters",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-mergetemplates",
            "text": "Merge templates from the specified directory in the backing archive, under /.atomist/templates, to the given output path in the project being edited.",
            "title": "Operation: mergeTemplates"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_39",
            "text": "Name  Type  Description      templatesPath  class java.lang.String  Source template path where content will be used to merge into target project    outputPath  class java.lang.String  The destination path within the destination project    ic  class java.lang.Object  Parameters to the template",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_40",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-moveunder",
            "text": "Move the contents of this project under the given path, preserving its present path under that",
            "title": "Operation: moveUnder"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_41",
            "text": "Name  Type  Description      path  class java.lang.String  The root path to move the file to",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-name",
            "text": "Return the name of the project. If it\u2019s in GitHub, it will be the repo name. If it\u2019s on the local filesystem it will be the directory name",
            "title": "Operation: name"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_42",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_43",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_44",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-packages",
            "text": "List the packages in this project",
            "title": "Operation: packages"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_45",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_46",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-projects",
            "text": "Don\u2019t use. Merely intended to simplify the life of the Rug to TypeScript transpiler.",
            "title": "Operation: projects"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_47",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-regexpreplace",
            "text": "Replace all occurrences of the given regular expression in this project",
            "title": "Operation: regexpReplace"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_48",
            "text": "Name  Type  Description      regexp  class java.lang.String  The regular expression to search for    replacement  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-renamepackage",
            "text": "Rename the given package. All package under it will also be renamed",
            "title": "Operation: renamePackage"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_49",
            "text": "Name  Type  Description      oldPackage  class java.lang.String  Old package name    newPackage  class java.lang.String  The new package name",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-replace",
            "text": "Replace all occurrences of the given string literal in this project. Use with care!",
            "title": "Operation: replace"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_50",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to look for    replaceWith  class java.lang.String  The string to replace matches with",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#operation-replaceinpath",
            "text": "Globally replace all occurrences of the given string literal in file paths in this project",
            "title": "Operation: replaceInPath"
        },
        {
            "location": "/reference/rug/extensions/spring-boot-project/#parameters_51",
            "text": "Name  Type  Description      literal  class java.lang.String  The string to search for    replacement  class java.lang.String  The string to replace in the paths if found",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/",
            "text": "Type: \nXml\n\u00b6\n\n\nXML\n\n\nXml\n Operations\n\u00b6\n\n\nOperation: \naddChildNode\n\u00b6\n\n\nAdd the specified content under the indicated xpath-selected node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath selector for the node to add the content under\n\n\n\n\n\n\nnewNode\n\n\nclass java.lang.String\n\n\nThe new node name to be added as a child\n\n\n\n\n\n\nnodeContent\n\n\nclass java.lang.String\n\n\nXML document to be added under the indicated node\n\n\n\n\n\n\n\n\nOperation: \naddOrReplaceNode\n\u00b6\n\n\nAdds or replaces a node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nparentNodeXPath\n\n\nclass java.lang.String\n\n\nThe XPath selector for the parent node\n\n\n\n\n\n\nxPathOfNodeToReplace\n\n\nclass java.lang.String\n\n\nThe XPath selector for the node to replace\n\n\n\n\n\n\nnewNode\n\n\nclass java.lang.String\n\n\nThe name of the node being placed\n\n\n\n\n\n\nnodeContent\n\n\nclass java.lang.String\n\n\nThe content of the node being placed\n\n\n\n\n\n\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontains\n\u00b6\n\n\nTests whether a node matching the given xpath expression is present\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to test against for the presence of a node\n\n\n\n\n\n\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ndeleteNode\n\u00b6\n\n\nDeletes the specified node\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to the node to delete\n\n\n\n\n\n\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ngetTextContentFor\n\u00b6\n\n\nGet the text content for a specific xpath expression\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to use to retrieve the test content\n\n\n\n\n\n\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file\u2019s permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nsetTextContentFor\n\u00b6\n\n\nSet the text content for a specific xpath expression\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxpath\n\n\nclass java.lang.String\n\n\nThe XPath to use to set the test content\n\n\n\n\n\n\nnewContent\n\n\nclass java.lang.String\n\n\nNew text content for the XPath\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from",
            "title": "Xml"
        },
        {
            "location": "/reference/rug/extensions/xml/#type-xml",
            "text": "XML",
            "title": "Type: Xml"
        },
        {
            "location": "/reference/rug/extensions/xml/#xml-operations",
            "text": "",
            "title": "Xml Operations"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-addchildnode",
            "text": "Add the specified content under the indicated xpath-selected node",
            "title": "Operation: addChildNode"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath selector for the node to add the content under    newNode  class java.lang.String  The new node name to be added as a child    nodeContent  class java.lang.String  XML document to be added under the indicated node",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-addorreplacenode",
            "text": "Adds or replaces a node",
            "title": "Operation: addOrReplaceNode"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_1",
            "text": "Name  Type  Description      parentNodeXPath  class java.lang.String  The XPath selector for the parent node    xPathOfNodeToReplace  class java.lang.String  The XPath selector for the node to replace    newNode  class java.lang.String  The name of the node being placed    nodeContent  class java.lang.String  The content of the node being placed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_2",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_3",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-contains",
            "text": "Tests whether a node matching the given xpath expression is present",
            "title": "Operation: contains"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_4",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to test against for the presence of a node",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-deletenode",
            "text": "Deletes the specified node",
            "title": "Operation: deleteNode"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_6",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to the node to delete",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_7",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_8",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-gettextcontentfor",
            "text": "Get the text content for a specific xpath expression",
            "title": "Operation: getTextContentFor"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_10",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to use to retrieve the test content",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_12",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_13",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_14",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_15",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_16",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_17",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_18",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-permissions",
            "text": "Return the file\u2019s permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_19",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_20",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-settextcontentfor",
            "text": "Set the text content for a specific xpath expression",
            "title": "Operation: setTextContentFor"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_21",
            "text": "Name  Type  Description      xpath  class java.lang.String  The XPath to use to set the test content    newContent  class java.lang.String  New text content for the XPath",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/xml/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference/rug/extensions/xml/#parameters_22",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/",
            "text": "Type: \nYml\n\u00b6\n\n\nYAML file.  If the file contains multiple YAML documents, only the first is parsed and addressable.\n\n\nYml\n Operations\n\u00b6\n\n\nOperation: \nblockingProblem\n\u00b6\n\n\nReport a severe, blocking problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nchildren\n\u00b6\n\n\nChildren\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \ncontent\n\u00b6\n\n\nReturn file content\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \neval\n\u00b6\n\n\nEvaluate, i.e., compile and execute, JavaScript code.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\narg0\n\n\nclass java.lang.Object\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nfail\n\u00b6\n\n\nCause the operation to fail with a fatal error\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nfilename\n\u00b6\n\n\nReturn file name, excluding path\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nisWellFormed\n\u00b6\n\n\nIs this file well-formed?\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nlineCount\n\u00b6\n\n\nReturn the number of lines in the file\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nmajorProblem\n\u00b6\n\n\nReport a major problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nmakeExecutable\n\u00b6\n\n\nMake the file executable\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nminorProblem\n\u00b6\n\n\nReport a minor problem\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\narg1\n\n\ncom.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>\n\n\n**\n\n\n\n\n\n\n\n\nOperation: \nnodeTags\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nnodeType\n\u00b6\n\n\nTags attached to the node\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npath\n\u00b6\n\n\nReturn file path, with forward slashes\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \npermissions\n\u00b6\n\n\nReturn the file\u2019s permissions\n\n\nParameters\n\u00b6\n\n\nNone\n\n\nOperation: \nprintln\n\u00b6\n\n\nCause the editor to print to the console. Useful for debugging if running editors locally.\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsg\n\n\nclass java.lang.String\n\n\nThe message to be displayed\n\n\n\n\n\n\n\n\nOperation: \nunderPath\n\u00b6\n\n\nDoes this path begin with the given pattern? Pattern should contain slashes but not begin with a /\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nroot\n\n\nclass java.lang.String\n\n\nThe root path to begin searching from\n\n\n\n\n\n\n\n\nOperation: \nupdateKey\n\u00b6\n\n\nUpdate the value of a given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nName of the key to update\n\n\n\n\n\n\nvalue\n\n\nclass java.lang.String\n\n\nNew value for the key\n\n\n\n\n\n\n\n\nOperation: \nvalueOf\n\u00b6\n\n\nReturn the value of the given key\n\n\nParameters\n\u00b6\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nclass java.lang.String\n\n\nThe YAML key whose content you want",
            "title": "Yml"
        },
        {
            "location": "/reference/rug/extensions/yml/#type-yml",
            "text": "YAML file.  If the file contains multiple YAML documents, only the first is parsed and addressable.",
            "title": "Type: Yml"
        },
        {
            "location": "/reference/rug/extensions/yml/#yml-operations",
            "text": "",
            "title": "Yml Operations"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-blockingproblem",
            "text": "Report a severe, blocking problem",
            "title": "Operation: blockingProblem"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-children",
            "text": "Children",
            "title": "Operation: children"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_1",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-content",
            "text": "Return file content",
            "title": "Operation: content"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_2",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-eval",
            "text": "Evaluate, i.e., compile and execute, JavaScript code.",
            "title": "Operation: eval"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_3",
            "text": "Name  Type  Description      arg0  class java.lang.Object  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-fail",
            "text": "Cause the operation to fail with a fatal error",
            "title": "Operation: fail"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_4",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-filename",
            "text": "Return file name, excluding path",
            "title": "Operation: filename"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_5",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-iswellformed",
            "text": "Is this file well-formed?",
            "title": "Operation: isWellFormed"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_6",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-linecount",
            "text": "Return the number of lines in the file",
            "title": "Operation: lineCount"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_7",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-majorproblem",
            "text": "Report a major problem",
            "title": "Operation: majorProblem"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_8",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-makeexecutable",
            "text": "Make the file executable",
            "title": "Operation: makeExecutable"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_9",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-minorproblem",
            "text": "Report a minor problem",
            "title": "Operation: minorProblem"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_10",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed    arg1  com.atomist.rug.runtime.rugdsl.FunctionInvocationContext<?>  **",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-nodetags",
            "text": "Tags attached to the node",
            "title": "Operation: nodeTags"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_11",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-nodetype",
            "text": "Tags attached to the node",
            "title": "Operation: nodeType"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_12",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-path",
            "text": "Return file path, with forward slashes",
            "title": "Operation: path"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_13",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-permissions",
            "text": "Return the file\u2019s permissions",
            "title": "Operation: permissions"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_14",
            "text": "None",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-println",
            "text": "Cause the editor to print to the console. Useful for debugging if running editors locally.",
            "title": "Operation: println"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_15",
            "text": "Name  Type  Description      msg  class java.lang.String  The message to be displayed",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-underpath",
            "text": "Does this path begin with the given pattern? Pattern should contain slashes but not begin with a /",
            "title": "Operation: underPath"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_16",
            "text": "Name  Type  Description      root  class java.lang.String  The root path to begin searching from",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-updatekey",
            "text": "Update the value of a given key",
            "title": "Operation: updateKey"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_17",
            "text": "Name  Type  Description      name  class java.lang.String  Name of the key to update    value  class java.lang.String  New value for the key",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/extensions/yml/#operation-valueof",
            "text": "Return the value of the given key",
            "title": "Operation: valueOf"
        },
        {
            "location": "/reference/rug/extensions/yml/#parameters_18",
            "text": "Name  Type  Description      name  class java.lang.String  The YAML key whose content you want",
            "title": "Parameters"
        },
        {
            "location": "/reference/rug/dsl/",
            "text": "The Rug DSL is deprecated\n\n\nThe primary supported language for developing Rugs is now TypeScript.\n\n\n\n\nIn a nutshell, Rug is an\n\nExternal Domain Specific Language\n.\n\n\nThe Rug DSL was designed to work alongside your existing projects in\nas unintrusive a fashion as possible to automate all the slow,\nannoying tasks of working in a modern software development\nenvironment.\n\n\nA key design goal was to respect your own tooling as much as possible\nso that \nevery project should be a working Atomist project, and\nevery Atomist project a working project\n.\n\n\nWhy a New Language?\n\u00b6\n\n\nWriting a language is hard, and there are already a \nlot\n of languages\nout there! So why do we need yet another one? Well the fact is that\noriginally we didn\u2019t actually start out to create one. At Atomist we\nhad a simple mission to:\n\n\n\n\nSimplify\n your Software Development Life by \nremoving the\nannoyances\n of \nCreating\n, \nMaintaining\n and \nRunning\n\nyour software.\n\n\n\n\nIt turns out there are a \nlot of annoyances\n, which was great as\nthere was so much we could help with!\n\n\nFrom the delay between deciding to create a project and getting\neverything all set up so you can get creating, through to helping\nteams adopt best practices. It became very obvious to us that\n\nnothing so far had hit these full-development-cycle problems\n and\nso that\u2019s what we wanted to do.\n\n\nAnd then there was the \nmicroservices architectural style\n that\n\ntook these annoyances and turned them up to 11!\n\n\nWe worked our way through these annoyances, examining them every step,\ncreated tools where we needed, created languages as well, and the\nresult so far is \nRug.\n\n\n\n\nRug ties your software development room together.\n\n\n\n\nWhat Rug is, and is not\n\u00b6\n\n\nRug is a \nsimple\n, English-like, \nDSL\n that provides a way to\u2026\n\n\n\n\nSelect and manipulate\n files, projects and even\n    multiple-projects.\n\n\nCompose\n operations to maximize reuse.\n\n\nDeclare parameters\n to allow automated gathering of valid user\n    input to drive operations.\n\n\n\n\nQuite simply, Rug and its supporting systems are \n\u201cSoftware that\nWrites and Evolves Software\u201d.\n\n\nRug is not a full-blown language with a complete set of control\nstructures as this is not its purpose.\n\n\nKey Rug Concepts\n\u00b6\n\n\nTo keep Rug focussed and simple, there are only 7 concepts in Rug\nitself:\n\n\n\n\nGenerators\n, which can be used to\n    create new projects from an existing model project.\n\n\nEditors\n, which are used to make\n    principled changes to a single project\n\n\nTemplates, content used by\n    \ngenerators\n\n    and \neditors\n\n\nReviewers (coming soon), which can inspect projects and match on\n    patterns, but can\u2019t change them\n\n\nExecutors (coming soon), which enable you to take coordinated actions\n    across multiple projects\n\n\nHandlers (coming soon), which are triggered by events in your software\n    development lifecycle\n\n\nTests\n (and a simple but powerful\n    test-driven environment so that you can have real confidence in\n    your Rug scripts)\n\n\n\n\nRug and the Atomist (Ro)Bot\n\u00b6\n\n\nWith Rug we wanted a way to create a system that actually helped you\ncreate and evolve your software projects as quickly, and as correctly\nas possible. We assumed from the get-go that you were developing in a\npolyglot environment, and so anything we created had to be open to\nworking with whatever artifacts you needed to create.\n\n\nTo this end we created a Bot and a collection of services that allow\nyou to run Rug in a number of different useful settings.\n\n\nRug is Evolving \nFast\n, but that\u2019s \nOK\n\u00b6\n\n\nWe\u2019re developing the Rug language to be as powerful, simple and\nconsistent as possible. Normally languages cannot evolve particularly\nquickly as they need to be updated in lock-step with the community\nthat is using them. When you create a Rug project and write your Rug\ngenerators, editors etc. within it you tie the version of the language\nto the project you\u2019re creating.\n\n\nThis gives you the power to select the version of the Rug language you\ndepend upon, safe in the knowledge that if you can run your Rug build\nyour Rug scripts locally with the version of Rug you wrote them to,\nthey can be run anywhere Rug can be.\n\n\nYou also of course have the power to decide when you upgrade to a\nnewer version of Rug for particular language features that may have\ncome to light after you originally created your Rug project. As we\nevolve the languages, we\u2019ll create Rug editors to do this upgrade\nprogrammatically!\n\n\nRug can be Extended with Rug Language Extensions\n\u00b6\n\n\nThere is already a \nlot\n of power in\nthe \nCore Rug Language Extensions\n that are built\ninto the Rug language but the intention is not for this to be the\nonly, exhaustive set of types you can use.\n\n\nRug itself can be extended with new language extensions for new languages,\nframeworks or even systems.\n\n\nIf you want to see some Rugs, check out the rug projects in \natomist-rugs\n.",
            "title": "Overview"
        },
        {
            "location": "/reference/rug/dsl/#why-a-new-language",
            "text": "Writing a language is hard, and there are already a  lot  of languages\nout there! So why do we need yet another one? Well the fact is that\noriginally we didn\u2019t actually start out to create one. At Atomist we\nhad a simple mission to:   Simplify  your Software Development Life by  removing the\nannoyances  of  Creating ,  Maintaining  and  Running \nyour software.   It turns out there are a  lot of annoyances , which was great as\nthere was so much we could help with!  From the delay between deciding to create a project and getting\neverything all set up so you can get creating, through to helping\nteams adopt best practices. It became very obvious to us that nothing so far had hit these full-development-cycle problems  and\nso that\u2019s what we wanted to do.  And then there was the  microservices architectural style  that took these annoyances and turned them up to 11!  We worked our way through these annoyances, examining them every step,\ncreated tools where we needed, created languages as well, and the\nresult so far is  Rug.   Rug ties your software development room together.",
            "title": "Why a New Language?"
        },
        {
            "location": "/reference/rug/dsl/#what-rug-is-and-is-not",
            "text": "Rug is a  simple , English-like,  DSL  that provides a way to\u2026   Select and manipulate  files, projects and even\n    multiple-projects.  Compose  operations to maximize reuse.  Declare parameters  to allow automated gathering of valid user\n    input to drive operations.   Quite simply, Rug and its supporting systems are  \u201cSoftware that\nWrites and Evolves Software\u201d.  Rug is not a full-blown language with a complete set of control\nstructures as this is not its purpose.",
            "title": "What Rug is, and is not"
        },
        {
            "location": "/reference/rug/dsl/#key-rug-concepts",
            "text": "To keep Rug focussed and simple, there are only 7 concepts in Rug\nitself:   Generators , which can be used to\n    create new projects from an existing model project.  Editors , which are used to make\n    principled changes to a single project  Templates, content used by\n     generators \n    and  editors  Reviewers (coming soon), which can inspect projects and match on\n    patterns, but can\u2019t change them  Executors (coming soon), which enable you to take coordinated actions\n    across multiple projects  Handlers (coming soon), which are triggered by events in your software\n    development lifecycle  Tests  (and a simple but powerful\n    test-driven environment so that you can have real confidence in\n    your Rug scripts)",
            "title": "Key Rug Concepts"
        },
        {
            "location": "/reference/rug/dsl/#rug-and-the-atomist-robot",
            "text": "With Rug we wanted a way to create a system that actually helped you\ncreate and evolve your software projects as quickly, and as correctly\nas possible. We assumed from the get-go that you were developing in a\npolyglot environment, and so anything we created had to be open to\nworking with whatever artifacts you needed to create.  To this end we created a Bot and a collection of services that allow\nyou to run Rug in a number of different useful settings.",
            "title": "Rug and the Atomist (Ro)Bot"
        },
        {
            "location": "/reference/rug/dsl/#rug-is-evolving-fast-but-thats-ok",
            "text": "We\u2019re developing the Rug language to be as powerful, simple and\nconsistent as possible. Normally languages cannot evolve particularly\nquickly as they need to be updated in lock-step with the community\nthat is using them. When you create a Rug project and write your Rug\ngenerators, editors etc. within it you tie the version of the language\nto the project you\u2019re creating.  This gives you the power to select the version of the Rug language you\ndepend upon, safe in the knowledge that if you can run your Rug build\nyour Rug scripts locally with the version of Rug you wrote them to,\nthey can be run anywhere Rug can be.  You also of course have the power to decide when you upgrade to a\nnewer version of Rug for particular language features that may have\ncome to light after you originally created your Rug project. As we\nevolve the languages, we\u2019ll create Rug editors to do this upgrade\nprogrammatically!",
            "title": "Rug is Evolving Fast, but that's OK"
        },
        {
            "location": "/reference/rug/dsl/#rug-can-be-extended-with-rug-language-extensions",
            "text": "There is already a  lot  of power in\nthe  Core Rug Language Extensions  that are built\ninto the Rug language but the intention is not for this to be the\nonly, exhaustive set of types you can use.  Rug itself can be extended with new language extensions for new languages,\nframeworks or even systems.  If you want to see some Rugs, check out the rug projects in  atomist-rugs .",
            "title": "Rug can be Extended with Rug Language Extensions"
        },
        {
            "location": "/reference/rug/dsl/syntax/",
            "text": "The Rug DSL is deprecated\n\n\nThe primary supported language for developing Rugs is now TypeScript.\n\n\n\n\nBelow is a detailed tour of Rug syntax.\n\n\nCase conventions\n\u00b6\n\n\nRug identifiers must observe the following case conventions.\n\n\n\n\nType names\n, such as editors and reviewer names: Same convention\n    as for valid Java identifiers, except that they must begin with a\n    capital letter.\n\n\nFunction names\n, such as \nappend\n in the earlier examples: Same\n    convention as for valid Java identifiers, except that they must\n    begin with a lower case letter.\n\n\n\n\nReserved words\n\u00b6\n\n\nReserved words may not be used as identifiers. The following are Rug\nreserved words:\n\n\n\n\n\n\n\n\nReserved word\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\n\n\n\n\neditor\n, \nreviewer\n\n\nIdentify program\n\n\n\n\n\n\n\n\n\n\nparam\n\n\nParameter declaration\n\n\n\n\n\n\n\n\n\n\nuses\n\n\nIdentify imported editor or reviewer\n\n\n\n\n\n\n\n\n\n\nprecondition\n\n\nPredicate that should hold for the editor be applicable or run\n\n\n\n\n\n\n\n\n\n\npostcondition\n\n\nPredicate that should hold after the editor has run. Including this makes an editor more robust, as it will fail rather than make any updates if the postcondition does not hold.\n\n\n\n\n\n\n\n\n\n\nwith\n\n\nSpecifies a with block\n\n\n\n\n\n\n\n\n\n\ndo\n\n\nBegins an action within a with block\n\n\n\n\n\n\n\n\n\n\nrun\n\n\nSpecifies an action within a with block that executes another project operation.\n\n\n\n\n\n\n\n\n\n\nbegin\n - \nend\n\n\nGroup a sequence of actions within a with block. Actions can include \ndo\n, a nested \nwith\n block, or \nrun\n. Each action will see the context in the state it was left in by the last action.\n\n\n\n\n\n\n\n\n\n\n\n\nRug Symbols\n\u00b6\n\n\n\n\n\n\n\n\nSymbol\n\n\nPurpose\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@\n\n\nPrefixes an \nannotation\n or a pre-packaged Rug variable lookup when using on declared parameters. Annotations are used to describe program elements.\n\n\n\n\n\n\n\n\n\n\n{}\n\n\nSurrounds a JavaScript block. The JavaScript expression(s) in the block are evaluated, and the return value can be used as a function argument.\n\n\n\n\n\n\n\n\n\n\n=\n\n\nEquality test\n\n\n\n\n\n\n\n\n\n\n\n\nString Literals\n\u00b6\n\n\nRug supports three types of string literals:\n\n\n\n\n\n\n\n\nString type\n\n\nNotes\n\n\nExamples\n\n\n\n\n\n\n\n\n\n\nDouble quoted\n\n\nAs supported in Java, including escaping via \n\\\n\n\n\"Donny\" \"Walter\\n\" \"Jeff Bridges is the \\\"Dude\\\"\"\n\n\n\n\n\n\nSingle quoted\n\n\nAs in Python or JavaScript. However, does not support escaping\n\n\n'This is a test'\n\n\n\n\n\n\nTriple quoted\n\n\nCan span linebreaks, as in Python or Scala. Unlike in Python, only double quotes are allowed\n\n\n\"\"\"This content could span many lines\"\"\"\n\n\n\n\n\n\n\n\nAnnotations\n\u00b6\n\n\nAnnotations\n are used to describe the following program elements:\neditors, reviewers and parameters. For example:\n\n\n@description\n \n\"Takes EJBs and delivers a roundhouse kick to them\"\n\n\neditor\n \nRemoveEJB\n\n\n\n@default\n \n'This is a default value'\n\n\n@description\n \n'A magical parameter'\n\n\n@validInput\n \n'Valid input looks like this: Foo'\n\n\nparam\n \nname\n:\n \n^.*$\n\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nisJava\n \nand\n \nimports\n \n\"javax.ejb\"\n\n\n  \ndo\n \nsetContent\n \n\"Now this won't compile, will it!\"\n\n\n\n\n\n\nThe permitted values are consistent with parameter definitions used\nextensively in Atomist components.\n\n\n\n\n\n\n\n\nAnnotation\n\n\nApplies to\n\n\nArgument Type\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\n@description\n\n\neditor, reviewer or parameter\n\n\nString\n\n\nDescribes the parameter\n\n\n\n\n\n\n@optional\n\n\nparameter\n\n\nNone\n\n\nWhether the parameter is required. Default is required.\n\n\n\n\n\n\n@default\n\n\nparameter\n\n\nString\n\n\nDefault value for parameter.\n\n\n\n\n\n\n@validInput\n\n\nparameter\n\n\nString\n\n\nDescription of valid input, such as \u201cA valid email address\u201d or \u201c3-10 alphanumeric characters\u201d\n\n\n\n\n\n\n@hide\n\n\nparameter\n\n\nNone\n\n\nIndicates that this parameter is only for use by programs and should not be displayed to users.\n\n\n\n\n\n\n@displayName\n\n\nparameter\n\n\nString\n\n\nUI friendly name for parameter.\n\n\n\n\n\n\n@maxLength\n\n\nparameter\n\n\nInteger\n\n\nMaximum length of a parameter\u2019s string value.\n\n\n\n\n\n\n@minLength\n\n\nparameter\n\n\nInteger\n\n\nMinimum length of a parameter\u2019s string value.\n\n\n\n\n\n\n\n\nString arguments to annotations, like other strings in Rug, are either\ndouble-quoted strings or triple double-quoted strings.  Triple\ndouble-quoted strings can include special characters like newlines.\n\n\n@\n Annotations are also used to look up pre-packaged variables that\nare supplied to your script for use when declaring editor parameter\npatterns, for example:\n\n\neditor\n \nClassRenamer\n\n\n\nparam\n \nold_class\n:\n \n@java_class\n\n\nparam\n \nnew_class\n:\n \n@java_class\n\n\n\n\n\n\nCurrently pre-packaged variables that can be looked up in this manner\nfor parameter pattern declarations specifically include the following:\n\n\n\n\n\n\n\n\nAnnotation\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n@artifact_id\n\n\nRegular Expression\n\n\nMaven artifact identifier\n\n\n\n\n\n\n@group_name\n\n\nRegular Expression\n\n\nMaven group name\n\n\n\n\n\n\n@java_class\n\n\nRegular Expression\n\n\nJava class name\n\n\n\n\n\n\n@java_identifier\n\n\nRegular Expression\n\n\nJava identifier\n\n\n\n\n\n\n@java_package\n\n\nRegular Expression\n\n\nJava package name\n\n\n\n\n\n\n@project_name\n\n\nRegular Expression\n\n\nGitHub repository name\n\n\n\n\n\n\n@port\n\n\nRegular Expression\n\n\nIP port\n\n\n\n\n\n\n@ruby_class\n\n\nRegular Expression\n\n\nRuby class name\n\n\n\n\n\n\n@ruby_identifier\n\n\nRegular Expression\n\n\nRuby identifier\n\n\n\n\n\n\n@semantic_version\n\n\nRegular Expression\n\n\nSemantic version\n\n\n\n\n\n\n@url\n\n\nRegular Expression\n\n\nURL\n\n\n\n\n\n\n@uuid\n\n\nRegular Expression\n\n\nUUID\n\n\n\n\n\n\n\n\nComments in Rug\n\u00b6\n\n\nAny content on a line after \n#\n is a comment. For example:\n\n\neditor\n \nFoo\n\n\n\nwith\n \nFile\n \nf\n \n# Do something with this file\n\n\n  \ndo\n\n\n    \n# This is not something we'd want to do in real life\n\n\n    \nsetContent\n \n\"Something else\"\n\n\n\n\n\n\nC style multi-line comments are supported:\n\n\n/*\n\n\n    This is a comment that goes on so long\n\n\n    that we need line breaks.\n\n\n*/\n\n\neditor\n \nSample\n \n...",
            "title": "Syntax"
        },
        {
            "location": "/reference/rug/dsl/syntax/#case-conventions",
            "text": "Rug identifiers must observe the following case conventions.   Type names , such as editors and reviewer names: Same convention\n    as for valid Java identifiers, except that they must begin with a\n    capital letter.  Function names , such as  append  in the earlier examples: Same\n    convention as for valid Java identifiers, except that they must\n    begin with a lower case letter.",
            "title": "Case conventions"
        },
        {
            "location": "/reference/rug/dsl/syntax/#reserved-words",
            "text": "Reserved words may not be used as identifiers. The following are Rug\nreserved words:     Reserved word  Purpose        editor ,  reviewer  Identify program      param  Parameter declaration      uses  Identify imported editor or reviewer      precondition  Predicate that should hold for the editor be applicable or run      postcondition  Predicate that should hold after the editor has run. Including this makes an editor more robust, as it will fail rather than make any updates if the postcondition does not hold.      with  Specifies a with block      do  Begins an action within a with block      run  Specifies an action within a with block that executes another project operation.      begin  -  end  Group a sequence of actions within a with block. Actions can include  do , a nested  with  block, or  run . Each action will see the context in the state it was left in by the last action.",
            "title": "Reserved words"
        },
        {
            "location": "/reference/rug/dsl/syntax/#rug-symbols",
            "text": "Symbol  Purpose        @  Prefixes an  annotation  or a pre-packaged Rug variable lookup when using on declared parameters. Annotations are used to describe program elements.      {}  Surrounds a JavaScript block. The JavaScript expression(s) in the block are evaluated, and the return value can be used as a function argument.      =  Equality test",
            "title": "Rug Symbols"
        },
        {
            "location": "/reference/rug/dsl/syntax/#string-literals",
            "text": "Rug supports three types of string literals:     String type  Notes  Examples      Double quoted  As supported in Java, including escaping via  \\  \"Donny\" \"Walter\\n\" \"Jeff Bridges is the \\\"Dude\\\"\"    Single quoted  As in Python or JavaScript. However, does not support escaping  'This is a test'    Triple quoted  Can span linebreaks, as in Python or Scala. Unlike in Python, only double quotes are allowed  \"\"\"This content could span many lines\"\"\"",
            "title": "String Literals"
        },
        {
            "location": "/reference/rug/dsl/syntax/#annotations",
            "text": "Annotations  are used to describe the following program elements:\neditors, reviewers and parameters. For example:  @description   \"Takes EJBs and delivers a roundhouse kick to them\"  editor   RemoveEJB  @default   'This is a default value'  @description   'A magical parameter'  @validInput   'Valid input looks like this: Foo'  param   name :   ^.*$  with   File   f   when   isJava   and   imports   \"javax.ejb\"     do   setContent   \"Now this won't compile, will it!\"   The permitted values are consistent with parameter definitions used\nextensively in Atomist components.     Annotation  Applies to  Argument Type  Meaning      @description  editor, reviewer or parameter  String  Describes the parameter    @optional  parameter  None  Whether the parameter is required. Default is required.    @default  parameter  String  Default value for parameter.    @validInput  parameter  String  Description of valid input, such as \u201cA valid email address\u201d or \u201c3-10 alphanumeric characters\u201d    @hide  parameter  None  Indicates that this parameter is only for use by programs and should not be displayed to users.    @displayName  parameter  String  UI friendly name for parameter.    @maxLength  parameter  Integer  Maximum length of a parameter\u2019s string value.    @minLength  parameter  Integer  Minimum length of a parameter\u2019s string value.     String arguments to annotations, like other strings in Rug, are either\ndouble-quoted strings or triple double-quoted strings.  Triple\ndouble-quoted strings can include special characters like newlines.  @  Annotations are also used to look up pre-packaged variables that\nare supplied to your script for use when declaring editor parameter\npatterns, for example:  editor   ClassRenamer  param   old_class :   @java_class  param   new_class :   @java_class   Currently pre-packaged variables that can be looked up in this manner\nfor parameter pattern declarations specifically include the following:     Annotation  Type  Description      @artifact_id  Regular Expression  Maven artifact identifier    @group_name  Regular Expression  Maven group name    @java_class  Regular Expression  Java class name    @java_identifier  Regular Expression  Java identifier    @java_package  Regular Expression  Java package name    @project_name  Regular Expression  GitHub repository name    @port  Regular Expression  IP port    @ruby_class  Regular Expression  Ruby class name    @ruby_identifier  Regular Expression  Ruby identifier    @semantic_version  Regular Expression  Semantic version    @url  Regular Expression  URL    @uuid  Regular Expression  UUID",
            "title": "Annotations"
        },
        {
            "location": "/reference/rug/dsl/syntax/#comments-in-rug",
            "text": "Any content on a line after  #  is a comment. For example:  editor   Foo  with   File   f   # Do something with this file     do       # This is not something we'd want to do in real life       setContent   \"Something else\"   C style multi-line comments are supported:  /*      This is a comment that goes on so long      that we need line breaks.  */  editor   Sample   ...",
            "title": "Comments in Rug"
        },
        {
            "location": "/reference/rug/dsl/javascript/",
            "text": "The Rug DSL is deprecated\n\n\nThe primary supported language for developing Rugs is now TypeScript.\n\n\n\n\nRug is intentionally limited, aiming for readability and focus rather\nthan general-purpose effectiveness. However, it makes it easy to\nescape to JavaScript at any time to perform more complex\ntasks. Currently there are two places where you can escape into\nJavaScript:\n\n\n\n\nJavaScript Expressions\n\n\nJavaScript Blocks\n\n\n\n\nEscaping into JavaScript Expressions\n\u00b6\n\n\nAnywhere an expression value is required, curly braces can be used to\nenclose a JavaScript statement or statements. As in Scala, the last\nstatement in the expression will be used as the value of the\nexpression. In the following example, the value of the JavaScript\nstatement is passed to the \nsetContent\n method on the \nfile\n type.\n\n\nwith File f when name = \"thing.txt\"\n  do setContent { f.content() + \"\\nAppend stuff\" }\n\n\n\n\n\nWhere a return value isn\u2019t required\u2013for example, when a JavaScript\nblock manipulates the currently scoped variable\u2013the special \neval\n\nfunction can be used, as follows:\n\n\nwith\n \nFile\n \nf\n \nwhen\n \nname\n \n=\n \n\"thing.txt\"\n\n\n  \ndo\n \neval\n { f.setContent(f.content() + \"\\nAppend stuff\") }\n\n\n\n\n\n\nJavaScript expressions are also commonly used in predicates, like\nthis:\n\n\nwith\n \nFile\n \nf\n \nwhen\n \n{\n \nf\n.\nname\n().\ntoLowerCase\n().\ncontains\n(\n\"xyz\"\n)\n \n}\n\n\n  \ndo\n \neval\n { f.setContent(f.content() + \"\\nAppend stuff\") }\n\n\n\n\n\n\nA JavaScript expression block has a context that is automatically\npropagated by Rug. This includes:\n\n\n\n\nAll parameters to the Rug script. These can be accessed by name or via the \nparams\n map.\n\n\nAll computed parameters.\n\n\nThe current context object, which is accessed via the alias declared in the \nwith\n statement (\nf\n in the example above.)\n\n\nThe parent of the current context, accessible via the \nparent\n method on the context object.\n\n\n\n\nJavaScript execution is performed using Java Nashorn, with the Rug\nruntime creating a synthetic function to enclose the block.\n\n\n\n\nAll invocations on context objects must use\nparentheses or a reference error will occur.\n\n\n\n\nIn the case of multiple statements, a \nreturn\n statement should be\nused for the last expression:\n\n\ndo\n \nmyFunction\n \n{\n\n   \nvar\n \nx\n \n=\n \n\"y\"\n\n   \nvar\n \ny\n \n=\n \nx\n\n   \nreturn\n \ny\n;\n\n\n}\n\n\n\n\n\n\nFinally a JavaScript expression can be used to compute a Rug computed\nvalue, like this:\n\n\neditor\n \nTest\n\n\n\nparam\n \nname\n:\n \n^.*$\n\n\n\nlowerized\n \n=\n \n{\n \nname\n.\ntoLowerCase\n()\n \n}",
            "title": "Using JavaScript"
        },
        {
            "location": "/reference/rug/dsl/javascript/#escaping-into-javascript-expressions",
            "text": "Anywhere an expression value is required, curly braces can be used to\nenclose a JavaScript statement or statements. As in Scala, the last\nstatement in the expression will be used as the value of the\nexpression. In the following example, the value of the JavaScript\nstatement is passed to the  setContent  method on the  file  type.  with File f when name = \"thing.txt\"\n  do setContent { f.content() + \"\\nAppend stuff\" }  Where a return value isn\u2019t required\u2013for example, when a JavaScript\nblock manipulates the currently scoped variable\u2013the special  eval \nfunction can be used, as follows:  with   File   f   when   name   =   \"thing.txt\"     do   eval  { f.setContent(f.content() + \"\\nAppend stuff\") }   JavaScript expressions are also commonly used in predicates, like\nthis:  with   File   f   when   {   f . name (). toLowerCase (). contains ( \"xyz\" )   }     do   eval  { f.setContent(f.content() + \"\\nAppend stuff\") }   A JavaScript expression block has a context that is automatically\npropagated by Rug. This includes:   All parameters to the Rug script. These can be accessed by name or via the  params  map.  All computed parameters.  The current context object, which is accessed via the alias declared in the  with  statement ( f  in the example above.)  The parent of the current context, accessible via the  parent  method on the context object.   JavaScript execution is performed using Java Nashorn, with the Rug\nruntime creating a synthetic function to enclose the block.   All invocations on context objects must use\nparentheses or a reference error will occur.   In the case of multiple statements, a  return  statement should be\nused for the last expression:  do   myFunction   { \n    var   x   =   \"y\" \n    var   y   =   x \n    return   y ;  }   Finally a JavaScript expression can be used to compute a Rug computed\nvalue, like this:  editor   Test  param   name :   ^.*$  lowerized   =   {   name . toLowerCase ()   }",
            "title": "Escaping into JavaScript Expressions"
        },
        {
            "location": "/reference/rug-cli/",
            "text": "This page documents syntax and functionality of the Rug CLI.\n\n\n\n\nAll commands listed below are provided only as examples of the\nsyntax.  They may refer to Rugs and Rug archives or projects that\ndo not exist and therefore may not work.\n\n\n\n\nConfiguring\n\u00b6\n\n\nIn order to use the CLI the following file named \ncli.yml\n needs to be\nplaced in \n~/.atomist\n.  The contents of the simplest possible\n\ncli.yml\n are below.\n\n\n# Set up the path to the local repository\n\n\nlocal-repository\n:\n\n  \npath\n:\n \n\"${user.home}/.atomist/repository\"\n\n\n\n# Set up remote repositories to query for Rug archives. Additionally one of the\n\n\n# repositories can also be enabled for publication (publish: true).\n\n\nremote-repositories\n:\n\n  \nmaven-central\n:\n\n    \npublish\n:\n \nfalse\n\n    \nurl\n:\n \n\"http://repo.maven.apache.org/maven2/\"\n\n  \nrug-types\n:\n\n    \npublish\n:\n \nfalse\n\n    \nurl\n:\n \n\"https://atomist.jfrog.io/atomist/libs-release\"\n\n  \nrugs\n:\n\n    \npublish\n:\n \nfalse\n\n    \nurl\n:\n \n\"https://atomist.jfrog.io/atomist/rugs-release\"\n\n\n\n\n\n\nThe Rug CLI will create the above \ncli.yml\n if you do not already have\none.\n\n\nCommands\n\u00b6\n\n\nThe CLI will assume the current working directory to be the root for execution.\n\n\nUsing the CLI as Rug users\n\u00b6\n\n\nInvoking Editors\n\u00b6\n\n\nRun an editor as follows:\n\n\n$\n rug edit atomist-rugs:common-editors:AddReadme --artifact-version \n1\n.0.0 \n\\\n\n    \nparameter1\n=\nfoo \nparameter2\n=\nbar\n\n\n$\n rug edit atomist-rugs:common-editors:AddReadme \nparameter1\n=\nfoo \nparameter2\n=\nbar\n\n\n\n\n\nartifact-version\n is optional and defaults to \nlatest\n semantics.\n\n--change-dir\n or \n-C\n for giving a generator a target directory.\n\n\nInvoking Generators\n\u00b6\n\n\n$\n rug generate atomist-rugs:spring-boot-rest-service:NewSpringBootRestService\n\" \\\n\n\n    --artifact-version 1.0.0 my-new-project parameter1=foo parameter2=bar\n\n\n\n$\n rug generate atomist-rugs:spring-boot-rest-service:NewSpringBootRestService\n\" \\\n\n\n    my-new-project parameter1=foo parameter2=bar\n\n\n\n\n\n\nartifact-version\n is optional and defaults to \nlatest\n semantics.\n\n--change-dir\n or \n-C\n for giving a generator a target directory.\n\n\nDescribing Rug Artifacts\n\u00b6\n\n\nTo get information about a Rug and list all its parameters, run the\n\nrug describe\n command.\n\n\n$\n rug describe archive atomist-rugs:spring-rest-service\n\n\n$\n rug describe editor atomist-rugs:spring-boot-rest-service:SpringBootThing \n\\\n\n    --artifact-version \n1\n.0.0\n\n\n$\n rug describe generator atomist-rugs:spring-boot-rest-service:NewSpringBootThing \n\\\n\n    --artifact-version \n1\n.0.0\n\n\n\n\n\nListing Local Archives\n\u00b6\n\n\nTo list all locally available Rug archives, run the \nrug list\n\ncommand:\n\n\n$\n rug list -f \n'version=[1.2,2.0)'\n -f \n'group=*atomist*'\n -f \n'artifact=*sp?ing*'\n\n\n\n\n\n\nThe local listing can be filtered by using \n-f\n filter expressions on\n\ngroup\n, \nartifact\n and \nversion\n. \ngroup\n and \nartifact\n support\nwildcards of \n*\n and \n?\n.  \nversion\n takes any version constraint.\n\n\nUsing the CLI as Rug developer\n\u00b6\n\n\nAll the following commands need to executed from within the Rug\nproject directory.\n\n\nRunning Tests\n\u00b6\n\n\nTo run all tests:\n\n\n$\n rug \ntest\n\n\n\n\n\n\nTo run a specific named test:\n\n\n$\n rug \ntest\n \n\"Whatever Test Secanrio\"\n\n\n\n\n\n\nTo run all scenarios from a .rt file:\n\n\n$\n rug \ntest\n MyRugTestFilename\n\n\n\n\n\nInstalling a Rug archive\n\u00b6\n\n\nCreating a Rug zip archive and installing it into the local repository\ncan be done with the following command:\n\n\n$\n rug install\n\n\n\n\n\nThis command packages the project into a zip archive, creates a Pom\nand installs both into the local repository under, usually\n\n.atomist/repository\n.\n\n\nDependency Resolution\n\u00b6\n\n\nThe Rug CLI will automatically resolve and download the dependencies\nof the given Rug archive when \nedit\n or \ngenerate\n is invoked. The\narchives along with their dependencies will be downloaded to a local\nrepository under \n~/.atomist\n via Aether and resolved from there.\n\n\nTherefore running above commands is a two step process:\n\n\n\n\nSearch and resolve (eventually download) the archive referenced in\n    the command.  The result of a resolution is cached for 60\n    minutes. You can force re-resolution with the \n-r\n command-line\n    option.\n\n\nStart up \nrug-lib\n passing parameters over to run the editor or\n    generator\n\n\n\n\nAdvanced Topics\n\u00b6\n\n\nTurning on Verbose output for Debugging\n\u00b6\n\n\nIf you want a more verbose output that includes any exceptions that\nRug command may have encountered, please add \n-X\n to your command.\nFor example:\n\n\n$\n rug \ntest\n -X",
            "title": "Rug CLI"
        },
        {
            "location": "/reference/rug-cli/#configuring",
            "text": "In order to use the CLI the following file named  cli.yml  needs to be\nplaced in  ~/.atomist .  The contents of the simplest possible cli.yml  are below.  # Set up the path to the local repository  local-repository : \n   path :   \"${user.home}/.atomist/repository\"  # Set up remote repositories to query for Rug archives. Additionally one of the  # repositories can also be enabled for publication (publish: true).  remote-repositories : \n   maven-central : \n     publish :   false \n     url :   \"http://repo.maven.apache.org/maven2/\" \n   rug-types : \n     publish :   false \n     url :   \"https://atomist.jfrog.io/atomist/libs-release\" \n   rugs : \n     publish :   false \n     url :   \"https://atomist.jfrog.io/atomist/rugs-release\"   The Rug CLI will create the above  cli.yml  if you do not already have\none.",
            "title": "Configuring"
        },
        {
            "location": "/reference/rug-cli/#commands",
            "text": "The CLI will assume the current working directory to be the root for execution.",
            "title": "Commands"
        },
        {
            "location": "/reference/rug-cli/#using-the-cli-as-rug-users",
            "text": "",
            "title": "Using the CLI as Rug users"
        },
        {
            "location": "/reference/rug-cli/#invoking-editors",
            "text": "Run an editor as follows:  $  rug edit atomist-rugs:common-editors:AddReadme --artifact-version  1 .0.0  \\ \n     parameter1 = foo  parameter2 = bar $  rug edit atomist-rugs:common-editors:AddReadme  parameter1 = foo  parameter2 = bar  artifact-version  is optional and defaults to  latest  semantics. --change-dir  or  -C  for giving a generator a target directory.",
            "title": "Invoking Editors"
        },
        {
            "location": "/reference/rug-cli/#invoking-generators",
            "text": "$  rug generate atomist-rugs:spring-boot-rest-service:NewSpringBootRestService \" \\      --artifact-version 1.0.0 my-new-project parameter1=foo parameter2=bar  $  rug generate atomist-rugs:spring-boot-rest-service:NewSpringBootRestService \" \\      my-new-project parameter1=foo parameter2=bar   artifact-version  is optional and defaults to  latest  semantics. --change-dir  or  -C  for giving a generator a target directory.",
            "title": "Invoking Generators"
        },
        {
            "location": "/reference/rug-cli/#describing-rug-artifacts",
            "text": "To get information about a Rug and list all its parameters, run the rug describe  command.  $  rug describe archive atomist-rugs:spring-rest-service $  rug describe editor atomist-rugs:spring-boot-rest-service:SpringBootThing  \\ \n    --artifact-version  1 .0.0 $  rug describe generator atomist-rugs:spring-boot-rest-service:NewSpringBootThing  \\ \n    --artifact-version  1 .0.0",
            "title": "Describing Rug Artifacts"
        },
        {
            "location": "/reference/rug-cli/#listing-local-archives",
            "text": "To list all locally available Rug archives, run the  rug list \ncommand:  $  rug list -f  'version=[1.2,2.0)'  -f  'group=*atomist*'  -f  'artifact=*sp?ing*'   The local listing can be filtered by using  -f  filter expressions on group ,  artifact  and  version .  group  and  artifact  support\nwildcards of  *  and  ? .   version  takes any version constraint.",
            "title": "Listing Local Archives"
        },
        {
            "location": "/reference/rug-cli/#using-the-cli-as-rug-developer",
            "text": "All the following commands need to executed from within the Rug\nproject directory.",
            "title": "Using the CLI as Rug developer"
        },
        {
            "location": "/reference/rug-cli/#running-tests",
            "text": "To run all tests:  $  rug  test   To run a specific named test:  $  rug  test   \"Whatever Test Secanrio\"   To run all scenarios from a .rt file:  $  rug  test  MyRugTestFilename",
            "title": "Running Tests"
        },
        {
            "location": "/reference/rug-cli/#installing-a-rug-archive",
            "text": "Creating a Rug zip archive and installing it into the local repository\ncan be done with the following command:  $  rug install  This command packages the project into a zip archive, creates a Pom\nand installs both into the local repository under, usually .atomist/repository .",
            "title": "Installing a Rug archive"
        },
        {
            "location": "/reference/rug-cli/#dependency-resolution",
            "text": "The Rug CLI will automatically resolve and download the dependencies\nof the given Rug archive when  edit  or  generate  is invoked. The\narchives along with their dependencies will be downloaded to a local\nrepository under  ~/.atomist  via Aether and resolved from there.  Therefore running above commands is a two step process:   Search and resolve (eventually download) the archive referenced in\n    the command.  The result of a resolution is cached for 60\n    minutes. You can force re-resolution with the  -r  command-line\n    option.  Start up  rug-lib  passing parameters over to run the editor or\n    generator",
            "title": "Dependency Resolution"
        },
        {
            "location": "/reference/rug-cli/#advanced-topics",
            "text": "",
            "title": "Advanced Topics"
        },
        {
            "location": "/reference/rug-cli/#turning-on-verbose-output-for-debugging",
            "text": "If you want a more verbose output that includes any exceptions that\nRug command may have encountered, please add  -X  to your command.\nFor example:  $  rug  test  -X",
            "title": "Turning on Verbose output for Debugging"
        }
    ]
}